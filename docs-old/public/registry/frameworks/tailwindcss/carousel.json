{
	"name": "carousel",
	"dependencies": ["embla-carousel-solid"],
	"registryDependencies": ["button"],
	"files": [
		{
			"name": "carousel.tsx",
			"content": "import { cn } from \"@/libs/cn\";\nimport type { CreateEmblaCarouselType } from \"embla-carousel-solid\";\nimport createEmblaCarousel from \"embla-carousel-solid\";\nimport type {\n\tAccessor,\n\tComponentProps,\n\tParentProps,\n\tVoidProps,\n} from \"solid-js\";\nimport {\n\tcreateContext,\n\tcreateEffect,\n\tcreateMemo,\n\tcreateSignal,\n\tmergeProps,\n\tonCleanup,\n\tsplitProps,\n\tuseContext,\n} from \"solid-js\";\nimport { Button } from \"./button\";\n\nexport type CarouselApi = CreateEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof createEmblaCarousel>;\ntype CarouselOptions = NonNullable<UseCarouselParameters[0]>;\ntype CarouselPlugin = NonNullable<UseCarouselParameters[1]>;\n\ntype CarouselProps = {\n\topts?: ReturnType<CarouselOptions>;\n\tplugins?: ReturnType<CarouselPlugin>;\n\torientation?: \"horizontal\" | \"vertical\";\n\tsetApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n\tcarouselRef: ReturnType<typeof createEmblaCarousel>[0];\n\tapi: ReturnType<typeof createEmblaCarousel>[1];\n\tscrollPrev: () => void;\n\tscrollNext: () => void;\n\tcanScrollPrev: Accessor<boolean>;\n\tcanScrollNext: Accessor<boolean>;\n} & CarouselProps;\n\nconst CarouselContext = createContext<Accessor<CarouselContextProps> | null>(\n\tnull,\n);\n\nconst useCarousel = () => {\n\tconst context = useContext(CarouselContext);\n\n\tif (!context) {\n\t\tthrow new Error(\"useCarousel must be used within a <Carousel />\");\n\t}\n\n\treturn context();\n};\n\nexport const Carousel = (props: ComponentProps<\"div\"> & CarouselProps) => {\n\tconst merge = mergeProps<\n\t\tParentProps<ComponentProps<\"div\"> & CarouselProps>[]\n\t>({ orientation: \"horizontal\" }, props);\n\n\tconst [local, rest] = splitProps(merge, [\n\t\t\"orientation\",\n\t\t\"opts\",\n\t\t\"setApi\",\n\t\t\"plugins\",\n\t\t\"class\",\n\t\t\"children\",\n\t]);\n\n\tconst [carouselRef, api] = createEmblaCarousel(\n\t\t() => ({\n\t\t\t...local.opts,\n\t\t\taxis: local.orientation === \"horizontal\" ? \"x\" : \"y\",\n\t\t}),\n\t\t() => (local.plugins === undefined ? [] : local.plugins),\n\t);\n\tconst [canScrollPrev, setCanScrollPrev] = createSignal(false);\n\tconst [canScrollNext, setCanScrollNext] = createSignal(false);\n\n\tconst onSelect = (api: NonNullable<ReturnType<CarouselApi>>) => {\n\t\tsetCanScrollPrev(api.canScrollPrev());\n\t\tsetCanScrollNext(api.canScrollNext());\n\t};\n\n\tconst scrollPrev = () => api()?.scrollPrev();\n\n\tconst scrollNext = () => api()?.scrollNext();\n\n\tconst handleKeyDown = (event: KeyboardEvent) => {\n\t\tif (event.key === \"ArrowLeft\") {\n\t\t\tevent.preventDefault();\n\t\t\tscrollPrev();\n\t\t} else if (event.key === \"ArrowRight\") {\n\t\t\tevent.preventDefault();\n\t\t\tscrollNext();\n\t\t}\n\t};\n\n\tcreateEffect(() => {\n\t\tif (!api() || !local.setApi) return;\n\n\t\tlocal.setApi(api);\n\t});\n\n\tcreateEffect(() => {\n\t\tconst _api = api();\n\t\tif (_api === undefined) return;\n\n\t\tonSelect(_api);\n\t\t_api.on(\"reInit\", onSelect);\n\t\t_api.on(\"select\", onSelect);\n\n\t\tonCleanup(() => {\n\t\t\t_api.off(\"select\", onSelect);\n\t\t});\n\t});\n\n\tconst value = createMemo(\n\t\t() =>\n\t\t\t({\n\t\t\t\tcarouselRef,\n\t\t\t\tapi,\n\t\t\t\topts: local.opts,\n\t\t\t\torientation:\n\t\t\t\t\tlocal.orientation ||\n\t\t\t\t\t(local.opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n\t\t\t\tscrollPrev,\n\t\t\t\tscrollNext,\n\t\t\t\tcanScrollPrev,\n\t\t\t\tcanScrollNext,\n\t\t\t}) satisfies CarouselContextProps,\n\t);\n\n\treturn (\n\t\t<CarouselContext.Provider value={value}>\n\t\t\t<div\n\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\tclass={cn(\"relative\", local.class)}\n\t\t\t\trole=\"region\"\n\t\t\t\taria-roledescription=\"carousel\"\n\t\t\t\t{...rest}\n\t\t\t>\n\t\t\t\t{local.children}\n\t\t\t</div>\n\t\t</CarouselContext.Provider>\n\t);\n};\n\nexport const CarouselContent = (props: ComponentProps<\"div\">) => {\n\tconst [local, rest] = splitProps(props, [\"class\"]);\n\tconst { carouselRef, orientation } = useCarousel();\n\n\treturn (\n\t\t<div ref={carouselRef} class=\"overflow-hidden\">\n\t\t\t<div\n\t\t\t\tclass={cn(\n\t\t\t\t\t\"flex\",\n\t\t\t\t\torientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n\t\t\t\t\tlocal.class,\n\t\t\t\t)}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport const CarouselItem = (props: ComponentProps<\"div\">) => {\n\tconst [local, rest] = splitProps(props, [\"class\"]);\n\tconst { orientation } = useCarousel();\n\n\treturn (\n\t\t<div\n\t\t\trole=\"group\"\n\t\t\taria-roledescription=\"slide\"\n\t\t\tclass={cn(\n\t\t\t\t\"min-w-0 shrink-0 grow-0 basis-full\",\n\t\t\t\torientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n\t\t\t\tlocal.class,\n\t\t\t)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\nexport const CarouselPrevious = (\n\tprops: VoidProps<ComponentProps<typeof Button>>,\n) => {\n\tconst merge = mergeProps<VoidProps<ComponentProps<typeof Button>[]>>(\n\t\t{ variant: \"outline\", size: \"icon\" },\n\t\tprops,\n\t);\n\tconst [local, rest] = splitProps(merge, [\"class\", \"variant\", \"size\"]);\n\tconst { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n\treturn (\n\t\t<Button\n\t\t\tvariant={local.variant}\n\t\t\tsize={local.size}\n\t\t\tclass={cn(\n\t\t\t\t\"absolute  h-8 w-8 touch-manipulation rounded-full\",\n\t\t\t\torientation === \"horizontal\"\n\t\t\t\t\t? \"-left-12 top-1/2 -translate-y-1/2\"\n\t\t\t\t\t: \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n\t\t\t\tlocal.class,\n\t\t\t)}\n\t\t\tdisabled={!canScrollPrev()}\n\t\t\tonClick={scrollPrev}\n\t\t\t{...rest}\n\t\t>\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tclass=\"size-4\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\td=\"M5 12h14M5 12l6 6m-6-6l6-6\"\n\t\t\t\t/>\n\t\t\t\t<title>Previous slide</title>\n\t\t\t</svg>\n\t\t</Button>\n\t);\n};\n\nexport const CarouselNext = (\n\tprops: VoidProps<ComponentProps<typeof Button>>,\n) => {\n\tconst merge = mergeProps<VoidProps<ComponentProps<typeof Button>[]>>(\n\t\t{ variant: \"outline\", size: \"icon\" },\n\t\tprops,\n\t);\n\tconst [local, rest] = splitProps(merge, [\"class\", \"variant\", \"size\"]);\n\tconst { orientation, scrollNext, canScrollNext } = useCarousel();\n\n\treturn (\n\t\t<Button\n\t\t\tvariant={local.variant}\n\t\t\tsize={local.size}\n\t\t\tclass={cn(\n\t\t\t\t\"absolute h-8 w-8 touch-manipulation rounded-full\",\n\t\t\t\torientation === \"horizontal\"\n\t\t\t\t\t? \"-right-12 top-1/2 -translate-y-1/2\"\n\t\t\t\t\t: \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n\t\t\t\tlocal.class,\n\t\t\t)}\n\t\t\tdisabled={!canScrollNext()}\n\t\t\tonClick={scrollNext}\n\t\t\t{...rest}\n\t\t>\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tclass=\"size-4\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\td=\"M5 12h14m-4 4l4-4m-4-4l4 4\"\n\t\t\t\t/>\n\t\t\t\t<title>Next slide</title>\n\t\t\t</svg>\n\t\t</Button>\n\t);\n};\n"
		}
	],
	"type": "components:ui"
}
