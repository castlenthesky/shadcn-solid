{
	"name": "tabs",
	"dependencies": ["@kobalte/core"],
	"files": [
		{
			"name": "tabs.tsx",
			"content": "import { cn } from \"@/libs/cn\";\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\nimport type {\n\tTabsContentProps,\n\tTabsIndicatorProps,\n\tTabsListProps,\n\tTabsRootProps,\n\tTabsTriggerProps,\n} from \"@kobalte/core/tabs\";\nimport { Tabs as TabsPrimitive } from \"@kobalte/core/tabs\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport { cva } from \"class-variance-authority\";\nimport type { ValidComponent, VoidProps } from \"solid-js\";\nimport { splitProps } from \"solid-js\";\n\ntype tabsProps<T extends ValidComponent = \"div\"> = TabsRootProps<T> & {\n\tclass?: string;\n};\n\nexport const Tabs = <T extends ValidComponent = \"div\">(\n\tprops: PolymorphicProps<T, tabsProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as tabsProps, [\"class\"]);\n\n\treturn (\n\t\t<TabsPrimitive\n\t\t\tclass={cn(\"w-full data-[orientation=vertical]:flex\", local.class)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\ntype tabsListProps<T extends ValidComponent = \"div\"> = TabsListProps<T> & {\n\tclass?: string;\n};\n\nexport const TabsList = <T extends ValidComponent = \"div\">(\n\tprops: PolymorphicProps<T, tabsListProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as tabsListProps, [\"class\"]);\n\n\treturn (\n\t\t<TabsPrimitive.List\n\t\t\tclass={cn(\n\t\t\t\t\"relative flex w-full rounded-lg bg-muted p-1 text-muted-foreground data-[orientation=vertical]:flex-col data-[orientation=horizontal]:items-center data-[orientation=vertical]:items-stretch\",\n\t\t\t\tlocal.class,\n\t\t\t)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\ntype tabsContentProps<T extends ValidComponent = \"div\"> =\n\tTabsContentProps<T> & {\n\t\tclass?: string;\n\t};\n\nexport const TabsContent = <T extends ValidComponent = \"div\">(\n\tprops: PolymorphicProps<T, tabsContentProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as tabsContentProps, [\"class\"]);\n\n\treturn (\n\t\t<TabsPrimitive.Content\n\t\t\tclass={cn(\n\t\t\t\t\"transition-shadow duration-200 focus-visible:outline-none focus-visible:ring-[1.5px] focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background data-[orientation=horizontal]:mt-2 data-[orientation=vertical]:ml-2\",\n\t\t\t\tlocal.class,\n\t\t\t)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\ntype tabsTriggerProps<T extends ValidComponent = \"button\"> =\n\tTabsTriggerProps<T> & {\n\t\tclass?: string;\n\t};\n\nexport const TabsTrigger = <T extends ValidComponent = \"button\">(\n\tprops: PolymorphicProps<T, tabsTriggerProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as tabsTriggerProps, [\"class\"]);\n\n\treturn (\n\t\t<TabsPrimitive.Trigger\n\t\t\tclass={cn(\n\t\t\t\t\"peer relative z-10 inline-flex h-7 w-full items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium outline-none transition-colors disabled:pointer-events-none disabled:opacity-50 data-[selected]:text-foreground\",\n\t\t\t\tlocal.class,\n\t\t\t)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\nconst tabsIndicatorVariants = cva(\n\t\"absolute transition-all duration-200 outline-none\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tblock:\n\t\t\t\t\t\"data-[orientation=horizontal]:bottom-1 data-[orientation=horizontal]:left-0 data-[orientation=vertical]:right-1 data-[orientation=vertical]:top-0 data-[orientation=horizontal]:h-[calc(100%-0.5rem)] data-[orientation=vertical]:w-[calc(100%-0.5rem)] bg-background shadow rounded-md peer-focus-visible:ring-[1.5px] peer-focus-visible:ring-ring peer-focus-visible:ring-offset-2 peer-focus-visible:ring-offset-background peer-focus-visible:outline-none\",\n\t\t\t\tunderline:\n\t\t\t\t\t\"data-[orientation=horizontal]:-bottom-[1px] data-[orientation=horizontal]:left-0 data-[orientation=vertical]:-right-[1px] data-[orientation=vertical]:top-0 data-[orientation=horizontal]:h-[2px] data-[orientation=vertical]:w-[2px] bg-primary\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"block\",\n\t\t},\n\t},\n);\n\ntype tabsIndicatorProps<T extends ValidComponent = \"div\"> = VoidProps<\n\tTabsIndicatorProps<T> &\n\t\tVariantProps<typeof tabsIndicatorVariants> & {\n\t\t\tclass?: string;\n\t\t}\n>;\n\nexport const TabsIndicator = <T extends ValidComponent = \"div\">(\n\tprops: PolymorphicProps<T, tabsIndicatorProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as tabsIndicatorProps, [\n\t\t\"class\",\n\t\t\"variant\",\n\t]);\n\n\treturn (\n\t\t<TabsPrimitive.Indicator\n\t\t\tclass={cn(tabsIndicatorVariants({ variant: local.variant }), local.class)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n"
		}
	],
	"type": "components:ui"
}
