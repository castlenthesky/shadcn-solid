{
	"name": "otp-field",
	"dependencies": ["@corvu/otp-field"],
	"files": [
		{
			"name": "otp-field.tsx",
			"content": "import { cn } from \"@/libs/cn\";\nimport type { DynamicProps, RootProps } from \"@corvu/otp-field\";\nimport OTPFieldPrimitive from \"@corvu/otp-field\";\nimport type { ComponentProps, ValidComponent } from \"solid-js\";\nimport { Show, splitProps } from \"solid-js\";\n\nexport const OTPFieldInput = OTPFieldPrimitive.Input;\n\ntype OTPFieldProps<T extends ValidComponent = \"div\"> = RootProps<T> & {\n\tclass?: string;\n};\n\nexport const OTPField = <T extends ValidComponent = \"div\">(\n\tprops: DynamicProps<T, OTPFieldProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props, [\"class\"]);\n\n\treturn (\n\t\t<OTPFieldPrimitive\n\t\t\tclass={cn(\n\t\t\t\t\"flex items-center gap-2 has-[:disabled]:opacity-50\",\n\t\t\t\tlocal.class,\n\t\t\t)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\nexport const OTPFieldGroup = (props: ComponentProps<\"div\">) => {\n\tconst [local, rest] = splitProps(props, [\"class\"]);\n\n\treturn <div class={cn(\"flex items-center\", local.class)} {...rest} />;\n};\n\nexport const OTPFieldSeparator = (props: ComponentProps<\"div\">) => {\n\treturn (\n\t\t// biome-ignore lint/a11y/useAriaPropsForRole: []\n\t\t<div role=\"separator\" {...props}>\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclass=\"size-4\"\n\t\t\t\tviewBox=\"0 0 15 15\"\n\t\t\t>\n\t\t\t\t<title>Separator</title>\n\t\t\t\t<path\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\td=\"M5 7.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5\"\n\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</div>\n\t);\n};\n\nexport const OTPFieldSlot = (\n\tprops: ComponentProps<\"div\"> & { index: number },\n) => {\n\tconst [local, rest] = splitProps(props, [\"class\", \"index\"]);\n\tconst context = OTPFieldPrimitive.useContext();\n\tconst char = () => context.value()[local.index];\n\tconst hasFakeCaret = () =>\n\t\tcontext.value().length === local.index && context.isInserting();\n\tconst isActive = () => context.activeSlots().includes(local.index);\n\n\treturn (\n\t\t<div\n\t\t\tclass={cn(\n\t\t\t\t\"relative flex size-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:(rounded-l-md border-l) last:rounded-r-md\",\n\t\t\t\tisActive() && \"z-10 ring-1.5 ring-ring\",\n\t\t\t\tlocal.class,\n\t\t\t)}\n\t\t\t{...rest}\n\t\t>\n\t\t\t{char()}\n\t\t\t<Show when={hasFakeCaret()}>\n\t\t\t\t<div class=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n\t\t\t\t\t<div class=\"h-4 w-px animate-caret-blink bg-foreground\" />\n\t\t\t\t</div>\n\t\t\t</Show>\n\t\t</div>\n\t);\n};\n"
		}
	],
	"type": "components:ui"
}
