---
import { cn } from "@/libs/cn";
import type { MarkdownHeading } from "astro";

type Props = {
	data: MarkdownHeading[];
};

const { data } = Astro.props;
const { pathname } = Astro.url;
---

<script>
  const watchIntersectionObserver = () => {
    const observer = new IntersectionObserver(
      (entries) => {
        let firstIntersectingEntry = null;

        for (const entry of entries) {
          if (entry.isIntersecting) {
            firstIntersectingEntry = entry;
            break;
          }
        }

        if (firstIntersectingEntry) {
          const headingFragment = `#${firstIntersectingEntry.target.id}`;
          const tocItem = document.querySelector(
            `a[href="${window.location.pathname + headingFragment}"]`
          );
          const previouslyActivatedItem =
            document.querySelector(".active-toc-item");

          previouslyActivatedItem?.classList.remove("active-toc-item");
          tocItem?.classList.add("active-toc-item");
        }
      },
      { root: null, rootMargin: "0px", threshold: [1] }
    );

    const sectionHeadings = document.querySelectorAll("h2, h3");

    for (const heading of sectionHeadings) {
      observer.observe(heading);
    }
  };

  watchIntersectionObserver();

  document.addEventListener("astro:after-swap", watchIntersectionObserver);
</script>

<aside class="space-y-2">
  <p class="font-medium">On This Page</p>
  <ul class="m-0 list-none">
    {
      data.map((h) => (
        <li class={cn("mt-0 pt-2", h.depth === 3 && "pl-4")}>
          <a
            href={`${pathname}#${h.slug}`}
            class={cn(
              "inline-block no-underline transition-colors hover:text-foreground text-muted-foreground",
              "[&.active-toc-item]:font-medium [&.active-toc-item]:text-foreground"
            )}
          >
            {h.text}
          </a>
        </li>
      ))
    }
  </ul>
</aside>
