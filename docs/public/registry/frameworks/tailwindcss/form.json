{
	"name": "form",
	"dependencies": ["solid-js"],
	"registryDependencies": ["label"],
	"files": [
		{
			"name": "form.tsx",
			"content": "import { cn } from \"@/libs/cn\";\nimport { Label } from \"@/libs/ui/label\";\nimport type { Component, ComponentProps, JSX } from \"solid-js\";\nimport {\n\tcreateContext,\n\tcreateUniqueId,\n\tsplitProps,\n\tuseContext,\n\ttype Accessor,\n} from \"solid-js\";\n\n// Form field context types\ninterface FormFieldContextValue {\n\tname: string;\n\terror: Accessor<string | undefined>;\n\tisValid: Accessor<boolean>;\n}\n\ninterface FormItemContextValue {\n\tid: string;\n}\n\n// Create contexts\nconst FormFieldContext = createContext<FormFieldContextValue>();\nconst FormItemContext = createContext<FormItemContextValue>();\n\n// Hook to access form field state\nexport const useFormField = () => {\n\tconst fieldContext = useContext(FormFieldContext);\n\tconst itemContext = useContext(FormItemContext);\n\n\tif (!fieldContext) {\n\t\tthrow new Error(\"useFormField should be used within <FormField>\");\n\t}\n\n\tif (!itemContext) {\n\t\tthrow new Error(\"useFormField should be used within <FormItem>\");\n\t}\n\n\tconst { id } = itemContext;\n\n\treturn {\n\t\tid,\n\t\tname: fieldContext.name,\n\t\tformItemId: `${id}-form-item`,\n\t\tformDescriptionId: `${id}-form-item-description`,\n\t\tformMessageId: `${id}-form-item-message`,\n\t\terror: fieldContext.error,\n\t\tisValid: fieldContext.isValid,\n\t};\n};\n\n// Form field wrapper\ninterface FormFieldProps {\n\tname: string;\n\terror?: Accessor<string | undefined>;\n\tisValid?: Accessor<boolean>;\n\tchildren: JSX.Element;\n}\n\nexport const FormField: Component<FormFieldProps> = (props) => {\n\tconst contextValue = {\n\t\tname: props.name,\n\t\terror: props.error || (() => undefined),\n\t\tisValid: props.isValid || (() => true),\n\t};\n\n\treturn (\n\t\t<FormFieldContext.Provider value={contextValue}>\n\t\t\t{props.children}\n\t\t</FormFieldContext.Provider>\n\t);\n};\n\n// Form item container\ninterface FormItemProps extends ComponentProps<\"div\"> {\n\tclass?: string;\n}\n\nexport const FormItem: Component<FormItemProps> = (props) => {\n\tconst [local, rest] = splitProps(props, [\"class\", \"children\"]);\n\tconst id = createUniqueId();\n\n\tconst contextValue = { id };\n\n\treturn (\n\t\t<FormItemContext.Provider value={contextValue}>\n\t\t\t<div\n\t\t\t\tdata-slot=\"form-item\"\n\t\t\t\tclass={cn(\"grid gap-2\", local.class)}\n\t\t\t\t{...rest}\n\t\t\t>\n\t\t\t\t{local.children}\n\t\t\t</div>\n\t\t</FormItemContext.Provider>\n\t);\n};\n\n// Form label\ninterface FormLabelProps extends ComponentProps<typeof Label> {\n\tclass?: string;\n}\n\nexport const FormLabel: Component<FormLabelProps> = (props) => {\n\tconst [local, rest] = splitProps(props, [\"class\"]);\n\tconst { error, formItemId } = useFormField();\n\n\treturn (\n\t\t<Label\n\t\t\tdata-slot=\"form-label\"\n\t\t\tdata-error={!!error()}\n\t\t\tclass={cn(\"data-[error=true]:text-destructive\", local.class)}\n\t\t\tfor={formItemId}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\n// Form control wrapper - acts like Radix Slot for composition\ninterface FormControlProps extends ComponentProps<\"div\"> {\n\tclass?: string;\n\tchildren: JSX.Element;\n}\n\nexport const FormControl: Component<FormControlProps> = (props) => {\n\tconst [local, rest] = splitProps(props, [\"class\", \"children\"]);\n\tconst { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n\t// Clone the child element and add form-specific props\n\tconst childWithProps = () => {\n\t\tconst child = local.children as any;\n\t\tif (typeof child === \"function\") {\n\t\t\treturn child();\n\t\t}\n\t\treturn child;\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"form-control\"\n\t\t\tclass={local.class}\n\t\t\t{...rest}\n\t\t>\n\t\t\t<div\n\t\t\t\tid={formItemId}\n\t\t\t\taria-describedby={\n\t\t\t\t\t!error()\n\t\t\t\t\t\t? formDescriptionId\n\t\t\t\t\t\t: `${formDescriptionId} ${formMessageId}`\n\t\t\t\t}\n\t\t\t\taria-invalid={!!error()}\n\t\t\t>\n\t\t\t\t{childWithProps()}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// Form description\ninterface FormDescriptionProps extends ComponentProps<\"p\"> {\n\tclass?: string;\n}\n\nexport const FormDescription: Component<FormDescriptionProps> = (props) => {\n\tconst [local, rest] = splitProps(props, [\"class\"]);\n\tconst { formDescriptionId } = useFormField();\n\n\treturn (\n\t\t<p\n\t\t\tdata-slot=\"form-description\"\n\t\t\tid={formDescriptionId}\n\t\t\tclass={cn(\"text-muted-foreground text-sm\", local.class)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\n// Form message (error display)\ninterface FormMessageProps extends ComponentProps<\"p\"> {\n\tclass?: string;\n}\n\nexport const FormMessage: Component<FormMessageProps> = (props) => {\n\tconst [local, rest] = splitProps(props, [\"class\", \"children\"]);\n\tconst { error, formMessageId } = useFormField();\n\t\n\tconst body = () => error() || local.children;\n\n\tif (!body()) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<p\n\t\t\tdata-slot=\"form-message\"\n\t\t\tid={formMessageId}\n\t\t\tclass={cn(\"text-destructive text-sm\", local.class)}\n\t\t\t{...rest}\n\t\t>\n\t\t\t{body()}\n\t\t</p>\n\t);\n};\n\n// Main form component\ninterface FormProps extends ComponentProps<\"form\"> {\n\tclass?: string;\n}\n\nexport const Form: Component<FormProps> = (props) => {\n\tconst [local, rest] = splitProps(props, [\"class\"]);\n\n\treturn (\n\t\t<form\n\t\t\tdata-slot=\"form\"\n\t\t\tclass={cn(\"space-y-6\", local.class)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n"
		}
	],
	"type": "components:ui"
}
