// @ts-nocheck
// This file is autogenerated by scripts/index.ts
// Do not edit this file directly.
import { clientOnly } from "@solidjs/start"
  
export const Index: Record<string, any> = {
   "tailwindcss": { 
		"accordion-demo": {
			name: "accordion-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/accordion-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/accordion-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"alert-demo": {
			name: "alert-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/alert-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/alert-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"alert-destructive": {
			name: "alert-destructive",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/alert-destructive.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/alert-destructive"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"alert-dialog-demo": {
			name: "alert-dialog-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/alert-dialog-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/alert-dialog-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-demo": {
			name: "button-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-secondary": {
			name: "button-secondary",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-secondary.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-secondary"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-destructive": {
			name: "button-destructive",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-destructive.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-destructive"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-outline": {
			name: "button-outline",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-outline.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-outline"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-ghost": {
			name: "button-ghost",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-ghost.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-ghost"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-link": {
			name: "button-link",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-link.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-link"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-with-icon": {
			name: "button-with-icon",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-with-icon.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-with-icon"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-loading": {
			name: "button-loading",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-loading.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-loading"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-as-child": {
			name: "button-as-child",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-as-child.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-as-child"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"badge-demo": {
			name: "badge-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/badge-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/badge-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"badge-secondary": {
			name: "badge-secondary",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/badge-secondary.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/badge-secondary"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"badge-destructive": {
			name: "badge-destructive",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/badge-destructive.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/badge-destructive"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"badge-outline": {
			name: "badge-outline",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/badge-outline.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/badge-outline"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"calendar-demo": {
			name: "calendar-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/calendar-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/calendar-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"card-demo": {
			name: "card-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/card-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/card-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-demo": {
			name: "carousel-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-size": {
			name: "carousel-size",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-size.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-size"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-api-demo": {
			name: "carousel-api-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-api-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-api-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-orientation": {
			name: "carousel-orientation",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-orientation.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-orientation"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-plugin": {
			name: "carousel-plugin",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-plugin.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-plugin"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-spacing": {
			name: "carousel-spacing",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-spacing.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-spacing"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"checkbox-demo": {
			name: "checkbox-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/checkbox-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/checkbox-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"checkbox-disabled": {
			name: "checkbox-disabled",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/checkbox-disabled.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/checkbox-disabled"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"checkbox-with-text": {
			name: "checkbox-with-text",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/checkbox-with-text.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/checkbox-with-text"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"collapsible-demo": {
			name: "collapsible-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/collapsible-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/collapsible-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"combobox-demo": {
			name: "combobox-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/combobox-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/combobox-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"command-demo": {
			name: "command-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/command-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/command-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"command-dialog": {
			name: "command-dialog",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/command-dialog.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/command-dialog"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"context-menu-demo": {
			name: "context-menu-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/context-menu-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/context-menu-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"data-table-demo": {
			name: "data-table-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/data-table-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/data-table-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"date-picker-demo": {
			name: "date-picker-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/date-picker-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/date-picker-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"date-picker-with-range-demo": {
			name: "date-picker-with-range-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/date-picker-with-range-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/date-picker-with-range-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"dialog-demo": {
			name: "dialog-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/dialog-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/dialog-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"drawer-demo": {
			name: "drawer-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/drawer-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/drawer-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"drawer-side-demo": {
			name: "drawer-side-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/drawer-side-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/drawer-side-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"dropdown-menu-demo": {
			name: "dropdown-menu-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/dropdown-menu-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/dropdown-menu-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"dropdown-menu-checkboxes": {
			name: "dropdown-menu-checkboxes",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/dropdown-menu-checkboxes.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/dropdown-menu-checkboxes"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"dropdown-menu-radio-group": {
			name: "dropdown-menu-radio-group",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/dropdown-menu-radio-group.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/dropdown-menu-radio-group"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"hover-card-demo": {
			name: "hover-card-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/hover-card-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/hover-card-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"menubar-demo": {
			name: "menubar-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/menubar-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/menubar-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"mode-toggle": {
			name: "mode-toggle",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/mode-toggle.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/mode-toggle"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"navigation-menu-demo": {
			name: "navigation-menu-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/navigation-menu-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/navigation-menu-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"number-field-demo": {
			name: "number-field-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/number-field-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/number-field-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"number-field-disabled-demo": {
			name: "number-field-disabled-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/number-field-disabled-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/number-field-disabled-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"number-field-with-error-demo": {
			name: "number-field-with-error-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/number-field-with-error-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/number-field-with-error-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"otp-field-demo": {
			name: "otp-field-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/otp-field-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/otp-field-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"otp-field-with-pattern-demo": {
			name: "otp-field-with-pattern-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/otp-field-with-pattern-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/otp-field-with-pattern-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"otp-field-with-controlled-demo": {
			name: "otp-field-with-controlled-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/otp-field-with-controlled-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/otp-field-with-controlled-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"popover-demo": {
			name: "popover-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/popover-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/popover-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"pagination-demo": {
			name: "pagination-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/pagination-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/pagination-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"progress-demo": {
			name: "progress-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/progress-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/progress-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"radio-group-demo": {
			name: "radio-group-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/radio-group-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/radio-group-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"resizable-demo": {
			name: "resizable-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/resizable-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/resizable-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"resizable-vertical-demo": {
			name: "resizable-vertical-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/resizable-vertical-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/resizable-vertical-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"resizable-with-handle-demo": {
			name: "resizable-with-handle-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/resizable-with-handle-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/resizable-with-handle-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"select-demo": {
			name: "select-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/select-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/select-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"separator-demo": {
			name: "separator-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/separator-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/separator-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"skeleton-demo": {
			name: "skeleton-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/skeleton-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/skeleton-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"sonner-demo": {
			name: "sonner-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/sonner-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/sonner-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"switch-demo": {
			name: "switch-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/switch-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/switch-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"table-demo": {
			name: "table-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/table-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/table-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"tabs-demo": {
			name: "tabs-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/tabs-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/tabs-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"tabs-orientation-demo": {
			name: "tabs-orientation-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/tabs-orientation-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/tabs-orientation-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-demo": {
			name: "textarea-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-disabled": {
			name: "textarea-disabled",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-disabled.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-disabled"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-with-button": {
			name: "textarea-with-button",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-with-button.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-with-button"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-with-label": {
			name: "textarea-with-label",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-with-label.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-with-label"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-with-text": {
			name: "textarea-with-text",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-with-text.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-with-text"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-demo": {
			name: "textfield-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-disabled": {
			name: "textfield-disabled",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-disabled.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-disabled"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-file": {
			name: "textfield-file",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-file.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-file"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-with-button": {
			name: "textfield-with-button",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-with-button.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-with-button"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-with-label": {
			name: "textfield-with-label",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-with-label.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-with-label"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-with-text": {
			name: "textfield-with-text",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-with-text.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-with-text"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-with-error": {
			name: "textfield-with-error",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-with-error.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-with-error"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toast-demo": {
			name: "toast-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toast-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toast-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toast-destructive": {
			name: "toast-destructive",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toast-destructive.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toast-destructive"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-demo": {
			name: "toggle-group-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-outline-demo": {
			name: "toggle-group-outline-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-outline-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-outline-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-single-demo": {
			name: "toggle-group-single-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-single-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-single-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-small-demo": {
			name: "toggle-group-small-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-small-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-small-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-large-demo": {
			name: "toggle-group-large-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-large-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-large-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-disabled-demo": {
			name: "toggle-group-disabled-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-disabled-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-disabled-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-demo": {
			name: "toggle-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-disabled": {
			name: "toggle-disabled",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-disabled.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-disabled"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-large": {
			name: "toggle-large",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-large.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-large"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-outline": {
			name: "toggle-outline",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-outline.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-outline"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-small": {
			name: "toggle-small",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-small.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-small"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-with-text": {
			name: "toggle-with-text",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-with-text.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-with-text"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"tooltip-demo": {
			name: "tooltip-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/tooltip-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/tooltip-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"demo-sidebar": {
			name: "demo-sidebar",
			description: "",
			type: "registry:block",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/blocks/demo-sidebar.tsx",
				type: "registry:block",
				target: "",
				content: "import { For } from \"solid-js\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"../ui/sidebar\"\n\nconst items = [\n  {\n    title: \"Home\",\n    url: \"#\",\n    icon: () => (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"size-4\"\n        viewBox=\"0 0 24 24\"\n      >\n        <g\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n        >\n          <path d=\"M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8\" />\n          <path d=\"M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\" />\n        </g>\n      </svg>\n    ),\n  },\n  {\n    title: \"Inbox\",\n    url: \"#\",\n    icon: () => (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"size-4\"\n        viewBox=\"0 0 24 24\"\n      >\n        <g\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n        >\n          <path d=\"M22 12h-6l-2 3h-4l-2-3H2\" />\n          <path d=\"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11\" />\n        </g>\n      </svg>\n    ),\n  },\n  {\n    title: \"Calendar\",\n    url: \"#\",\n    icon: () => (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"size-4\"\n        viewBox=\"0 0 24 24\"\n      >\n        <g\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n        >\n          <path d=\"M8 2v4m8-4v4\" />\n          <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" />\n          <path d=\"M3 10h18\" />\n        </g>\n      </svg>\n    ),\n  },\n  {\n    title: \"Search\",\n    url: \"#\",\n    icon: () => (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"size-4\"\n        viewBox=\"0 0 24 24\"\n      >\n        <g\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n        >\n          <circle cx=\"11\" cy=\"11\" r=\"8\" />\n          <path d=\"m21 21l-4.3-4.3\" />\n        </g>\n      </svg>\n    ),\n  },\n  {\n    title: \"Settings\",\n    url: \"#\",\n    icon: () => (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"size-4\"\n        viewBox=\"0 0 24 24\"\n      >\n        <g\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n        >\n          <path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2\" />\n          <circle cx=\"12\" cy=\"12\" r=\"3\" />\n        </g>\n      </svg>\n    ),\n  },\n]\n\nconst AppSidebar = () => {\n  return (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <For each={items}>\n                  {(item) => (\n                    <SidebarMenuItem>\n                      <SidebarMenuButton as=\"a\" href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  )}\n                </For>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <SidebarInset>\n        <header class=\"flex h-12 items-center justify-between px-4\">\n          <SidebarTrigger />\n        </header>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n\nexport default AppSidebar\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/blocks/demo-sidebar"), { lazy: true }),
			source: "src/__registry__/tailwindcss/blocks/demo-sidebar.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-demo": {
			name: "chart-tooltip-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/chart-tooltip-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/chart-tooltip-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"sidebar-01": {
			name: "sidebar-01",
			description: "A sidebar that collapses to icons.",
			type: "registry:block",
			registryDependencies: ["sidebar","separator","collapsible","dropdown-menu"],
			files: [{
				path: "src/registry/tailwindcss/blocks/sidebar-01/index.tsx",
				type: "registry:page",
				target: "src/routes/dashboard.tsx",
				content: "import AppSidebar from \"@/components/app-sidebar\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  SidebarInset,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\"\n\nconst Page = () => {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <SidebarInset>\n        <header class=\"flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12\">\n          <div class=\"flex items-center gap-2 px-4\">\n            <SidebarTrigger class=\"-ml-1\" />\n            <Separator orientation=\"vertical\" class=\"mr-2 h-4\" />\n          </div>\n        </header>\n        <div class=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\n          <div class=\"grid auto-rows-min gap-4 md:grid-cols-3\">\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n          </div>\n          <div class=\"bg-muted/50 min-h-[100vh] flex-1 rounded-xl md:min-h-min\" />\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n\nexport default Page\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/app-sidebar.tsx",
				type: "registry:component",
				target: "src/components/app-sidebar.tsx",
				content: "import type { ComponentProps } from \"solid-js\"\n\nimport NavMain from \"@/components/nav-main\"\nimport NavProjects from \"@/components/nav-projects\"\nimport NavUser from \"@/components/nav-user\"\nimport TeamSwitcher from \"@/components/team-switcher\"\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarRail,\n} from \"@/components/ui/sidebar\"\n\n// This is sample data.\nconst data = {\n  user: {\n    name: \"shadcn\",\n    email: \"m@example.com\",\n    avatar: \"/avatars/shadcn.jpg\",\n  },\n  teams: [\n    {\n      name: \"Acme Inc\",\n      logo: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4 shrink-0\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"M7 2h10M5 6h14\" />\n            <rect width=\"18\" height=\"12\" x=\"3\" y=\"10\" rx=\"2\" />\n          </g>\n        </svg>\n      ),\n      plan: \"Enterprise\",\n    },\n    {\n      name: \"Acme Corp.\",\n      logo: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4 shrink-0\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2\"\n          />\n        </svg>\n      ),\n      plan: \"Startup\",\n    },\n    {\n      name: \"Evil Corp.\",\n      logo: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4 shrink-0\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3\"\n          />\n        </svg>\n      ),\n      plan: \"Free\",\n    },\n  ],\n  navMain: [\n    {\n      title: \"Playground\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"m7 11l2-2l-2-2m4 6h4\" />\n            <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\n          </g>\n        </svg>\n      ),\n      isActive: true,\n      items: [\n        {\n          title: \"History\",\n          url: \"#\",\n        },\n        {\n          title: \"Starred\",\n          url: \"#\",\n        },\n        {\n          title: \"Settings\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Models\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"M12 8V4H8\" />\n            <rect width=\"16\" height=\"12\" x=\"4\" y=\"8\" rx=\"2\" />\n            <path d=\"M2 14h2m16 0h2m-7-1v2m-6-2v2\" />\n          </g>\n        </svg>\n      ),\n      items: [\n        {\n          title: \"Genesis\",\n          url: \"#\",\n        },\n        {\n          title: \"Explorer\",\n          url: \"#\",\n        },\n        {\n          title: \"Quantum\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Documentation\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M12 7v14m-9-3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4a4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3a3 3 0 0 0-3-3z\"\n          />\n        </svg>\n      ),\n      items: [\n        {\n          title: \"Introduction\",\n          url: \"#\",\n        },\n        {\n          title: \"Get Started\",\n          url: \"#\",\n        },\n        {\n          title: \"Tutorials\",\n          url: \"#\",\n        },\n        {\n          title: \"Changelog\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Settings\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"M20 7h-9m3 10H5\" />\n            <circle cx=\"17\" cy=\"17\" r=\"3\" />\n            <circle cx=\"7\" cy=\"7\" r=\"3\" />\n          </g>\n        </svg>\n      ),\n      items: [\n        {\n          title: \"General\",\n          url: \"#\",\n        },\n        {\n          title: \"Team\",\n          url: \"#\",\n        },\n        {\n          title: \"Billing\",\n          url: \"#\",\n        },\n        {\n          title: \"Limits\",\n          url: \"#\",\n        },\n      ],\n    },\n  ],\n  projects: [\n    {\n      name: \"Design Engineering\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M22 6H2m20 12H2M6 2v20M18 2v20\"\n          />\n        </svg>\n      ),\n    },\n    {\n      name: \"Sales & Marketing\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z\" />\n            <path d=\"M21.21 15.89A10 10 0 1 1 8 2.83\" />\n          </g>\n        </svg>\n      ),\n    },\n    {\n      name: \"Travel\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0zm.894.211v15M9 3.236v15\"\n          />\n        </svg>\n      ),\n    },\n  ],\n}\n\nconst AppSidebar = (props: ComponentProps<typeof Sidebar>) => {\n  return (\n    <Sidebar collapsible=\"icon\" {...props}>\n      <SidebarHeader>\n        <TeamSwitcher teams={data.teams} />\n      </SidebarHeader>\n      <SidebarContent>\n        <NavMain items={data.navMain} />\n        <NavProjects projects={data.projects} />\n      </SidebarContent>\n      <SidebarFooter>\n        <NavUser user={data.user} />\n      </SidebarFooter>\n      <SidebarRail />\n    </Sidebar>\n  )\n}\n\nexport default AppSidebar\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/nav-main.tsx",
				type: "registry:component",
				target: "src/components/nav-main.tsx",
				content: "import { For, Show, type Accessor, type JSX } from \"solid-js\"\nimport type {\n  CollapsibleRootProps,\n  CollapsibleTriggerProps,\n} from \"@kobalte/core/collapsible\"\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n} from \"@/components/ui/sidebar\"\n\nconst NavMain = (props: {\n  items: {\n    title: string\n    url: string\n    icon?: Accessor<JSX.Element>\n    isActive?: boolean\n    items?: {\n      title: string\n      url: string\n    }[]\n  }[]\n}) => {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel>Platform</SidebarGroupLabel>\n      <SidebarMenu>\n        <For each={props.items}>\n          {(item) => (\n            <Collapsible\n              defaultOpen={item.isActive}\n              as={(props: CollapsibleRootProps) => (\n                <SidebarMenuItem {...props}>\n                  <CollapsibleTrigger\n                    as={(props: CollapsibleTriggerProps) => (\n                      // @ts-expect-error\n                      <SidebarMenuButton\n                        {...props}\n                        tooltip={item.title}\n                        class=\"[&>svg:last-of-type]:data-[expanded]:rotate-90\"\n                      >\n                        <Show when={item.icon!()}>{item.icon!()}</Show>\n                        <span>{item.title}</span>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          class=\"ml-auto transition-transform duration-200\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            stroke-linecap=\"round\"\n                            stroke-linejoin=\"round\"\n                            stroke-width=\"2\"\n                            d=\"m9 18l6-6l-6-6\"\n                          />\n                        </svg>\n                      </SidebarMenuButton>\n                    )}\n                  />\n                  <CollapsibleContent>\n                    <SidebarMenuSub>\n                      <For each={item.items}>\n                        {(subItem) => (\n                          <SidebarMenuSubItem>\n                            <SidebarMenuSubButton as=\"a\" href={subItem.url}>\n                              <span>{subItem.title}</span>\n                            </SidebarMenuSubButton>\n                          </SidebarMenuSubItem>\n                        )}\n                      </For>\n                    </SidebarMenuSub>\n                  </CollapsibleContent>\n                </SidebarMenuItem>\n              )}\n            />\n          )}\n        </For>\n      </SidebarMenu>\n    </SidebarGroup>\n  )\n}\n\nexport default NavMain\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/nav-projects.tsx",
				type: "registry:component",
				target: "src/components/nav-projects.tsx",
				content: "import { For, type Accessor, type JSX } from \"solid-js\"\nimport type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSideBar,\n} from \"@/components/ui/sidebar\"\n\nconst NavProjects = (props: {\n  projects: {\n    name: string\n    url: string\n    icon: Accessor<JSX.Element>\n  }[]\n}) => {\n  const { isMobile } = useSideBar()\n\n  return (\n    <SidebarGroup class=\"group-data-[collapsible=icon]:hidden\">\n      <SidebarGroupLabel>Projects</SidebarGroupLabel>\n      <SidebarMenu>\n        <For each={props.projects}>\n          {(item) => (\n            <SidebarMenuItem>\n              <SidebarMenuButton as=\"a\" href={item.url}>\n                <item.icon />\n                <span>{item.name}</span>\n              </SidebarMenuButton>\n              <DropdownMenu\n                placement={isMobile() ? \"bottom-end\" : \"right-start\"}\n              >\n                <DropdownMenuTrigger\n                  as={(props: DropdownMenuTriggerProps) => (\n                    // @ts-expect-error\n                    <SidebarMenuAction {...props} showOnHover>\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        class=\"size-4\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <g\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                          stroke-width=\"2\"\n                        >\n                          <circle cx=\"12\" cy=\"12\" r=\"1\" />\n                          <circle cx=\"19\" cy=\"12\" r=\"1\" />\n                          <circle cx=\"5\" cy=\"12\" r=\"1\" />\n                        </g>\n                      </svg>\n                      <span class=\"sr-only\">More</span>\n                    </SidebarMenuAction>\n                  )}\n                />\n                <DropdownMenuContent class=\"w-48 rounded-lg\">\n                  <DropdownMenuItem>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      class=\"text-muted-foreground size-4\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        stroke-width=\"2\"\n                        d=\"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z\"\n                      />\n                    </svg>\n                    <span>View Project</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      class=\"text-muted-foreground size-4\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <g\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        stroke-width=\"2\"\n                      >\n                        <path d=\"m15 17l5-5l-5-5\" />\n                        <path d=\"M4 18v-2a4 4 0 0 1 4-4h12\" />\n                      </g>\n                    </svg>\n                    <span>Share Project</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      class=\"text-muted-foreground size-4\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        stroke-width=\"2\"\n                        d=\"M3 6h18m-2 0v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2m-6 5v6m4-6v6\"\n                      />\n                    </svg>\n                    <span>Delete Project</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          )}\n        </For>\n        <SidebarMenuItem>\n          <SidebarMenuButton class=\"text-sidebar-foreground/70\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              class=\"text-sidebar-foreground/70 size-4\"\n              viewBox=\"0 0 24 24\"\n            >\n              <g\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                stroke-width=\"2\"\n              >\n                <circle cx=\"12\" cy=\"12\" r=\"1\" />\n                <circle cx=\"19\" cy=\"12\" r=\"1\" />\n                <circle cx=\"5\" cy=\"12\" r=\"1\" />\n              </g>\n            </svg>\n            <span>More</span>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarGroup>\n  )\n}\n\nexport default NavProjects\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/nav-user.tsx",
				type: "registry:component",
				target: "src/components/nav-user.tsx",
				content: "import type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\nimport { Image } from \"@kobalte/core/image\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuGroupLabel,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSideBar,\n} from \"@/components/ui/sidebar\"\n\nconst NavUser = (props: {\n  user: {\n    name: string\n    email: string\n    avatar: string\n  }\n}) => {\n  const { isMobile } = useSideBar()\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu placement={isMobile() ? \"bottom-end\" : \"right-end\"}>\n          <DropdownMenuTrigger\n            as={(triggerProps: DropdownMenuTriggerProps) => (\n              // @ts-expect-error\n              <SidebarMenuButton\n                {...triggerProps}\n                size=\"lg\"\n                class=\"data-[expanded]:bg-sidebar-accent data-[expanded]:text-sidebar-accent-foreground\"\n              >\n                <Image class=\"relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg\">\n                  <Image.Img\n                    class=\"aspect-square h-full w-full\"\n                    src={props.user.avatar}\n                    alt={props.user.name}\n                  />\n                  <Image.Fallback class=\"bg-muted flex h-full w-full items-center justify-center rounded-lg\">\n                    CN\n                  </Image.Fallback>\n                </Image>\n                <div class=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span class=\"truncate font-semibold\">{props.user.name}</span>\n                  <span class=\"truncate text-xs\">{props.user.email}</span>\n                </div>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"ml-auto size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"m7 15l5 5l5-5M7 9l5-5l5 5\"\n                  />\n                </svg>\n              </SidebarMenuButton>\n            )}\n          />\n          <DropdownMenuContent class=\"w-[--kb-popper-anchor-width] min-w-56 rounded-lg\">\n            <DropdownMenuGroup>\n              <DropdownMenuGroupLabel class=\"p-0 font-normal\">\n                <div class=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                  <Image class=\"relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg\">\n                    <Image.Img\n                      class=\"aspect-square h-full w-full\"\n                      src={props.user.avatar}\n                      alt={props.user.name}\n                    />\n                    <Image.Fallback class=\"bg-muted flex h-full w-full items-center justify-center rounded-lg\">\n                      CN\n                    </Image.Fallback>\n                  </Image>\n                  <div class=\"grid flex-1 text-left text-sm leading-tight\">\n                    <span class=\"truncate font-semibold\">\n                      {props.user.name}\n                    </span>\n                    <span class=\"truncate text-xs\">{props.user.email}</span>\n                  </div>\n                </div>\n              </DropdownMenuGroupLabel>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0zM20 3v4m2-2h-4M4 17v2m1-1H3\"\n                  />\n                </svg>\n                Upgrade to Pro\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <g\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                  >\n                    <path d=\"M3.85 8.62a4 4 0 0 1 4.78-4.77a4 4 0 0 1 6.74 0a4 4 0 0 1 4.78 4.78a4 4 0 0 1 0 6.74a4 4 0 0 1-4.77 4.78a4 4 0 0 1-6.75 0a4 4 0 0 1-4.78-4.77a4 4 0 0 1 0-6.76\" />\n                    <path d=\"m9 12l2 2l4-4\" />\n                  </g>\n                </svg>\n                Account\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <g\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                  >\n                    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n                    <path d=\"M2 10h20\" />\n                  </g>\n                </svg>\n                Billing\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9m4.3 13a1.94 1.94 0 0 0 3.4 0\"\n                  />\n                </svg>\n                Notifications\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                  d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4m7 14l5-5l-5-5m5 5H9\"\n                />\n              </svg>\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n\nexport default NavUser\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/team-switcher.tsx",
				type: "registry:component",
				target: "src/components/team-switcher.tsx",
				content: "import { For, createSignal, type Accessor, type JSX } from \"solid-js\"\nimport type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuGroupLabel,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSideBar,\n} from \"@/components/ui/sidebar\"\n\nconst TeamSwitcher = (props: {\n  teams: {\n    name: string\n    logo: Accessor<JSX.Element>\n    plan: string\n  }[]\n}) => {\n  // eslint-disable-next-line solid/reactivity\n  const [activeTeam, setActiveTeam] = createSignal(props.teams[0])\n  const { isMobile } = useSideBar()\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu\n          placement={isMobile() ? \"bottom-end\" : \"right-start\"}\n          sameWidth\n        >\n          <DropdownMenuTrigger\n            as={(props: DropdownMenuTriggerProps) => (\n              // @ts-expect-error\n              <SidebarMenuButton\n                {...props}\n                size=\"lg\"\n                class=\"data-[expanded]:bg-sidebar-accent data-[expanded]:text-sidebar-accent-foreground\"\n              >\n                <div class=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                  {activeTeam().logo()}\n                </div>\n                <div class=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span class=\"truncate font-semibold\">\n                    {activeTeam().name}\n                  </span>\n                  <span class=\"truncate text-xs\">{activeTeam().plan}</span>\n                </div>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"ml-auto size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"m7 15l5 5l5-5M7 9l5-5l5 5\"\n                  />\n                </svg>\n              </SidebarMenuButton>\n            )}\n          />\n          <DropdownMenuContent class=\"w-[--kb-popper-anchor-width] min-w-56 rounded-lg\">\n            <DropdownMenuGroup>\n              <DropdownMenuGroupLabel class=\"text-muted-foreground text-xs\">\n                Teams\n              </DropdownMenuGroupLabel>\n              <For each={props.teams}>\n                {(team, index) => (\n                  <DropdownMenuItem\n                    onClick={() => setActiveTeam(team)}\n                    class=\"gap-2 p-2\"\n                  >\n                    <div class=\"flex size-6 items-center justify-center rounded-sm border\">\n                      {team.logo()}\n                    </div>\n                    {team.name}\n                    <DropdownMenuShortcut>⌘{index() + 1}</DropdownMenuShortcut>\n                  </DropdownMenuItem>\n                )}\n              </For>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem class=\"gap-2 p-2\">\n              <div class=\"bg-background flex size-6 items-center justify-center rounded-md border\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M5 12h14m-7-7v14\"\n                  />\n                </svg>\n              </div>\n              <div class=\"text-muted-foreground font-medium\">Add team</div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n\nexport default TeamSwitcher\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/blocks/sidebar-01/index"), { lazy: true }),
			source: "src/__registry__/tailwindcss/blocks/sidebar-01/index.tsx",
			category: "",
			subcategory: ""
		}, 
		"sidebar-02": {
			name: "sidebar-02",
			description: "A floating sidebar with submenus.",
			type: "registry:block",
			registryDependencies: ["sidebar"],
			files: [{
				path: "src/registry/tailwindcss/blocks/sidebar-02/index.tsx",
				type: "registry:page",
				target: "src/routes/dashboard.tsx",
				content: "import AppSidebar from \"@/components/app-sidebar\"\nimport {\n  SidebarInset,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\"\n\nconst Page = () => {\n  return (\n    <SidebarProvider\n      style={{\n        \"--sidebar-width\": \"19rem\",\n      }}\n    >\n      <AppSidebar />\n      <SidebarInset>\n        <header class=\"flex h-16 shrink-0 items-center gap-2 px-4\">\n          <SidebarTrigger class=\"-ml-1\" />\n        </header>\n        <div class=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\n          <div class=\"grid auto-rows-min gap-4 md:grid-cols-3\">\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n          </div>\n          <div class=\"bg-muted/50 min-h-[100vh] flex-1 rounded-xl md:min-h-min\" />\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n\nexport default Page\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-02/components/app-sidebar.tsx",
				type: "registry:component",
				target: "src/components/app-sidebar.tsx",
				content: "import { For, Show, type ComponentProps } from \"solid-js\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n} from \"@/components/ui/sidebar\"\n\n// This is sample data.\nconst data = {\n  navMain: [\n    {\n      title: \"Getting Started\",\n      url: \"#\",\n      items: [\n        {\n          title: \"Installation\",\n          url: \"#\",\n        },\n        {\n          title: \"Project Structure\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Building Your Application\",\n      url: \"#\",\n      items: [\n        {\n          title: \"Routing\",\n          url: \"#\",\n        },\n        {\n          title: \"Data Fetching\",\n          url: \"#\",\n          isActive: true,\n        },\n        {\n          title: \"Rendering\",\n          url: \"#\",\n        },\n        {\n          title: \"Caching\",\n          url: \"#\",\n        },\n        {\n          title: \"Styling\",\n          url: \"#\",\n        },\n        {\n          title: \"Optimizing\",\n          url: \"#\",\n        },\n        {\n          title: \"Configuring\",\n          url: \"#\",\n        },\n        {\n          title: \"Testing\",\n          url: \"#\",\n        },\n        {\n          title: \"Authentication\",\n          url: \"#\",\n        },\n        {\n          title: \"Deploying\",\n          url: \"#\",\n        },\n        {\n          title: \"Upgrading\",\n          url: \"#\",\n        },\n        {\n          title: \"Examples\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"API Reference\",\n      url: \"#\",\n      items: [\n        {\n          title: \"Components\",\n          url: \"#\",\n        },\n        {\n          title: \"File Conventions\",\n          url: \"#\",\n        },\n        {\n          title: \"Functions\",\n          url: \"#\",\n        },\n        {\n          title: \"next.config.js Options\",\n          url: \"#\",\n        },\n        {\n          title: \"CLI\",\n          url: \"#\",\n        },\n        {\n          title: \"Edge Runtime\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Architecture\",\n      url: \"#\",\n      items: [\n        {\n          title: \"Accessibility\",\n          url: \"#\",\n        },\n        {\n          title: \"Fast Refresh\",\n          url: \"#\",\n        },\n        {\n          title: \"Next.js Compiler\",\n          url: \"#\",\n        },\n        {\n          title: \"Supported Browsers\",\n          url: \"#\",\n        },\n        {\n          title: \"Turbopack\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Community\",\n      url: \"#\",\n      items: [\n        {\n          title: \"Contribution Guide\",\n          url: \"#\",\n        },\n      ],\n    },\n  ],\n}\n\nconst AppSidebar = (props: ComponentProps<typeof Sidebar>) => {\n  return (\n    <Sidebar variant=\"floating\" {...props}>\n      <SidebarHeader>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton size=\"lg\" as=\"a\" href=\"#\">\n              <div class=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <g\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                  >\n                    <path d=\"M7 2h10M5 6h14\" />\n                    <rect width=\"18\" height=\"12\" x=\"3\" y=\"10\" rx=\"2\" />\n                  </g>\n                </svg>\n              </div>\n              <div class=\"flex flex-col gap-0.5 leading-none\">\n                <span class=\"font-semibold\">Documentation</span>\n                <span class=\"\">v1.0.0</span>\n              </div>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarMenu class=\"gap-2\">\n            <For each={data.navMain}>\n              {(item) => (\n                <>\n                  <SidebarMenuButton as=\"a\" href={item.url} class=\"font-medium\">\n                    {item.title}\n                  </SidebarMenuButton>\n                  <Show when={item.items.length}>\n                    <SidebarMenuSub class=\"ml-0 border-l-0 px-1.5\">\n                      <For each={item.items}>\n                        {(item) => (\n                          <SidebarMenuSubItem>\n                            <SidebarMenuSubButton\n                              isActive={item.isActive}\n                              as=\"a\"\n                              href={item.url}\n                            >\n                              {item.title}\n                            </SidebarMenuSubButton>\n                          </SidebarMenuSubItem>\n                        )}\n                      </For>\n                    </SidebarMenuSub>\n                  </Show>\n                </>\n              )}\n            </For>\n          </SidebarMenu>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n\nexport default AppSidebar\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/blocks/sidebar-02/index"), { lazy: true }),
			source: "src/__registry__/tailwindcss/blocks/sidebar-02/index.tsx",
			category: "",
			subcategory: ""
		}, 
		"sidebar-03": {
			name: "sidebar-03",
			description: "An inset sidebar with secondary navigation.",
			type: "registry:block",
			registryDependencies: ["sidebar","collapsible","dropdown-menu"],
			files: [{
				path: "src/registry/tailwindcss/blocks/sidebar-03/index.tsx",
				type: "registry:page",
				target: "src/routes/dashboard.tsx",
				content: "import AppSidebar from \"@/components/app-sidebar\"\nimport {\n  SidebarInset,\n  SidebarProvider,\n  SidebarSeparator,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\"\n\nconst Page = () => {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <SidebarInset>\n        <header class=\"flex h-16 shrink-0 items-center gap-2\">\n          <div class=\"flex items-center gap-2 px-4\">\n            <SidebarTrigger class=\"-ml-1\" />\n            <SidebarSeparator orientation=\"vertical\" class=\"mr-2 h-4\" />\n          </div>\n        </header>\n        <div class=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\n          <div class=\"grid auto-rows-min gap-4 md:grid-cols-3\">\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\n          </div>\n          <div class=\"bg-muted/50 min-h-[100vh] flex-1 rounded-xl md:min-h-min\" />\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n\nexport default Page\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/app-sidebar.tsx",
				type: "registry:component",
				target: "src/components/app-sidebar.tsx",
				content: "import type { ComponentProps } from \"solid-js\"\n\nimport NavMain from \"@/components/nav-main\"\nimport NavProjects from \"@/components/nav-projects\"\nimport NavSecondary from \"@/components/nav-secondary\"\nimport NavUser from \"@/components/nav-user\"\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\n\n// This is sample data.\nconst data = {\n  user: {\n    name: \"shadcn\",\n    email: \"m@example.com\",\n    avatar: \"https://ui.shadcn.com/avatars/shadcn.jpg\",\n  },\n  navMain: [\n    {\n      title: \"Playground\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"m7 11l2-2l-2-2m4 6h4\" />\n            <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\n          </g>\n        </svg>\n      ),\n      isActive: true,\n      items: [\n        {\n          title: \"History\",\n          url: \"#\",\n        },\n        {\n          title: \"Starred\",\n          url: \"#\",\n        },\n        {\n          title: \"Settings\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Models\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"M12 8V4H8\" />\n            <rect width=\"16\" height=\"12\" x=\"4\" y=\"8\" rx=\"2\" />\n            <path d=\"M2 14h2m16 0h2m-7-1v2m-6-2v2\" />\n          </g>\n        </svg>\n      ),\n      items: [\n        {\n          title: \"Genesis\",\n          url: \"#\",\n        },\n        {\n          title: \"Explorer\",\n          url: \"#\",\n        },\n        {\n          title: \"Quantum\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Documentation\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M12 7v14m-9-3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4a4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3a3 3 0 0 0-3-3z\"\n          />\n        </svg>\n      ),\n      items: [\n        {\n          title: \"Introduction\",\n          url: \"#\",\n        },\n        {\n          title: \"Get Started\",\n          url: \"#\",\n        },\n        {\n          title: \"Tutorials\",\n          url: \"#\",\n        },\n        {\n          title: \"Changelog\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Settings\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"M20 7h-9m3 10H5\" />\n            <circle cx=\"17\" cy=\"17\" r=\"3\" />\n            <circle cx=\"7\" cy=\"7\" r=\"3\" />\n          </g>\n        </svg>\n      ),\n      items: [\n        {\n          title: \"General\",\n          url: \"#\",\n        },\n        {\n          title: \"Team\",\n          url: \"#\",\n        },\n        {\n          title: \"Billing\",\n          url: \"#\",\n        },\n        {\n          title: \"Limits\",\n          url: \"#\",\n        },\n      ],\n    },\n  ],\n  navSecondary: [\n    {\n      title: \"Support\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <circle cx=\"12\" cy=\"12\" r=\"10\" />\n            <path d=\"m4.93 4.93l4.24 4.24m5.66 0l4.24-4.24m-4.24 9.9l4.24 4.24m-9.9-4.24l-4.24 4.24\" />\n            <circle cx=\"12\" cy=\"12\" r=\"4\" />\n          </g>\n        </svg>\n      ),\n    },\n    {\n      title: \"Feedback\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11zm7.318-19.539l-10.94 10.939\"\n          />\n        </svg>\n      ),\n    },\n  ],\n  projects: [\n    {\n      name: \"Design Engineering\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M22 6H2m20 12H2M6 2v20M18 2v20\"\n          />\n        </svg>\n      ),\n    },\n    {\n      name: \"Sales & Marketing\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <g\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n          >\n            <path d=\"M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z\" />\n            <path d=\"M21.21 15.89A10 10 0 1 1 8 2.83\" />\n          </g>\n        </svg>\n      ),\n    },\n    {\n      name: \"Travel\",\n      url: \"#\",\n      icon: () => (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"size-4\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0zm.894.211v15M9 3.236v15\"\n          />\n        </svg>\n      ),\n    },\n  ],\n}\n\nconst AppSidebar = (props: ComponentProps<typeof Sidebar>) => {\n  return (\n    <Sidebar variant=\"inset\" {...props}>\n      <SidebarHeader>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton size=\"lg\" as=\"a\" href=\"#\">\n              <div class=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3\"\n                  />\n                </svg>\n              </div>\n              <div class=\"grid flex-1 text-left text-sm leading-tight\">\n                <span class=\"truncate font-semibold\">Acme Inc</span>\n                <span class=\"truncate text-xs\">Enterprise</span>\n              </div>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarHeader>\n      <SidebarContent>\n        <NavMain items={data.navMain} />\n        <NavProjects projects={data.projects} />\n        <NavSecondary items={data.navSecondary} class=\"mt-auto\" />\n      </SidebarContent>\n      <SidebarFooter>\n        <NavUser user={data.user} />\n      </SidebarFooter>\n    </Sidebar>\n  )\n}\n\nexport default AppSidebar\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/nav-main.tsx",
				type: "registry:component",
				target: "src/components/nav-main.tsx",
				content: "import { For, Show, type Accessor, type JSX } from \"solid-js\"\nimport type {\n  CollapsibleRootProps,\n  CollapsibleTriggerProps,\n} from \"@kobalte/core/collapsible\"\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n} from \"@/components/ui/sidebar\"\n\nconst NavMain = (props: {\n  items: {\n    title: string\n    url: string\n    icon: Accessor<JSX.Element>\n    isActive?: boolean\n    items?: {\n      title: string\n      url: string\n    }[]\n  }[]\n}) => {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel>Platform</SidebarGroupLabel>\n      <SidebarMenu>\n        <For each={props.items}>\n          {(item) => (\n            <Collapsible\n              defaultOpen={item.isActive}\n              as={(props: CollapsibleRootProps) => (\n                <SidebarMenuItem {...props}>\n                  <SidebarMenuButton\n                    tooltip={item.title}\n                    as=\"a\"\n                    href={item.url}\n                  >\n                    <item.icon />\n                    <span>{item.title}</span>\n                  </SidebarMenuButton>\n                  <Show when={item.items?.length}>\n                    <CollapsibleTrigger\n                      as={(props: CollapsibleTriggerProps) => (\n                        // @ts-expect-error\n                        <SidebarMenuAction\n                          {...props}\n                          class=\"data-[expanded]:rotate-90\"\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            class=\"transition-transform duration-200\"\n                            viewBox=\"0 0 24 24\"\n                          >\n                            <path\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              stroke-linecap=\"round\"\n                              stroke-linejoin=\"round\"\n                              stroke-width=\"2\"\n                              d=\"m9 18l6-6l-6-6\"\n                            />\n                          </svg>\n                          <span class=\"sr-only\">Toggle</span>\n                        </SidebarMenuAction>\n                      )}\n                    />\n                    <CollapsibleContent>\n                      <SidebarMenuSub>\n                        {\n                          <For each={item.items}>\n                            {(subItem) => (\n                              <SidebarMenuSubItem>\n                                <SidebarMenuSubButton as=\"a\" href={subItem.url}>\n                                  <span>{subItem.title}</span>\n                                </SidebarMenuSubButton>\n                              </SidebarMenuSubItem>\n                            )}\n                          </For>\n                        }\n                      </SidebarMenuSub>\n                    </CollapsibleContent>\n                  </Show>\n                </SidebarMenuItem>\n              )}\n            />\n          )}\n        </For>\n      </SidebarMenu>\n    </SidebarGroup>\n  )\n}\n\nexport default NavMain\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/nav-projects.tsx",
				type: "registry:component",
				target: "src/components/nav-projects.tsx",
				content: "import { For, type Accessor, type JSX } from \"solid-js\"\nimport type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSideBar,\n} from \"@/components/ui/sidebar\"\n\nconst NavProjects = (props: {\n  projects: {\n    name: string\n    url: string\n    icon: Accessor<JSX.Element>\n  }[]\n}) => {\n  const { isMobile } = useSideBar()\n\n  return (\n    <SidebarGroup class=\"group-data-[collapsible=icon]:hidden\">\n      <SidebarGroupLabel>Projects</SidebarGroupLabel>\n      <SidebarMenu>\n        <For each={props.projects}>\n          {(item) => (\n            <SidebarMenuItem>\n              <SidebarMenuButton as=\"a\" href={item.url}>\n                <item.icon />\n                <span>{item.name}</span>\n              </SidebarMenuButton>\n              <DropdownMenu\n                placement={isMobile() ? \"bottom-end\" : \"right-start\"}\n              >\n                <DropdownMenuTrigger\n                  as={(props: DropdownMenuTriggerProps) => (\n                    // @ts-expect-error\n                    <SidebarMenuAction showOnHover {...props}>\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        class=\"size-4\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <g\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                          stroke-width=\"2\"\n                        >\n                          <circle cx=\"12\" cy=\"12\" r=\"1\" />\n                          <circle cx=\"19\" cy=\"12\" r=\"1\" />\n                          <circle cx=\"5\" cy=\"12\" r=\"1\" />\n                        </g>\n                      </svg>\n                      <span class=\"sr-only\">More</span>\n                    </SidebarMenuAction>\n                  )}\n                />\n                <DropdownMenuContent class=\"w-48 rounded-lg\">\n                  <DropdownMenuItem>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      class=\"text-muted-foreground size-4\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        stroke-width=\"2\"\n                        d=\"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z\"\n                      />\n                    </svg>\n                    <span>View Project</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      class=\"text-muted-foreground size-4\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <g\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        stroke-width=\"2\"\n                      >\n                        <path d=\"m15 17l5-5l-5-5\" />\n                        <path d=\"M4 18v-2a4 4 0 0 1 4-4h12\" />\n                      </g>\n                    </svg>\n                    <span>Share Project</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      class=\"text-muted-foreground size-4\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        stroke-width=\"2\"\n                        d=\"M3 6h18m-2 0v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2m-6 5v6m4-6v6\"\n                      />\n                    </svg>\n                    <span>Delete Project</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          )}\n        </For>\n        <SidebarMenuItem>\n          <SidebarMenuButton class=\"text-sidebar-foreground/70\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              class=\"text-sidebar-foreground/70 size-4\"\n              viewBox=\"0 0 24 24\"\n            >\n              <g\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                stroke-width=\"2\"\n              >\n                <circle cx=\"12\" cy=\"12\" r=\"1\" />\n                <circle cx=\"19\" cy=\"12\" r=\"1\" />\n                <circle cx=\"5\" cy=\"12\" r=\"1\" />\n              </g>\n            </svg>\n            <span>More</span>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarGroup>\n  )\n}\n\nexport default NavProjects\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/nav-user.tsx",
				type: "registry:component",
				target: "src/components/nav-user.tsx",
				content: "import type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\nimport { Image } from \"@kobalte/core/image\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuGroupLabel,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSideBar,\n} from \"@/components/ui/sidebar\"\n\nconst NavUser = (props: {\n  user: {\n    name: string\n    email: string\n    avatar: string\n  }\n}) => {\n  const { isMobile } = useSideBar()\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu placement={isMobile() ? \"bottom-end\" : \"right-end\"}>\n          <DropdownMenuTrigger\n            as={(triggerProps: DropdownMenuTriggerProps) => (\n              // @ts-expect-error\n              <SidebarMenuButton\n                {...triggerProps}\n                size=\"lg\"\n                class=\"data-[expanded]:bg-sidebar-accent data-[expanded]:text-sidebar-accent-foreground\"\n              >\n                <Image class=\"relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg\">\n                  <Image.Img\n                    class=\"aspect-square h-full w-full\"\n                    src={props.user.avatar}\n                    alt={props.user.name}\n                  />\n                  <Image.Fallback class=\"bg-muted flex h-full w-full items-center justify-center rounded-lg\">\n                    CN\n                  </Image.Fallback>\n                </Image>\n                <div class=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span class=\"truncate font-semibold\">{props.user.name}</span>\n                  <span class=\"truncate text-xs\">{props.user.email}</span>\n                </div>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"ml-auto size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"m7 15l5 5l5-5M7 9l5-5l5 5\"\n                  />\n                </svg>\n              </SidebarMenuButton>\n            )}\n          />\n          <DropdownMenuContent class=\"w-[--kb-popper-anchor-width] min-w-56 rounded-lg\">\n            <DropdownMenuGroup>\n              <DropdownMenuGroupLabel class=\"p-0 font-normal\">\n                <div class=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                  <Image class=\"relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg\">\n                    <Image.Img\n                      class=\"aspect-square h-full w-full\"\n                      src={props.user.avatar}\n                      alt={props.user.name}\n                    />\n                    <Image.Fallback class=\"bg-muted flex h-full w-full items-center justify-center rounded-lg\">\n                      CN\n                    </Image.Fallback>\n                  </Image>\n                  <div class=\"grid flex-1 text-left text-sm leading-tight\">\n                    <span class=\"truncate font-semibold\">\n                      {props.user.name}\n                    </span>\n                    <span class=\"truncate text-xs\">{props.user.email}</span>\n                  </div>\n                </div>\n              </DropdownMenuGroupLabel>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0zM20 3v4m2-2h-4M4 17v2m1-1H3\"\n                  />\n                </svg>\n                Upgrade to Pro\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <g\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                  >\n                    <path d=\"M3.85 8.62a4 4 0 0 1 4.78-4.77a4 4 0 0 1 6.74 0a4 4 0 0 1 4.78 4.78a4 4 0 0 1 0 6.74a4 4 0 0 1-4.77 4.78a4 4 0 0 1-6.75 0a4 4 0 0 1-4.78-4.77a4 4 0 0 1 0-6.76\" />\n                    <path d=\"m9 12l2 2l4-4\" />\n                  </g>\n                </svg>\n                Account\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <g\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                  >\n                    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n                    <path d=\"M2 10h20\" />\n                  </g>\n                </svg>\n                Billing\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"size-4\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9m4.3 13a1.94 1.94 0 0 0 3.4 0\"\n                  />\n                </svg>\n                Notifications\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                  d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4m7 14l5-5l-5-5m5 5H9\"\n                />\n              </svg>\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n\nexport default NavUser\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/nav-secondary.tsx",
				type: "registry:component",
				target: "src/components/nav-secondary.tsx",
				content: "import {\n  For,\n  splitProps,\n  type Accessor,\n  type ComponentProps,\n  type JSXElement,\n} from \"solid-js\"\n\nimport {\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\n\nconst NavSecondary = (\n  props: ComponentProps<typeof SidebarGroup> & {\n    items: {\n      title: string\n      url: string\n      icon: Accessor<JSXElement>\n    }[]\n  }\n) => {\n  const [local, rest] = splitProps(props, [\"items\"])\n\n  return (\n    <SidebarGroup {...rest}>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          <For each={local.items}>\n            {(item) => (\n              <SidebarMenuItem>\n                <SidebarMenuButton as=\"a\" size=\"sm\" href={item.url}>\n                  <item.icon />\n                  <span>{item.title}</span>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            )}\n          </For>\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  )\n}\n\nexport default NavSecondary\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/blocks/sidebar-03/index"), { lazy: true }),
			source: "src/__registry__/tailwindcss/blocks/sidebar-03/index.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart": {
			name: "area-chart",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { CurveType, Position } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186 },\n  { month: \"February\", desktop: 305 },\n  { month: \"March\", desktop: 237 },\n  { month: \"April\", desktop: 73 },\n  { month: \"May\", desktop: 209 },\n  { month: \"June\", desktop: 214 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n} satisfies ChartConfig\n\nconst AreaChart = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Area Chart</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <VisArea<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            opacity={0.4}\n            curveType={CurveType.Natural}\n          />\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            curveType={CurveType.Natural}\n            lineWidth={1}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color=\"var(--color-desktop)\"\n            template={(props) => (\n              <ChartTooltipContent\n                labelKey=\"month\"\n                indicator=\"line\"\n                {...props}\n              />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              January - June 2024\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default AreaChart\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-linear": {
			name: "area-chart-linear",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-linear.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { CurveType, Position } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186 },\n  { month: \"February\", desktop: 305 },\n  { month: \"March\", desktop: 237 },\n  { month: \"April\", desktop: 73 },\n  { month: \"May\", desktop: 209 },\n  { month: \"June\", desktop: 214 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n} satisfies ChartConfig\n\nconst AreaChartLinear = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Area Chart - Linear</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <VisArea<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            opacity={0.4}\n            curveType={CurveType.Linear}\n          />\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            curveType={CurveType.Linear}\n            lineWidth={1}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color=\"var(--color-desktop)\"\n            template={(props) => (\n              <ChartTooltipContent\n                labelKey=\"month\"\n                indicator=\"dot\"\n                hideLabel\n                {...props}\n              />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              January - June 2024\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default AreaChartLinear\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-linear"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-linear.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-step": {
			name: "area-chart-step",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-step.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { CurveType, Position } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186 },\n  { month: \"February\", desktop: 305 },\n  { month: \"March\", desktop: 237 },\n  { month: \"April\", desktop: 73 },\n  { month: \"May\", desktop: 209 },\n  { month: \"June\", desktop: 214 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n    icon: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n          d=\"M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2\"\n        />\n      </svg>\n    ),\n  },\n} satisfies ChartConfig\n\nconst AreaChartStep = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Area Chart - Step</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <VisArea<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            opacity={0.4}\n            curveType={CurveType.Step}\n          />\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            curveType={CurveType.Step}\n            lineWidth={1}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color=\"var(--color-desktop)\"\n            template={(props) => (\n              <ChartTooltipContent labelKey=\"month\" hideLabel {...props} />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              January - June 2024\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default AreaChartStep\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-step"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-step.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-stacked": {
			name: "area-chart-stacked",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-stacked.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { CurveType, Position } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n  mobile: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst AreaChartStacked = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Area Chart - Stacked</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 620]}\n        >\n          <VisArea<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.desktop]}\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            opacity={0.4}\n            curveType={CurveType.Natural}\n          />\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            curveType={CurveType.Natural}\n            lineWidth={1}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            template={(props) => (\n              <ChartTooltipContent labelKey=\"month\" {...props} />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              January - June 2024\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default AreaChartStacked\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-stacked"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-stacked.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-legend": {
			name: "area-chart-legend",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-legend.tsx",
				type: "registry:block",
				target: "",
				content: "import {\n  VisArea,\n  VisAxis,\n  VisBulletLegend,\n  VisLine,\n  VisTooltip,\n} from \"@unovis/solid\"\nimport { CurveType, Position, type BulletLegendItemInterface } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n  mobile: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst AreaChartLegend = () => {\n  const items = (): BulletLegendItemInterface[] => {\n    return Object.entries(chartConfig).map(([_, config]) => ({\n      name: config.label,\n      color: config.color,\n    }))\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Area Chart - Legend</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 620]}\n        >\n          <VisArea<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.desktop]}\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            opacity={0.4}\n            curveType={CurveType.Natural}\n          />\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            curveType={CurveType.Natural}\n            lineWidth={1}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            template={(props) => (\n              <ChartTooltipContent\n                labelKey=\"month\"\n                indicator=\"line\"\n                {...props}\n              />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n        <div class=\"flex items-center justify-center gap-4 pt-3\">\n          <VisBulletLegend items={items()} />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              January - June 2024\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default AreaChartLegend\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-legend"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-legend.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-gradient": {
			name: "area-chart-gradient",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-gradient.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { Area, CurveType, Position } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n  mobile: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst AreaChartGradient = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Area Chart - Gradient</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 620]}\n        >\n          <svg height={0} width={0}>\n            <defs>\n              <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stop-color=\"var(--color-desktop)\"\n                  stop-opacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stop-color=\"var(--color-desktop)\"\n                  stop-opacity={0.1}\n                />\n              </linearGradient>\n              <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stop-color=\"var(--color-mobile)\"\n                  stop-opacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stop-color=\"var(--color-mobile)\"\n                  stop-opacity={0.1}\n                />\n              </linearGradient>\n            </defs>\n          </svg>\n          <VisArea<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.desktop]}\n            color=\"auto\"\n            opacity={0.4}\n            curveType={CurveType.Natural}\n            attributes={{\n              [`${Area.selectors.area}:nth-child(1)`]: {\n                fill: \"url(#fillDesktop)\",\n              },\n              [`${Area.selectors.area}:nth-child(2)`]: {\n                fill: \"url(#fillMobile)\",\n              },\n            }}\n          />\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            curveType={CurveType.Natural}\n            lineWidth={1}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            template={(props) => (\n              <ChartTooltipContent labelKey=\"month\" {...props} />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              January - June 2024\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default AreaChartGradient\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-gradient"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-gradient.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-interactive": {
			name: "area-chart-interactive",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart","use-mobile"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-interactive.tsx",
				type: "registry:block",
				target: "",
				content: "import { batch, createSignal } from \"solid-js\"\nimport {\n  VisArea,\n  VisAxis,\n  VisBrush,\n  VisBulletLegend,\n  VisLine,\n  VisTooltip,\n} from \"@unovis/solid\"\nimport {\n  Area,\n  CurveType,\n  Position,\n  type BulletLegendItemInterface,\n} from \"@unovis/ts\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  desktop: number\n  mobile: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-04-01\", desktop: 222, mobile: 150 },\n  { date: \"2024-04-02\", desktop: 97, mobile: 180 },\n  { date: \"2024-04-03\", desktop: 167, mobile: 120 },\n  { date: \"2024-04-04\", desktop: 242, mobile: 260 },\n  { date: \"2024-04-05\", desktop: 373, mobile: 290 },\n  { date: \"2024-04-06\", desktop: 301, mobile: 340 },\n  { date: \"2024-04-07\", desktop: 245, mobile: 180 },\n  { date: \"2024-04-08\", desktop: 409, mobile: 320 },\n  { date: \"2024-04-09\", desktop: 59, mobile: 110 },\n  { date: \"2024-04-10\", desktop: 261, mobile: 190 },\n  { date: \"2024-04-11\", desktop: 327, mobile: 350 },\n  { date: \"2024-04-12\", desktop: 292, mobile: 210 },\n  { date: \"2024-04-13\", desktop: 342, mobile: 380 },\n  { date: \"2024-04-14\", desktop: 137, mobile: 220 },\n  { date: \"2024-04-15\", desktop: 120, mobile: 170 },\n  { date: \"2024-04-16\", desktop: 138, mobile: 190 },\n  { date: \"2024-04-17\", desktop: 446, mobile: 360 },\n  { date: \"2024-04-18\", desktop: 364, mobile: 410 },\n  { date: \"2024-04-19\", desktop: 243, mobile: 180 },\n  { date: \"2024-04-20\", desktop: 89, mobile: 150 },\n  { date: \"2024-04-21\", desktop: 137, mobile: 200 },\n  { date: \"2024-04-22\", desktop: 224, mobile: 170 },\n  { date: \"2024-04-23\", desktop: 138, mobile: 230 },\n  { date: \"2024-04-24\", desktop: 387, mobile: 290 },\n  { date: \"2024-04-25\", desktop: 215, mobile: 250 },\n  { date: \"2024-04-26\", desktop: 75, mobile: 130 },\n  { date: \"2024-04-27\", desktop: 383, mobile: 420 },\n  { date: \"2024-04-28\", desktop: 122, mobile: 180 },\n  { date: \"2024-04-29\", desktop: 315, mobile: 240 },\n  { date: \"2024-04-30\", desktop: 454, mobile: 380 },\n  { date: \"2024-05-01\", desktop: 165, mobile: 220 },\n  { date: \"2024-05-02\", desktop: 293, mobile: 310 },\n  { date: \"2024-05-03\", desktop: 247, mobile: 190 },\n  { date: \"2024-05-04\", desktop: 385, mobile: 420 },\n  { date: \"2024-05-05\", desktop: 481, mobile: 390 },\n  { date: \"2024-05-06\", desktop: 498, mobile: 520 },\n  { date: \"2024-05-07\", desktop: 388, mobile: 300 },\n  { date: \"2024-05-08\", desktop: 149, mobile: 210 },\n  { date: \"2024-05-09\", desktop: 227, mobile: 180 },\n  { date: \"2024-05-10\", desktop: 293, mobile: 330 },\n  { date: \"2024-05-11\", desktop: 335, mobile: 270 },\n  { date: \"2024-05-12\", desktop: 197, mobile: 240 },\n  { date: \"2024-05-13\", desktop: 197, mobile: 160 },\n  { date: \"2024-05-14\", desktop: 448, mobile: 490 },\n  { date: \"2024-05-15\", desktop: 473, mobile: 380 },\n  { date: \"2024-05-16\", desktop: 338, mobile: 400 },\n  { date: \"2024-05-17\", desktop: 499, mobile: 420 },\n  { date: \"2024-05-18\", desktop: 315, mobile: 350 },\n  { date: \"2024-05-19\", desktop: 235, mobile: 180 },\n  { date: \"2024-05-20\", desktop: 177, mobile: 230 },\n  { date: \"2024-05-21\", desktop: 82, mobile: 140 },\n  { date: \"2024-05-22\", desktop: 81, mobile: 120 },\n  { date: \"2024-05-23\", desktop: 252, mobile: 290 },\n  { date: \"2024-05-24\", desktop: 294, mobile: 220 },\n  { date: \"2024-05-25\", desktop: 201, mobile: 250 },\n  { date: \"2024-05-26\", desktop: 213, mobile: 170 },\n  { date: \"2024-05-27\", desktop: 420, mobile: 460 },\n  { date: \"2024-05-28\", desktop: 233, mobile: 190 },\n  { date: \"2024-05-29\", desktop: 78, mobile: 130 },\n  { date: \"2024-05-30\", desktop: 340, mobile: 280 },\n  { date: \"2024-05-31\", desktop: 178, mobile: 230 },\n  { date: \"2024-06-01\", desktop: 178, mobile: 200 },\n  { date: \"2024-06-02\", desktop: 470, mobile: 410 },\n  { date: \"2024-06-03\", desktop: 103, mobile: 160 },\n  { date: \"2024-06-04\", desktop: 439, mobile: 380 },\n  { date: \"2024-06-05\", desktop: 88, mobile: 140 },\n  { date: \"2024-06-06\", desktop: 294, mobile: 250 },\n  { date: \"2024-06-07\", desktop: 323, mobile: 370 },\n  { date: \"2024-06-08\", desktop: 385, mobile: 320 },\n  { date: \"2024-06-09\", desktop: 438, mobile: 480 },\n  { date: \"2024-06-10\", desktop: 155, mobile: 200 },\n  { date: \"2024-06-11\", desktop: 92, mobile: 150 },\n  { date: \"2024-06-12\", desktop: 492, mobile: 420 },\n  { date: \"2024-06-13\", desktop: 81, mobile: 130 },\n  { date: \"2024-06-14\", desktop: 426, mobile: 380 },\n  { date: \"2024-06-15\", desktop: 307, mobile: 350 },\n  { date: \"2024-06-16\", desktop: 371, mobile: 310 },\n  { date: \"2024-06-17\", desktop: 475, mobile: 520 },\n  { date: \"2024-06-18\", desktop: 107, mobile: 170 },\n  { date: \"2024-06-19\", desktop: 341, mobile: 290 },\n  { date: \"2024-06-20\", desktop: 408, mobile: 450 },\n  { date: \"2024-06-21\", desktop: 169, mobile: 210 },\n  { date: \"2024-06-22\", desktop: 317, mobile: 270 },\n  { date: \"2024-06-23\", desktop: 480, mobile: 530 },\n  { date: \"2024-06-24\", desktop: 132, mobile: 180 },\n  { date: \"2024-06-25\", desktop: 141, mobile: 190 },\n  { date: \"2024-06-26\", desktop: 434, mobile: 380 },\n  { date: \"2024-06-27\", desktop: 448, mobile: 490 },\n  { date: \"2024-06-28\", desktop: 149, mobile: 200 },\n  { date: \"2024-06-29\", desktop: 103, mobile: 160 },\n  { date: \"2024-06-30\", desktop: 446, mobile: 400 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst AreaChartInteractive = () => {\n  const items = (): BulletLegendItemInterface[] => {\n    return Object.entries(chartConfig).map(([_, config]) => ({\n      name: config.label,\n      color: config.color,\n    }))\n  }\n\n  const [duration, setDuration] = createSignal<number | undefined>(0)\n  const [domain, setDomain] = createSignal<[number, number]>([\n    data.findIndex((d) => d.date === \"2024-04-30\"),\n    data.findIndex((d) => d.date === \"2024-06-01\"),\n  ])\n\n  const isMobile = useIsMobile()\n\n  const numTicks = () => {\n    if (isMobile()) {\n      return 4\n    }\n    return 15\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Area Chart - Interactive</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 3 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 1600]}\n          xDomain={domain()}\n          duration={duration()}\n          class=\"aspect-auto\"\n        >\n          <svg height={0} width={0}>\n            <defs>\n              <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stop-color=\"var(--color-desktop)\"\n                  stop-opacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stop-color=\"var(--color-desktop)\"\n                  stop-opacity={0.1}\n                />\n              </linearGradient>\n              <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stop-color=\"var(--color-mobile)\"\n                  stop-opacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stop-color=\"var(--color-mobile)\"\n                  stop-opacity={0.1}\n                />\n              </linearGradient>\n            </defs>\n          </svg>\n          <VisArea<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.desktop]}\n            color=\"auto\"\n            opacity={0.4}\n            curveType={CurveType.Natural}\n            attributes={{\n              [`${Area.selectors.area}:nth-child(1)`]: {\n                fill: \"url(#fillDesktop)\",\n              },\n              [`${Area.selectors.area}:nth-child(2)`]: {\n                fill: \"url(#fillMobile)\",\n              },\n            }}\n          />\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            curveType={CurveType.Natural}\n            lineWidth={1}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => {\n              const date = new Date(data[d as number].date)\n              return date.toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n              })\n            }}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={Math.min(numTicks(), domain()[1] - domain()[0])}\n          />\n          <ChartCrosshair<DataRecord>\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            template={(props) => (\n              <ChartTooltipContent\n                labelKey=\"date\"\n                labelFormatter={(d) => {\n                  const date = new Date(data[d as number].date)\n                  return date.toLocaleDateString(\"en-US\", {\n                    month: \"short\",\n                    day: \"numeric\",\n                  })\n                }}\n                {...props}\n              />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n        <div class=\"flex items-center justify-center gap-4 pt-3\">\n          <VisBulletLegend items={items()} />\n        </div>\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          height={75}\n          padding={{\n            top: 12,\n          }}\n          class=\"aspect-auto\"\n        >\n          <svg height={0} width={0}>\n            <defs>\n              <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stop-color=\"var(--color-desktop)\"\n                  stop-opacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stop-color=\"var(--color-desktop)\"\n                  stop-opacity={0.1}\n                />\n              </linearGradient>\n              <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stop-color=\"var(--color-mobile)\"\n                  stop-opacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stop-color=\"var(--color-mobile)\"\n                  stop-opacity={0.1}\n                />\n              </linearGradient>\n            </defs>\n          </svg>\n          <VisArea<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.desktop]}\n            color=\"auto\"\n            opacity={0.4}\n            curveType={CurveType.Natural}\n            attributes={{\n              [`${Area.selectors.area}:nth-child(1)`]: {\n                fill: \"url(#fillDesktop)\",\n              },\n              [`${Area.selectors.area}:nth-child(2)`]: {\n                fill: \"url(#fillMobile)\",\n              },\n            }}\n          />\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\n            curveType={CurveType.Natural}\n            lineWidth={1}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => {\n              const date = new Date(data[d as number].date)\n              return date.toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n              })\n            }}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={numTicks()}\n          />\n          <VisBrush\n            selection={domain()}\n            onBrush={(selection, _, userDriven) => {\n              if (userDriven)\n                batch(() => {\n                  setDuration(0)\n                  setDomain(selection!)\n                })\n            }}\n            draggable\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default AreaChartInteractive\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-interactive"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-interactive.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart": {
			name: "bar-chart",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186 },\n  { month: \"February\", desktop: 305 },\n  { month: \"March\", desktop: 237 },\n  { month: \"April\", desktop: 73 },\n  { month: \"May\", desktop: 209 },\n  { month: \"June\", desktop: 214 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n} satisfies ChartConfig\n\nconst BarChart = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Bar Chart</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            roundedCorners={8}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"month\"\n                    hideLabel\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default BarChart\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-horizontal": {
			name: "bar-chart-horizontal",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-horizontal.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { Direction, Orientation, StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186 },\n  { month: \"February\", desktop: 305 },\n  { month: \"March\", desktop: 237 },\n  { month: \"April\", desktop: 73 },\n  { month: \"May\", desktop: 209 },\n  { month: \"June\", desktop: 214 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n} satisfies ChartConfig\n\nconst BarChartHorizontal = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Bar Chart- Horizontal</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDirection={Direction.South}\n        >\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            roundedCorners={5}\n            orientation={Orientation.Horizontal}\n          />\n          <VisAxis<DataRecord>\n            type=\"y\"\n            tickFormat={(_, i) => data[i].month}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"month\"\n                    hideLabel\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default BarChartHorizontal\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-horizontal"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-horizontal.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-multiple": {
			name: "bar-chart-multiple",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-multiple.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisGroupedBar, VisTooltip } from \"@unovis/solid\"\nimport { GroupedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n  mobile: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst BarChartMultiple = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Bar Chart - Multiple</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <VisGroupedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.desktop, (d) => d.mobile]}\n            color={[\"var(--color-desktop)\", \"var(--color-mobile)\"]}\n            roundedCorners={4}\n            barPadding={0.2}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <VisTooltip\n            triggers={{\n              [GroupedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"month\"\n                    indicator=\"dashed\"\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default BarChartMultiple\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-multiple"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-multiple.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-stacked": {
			name: "bar-chart-stacked",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-stacked.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport {\n  VisAxis,\n  VisBulletLegend,\n  VisStackedBar,\n  VisTooltip,\n} from \"@unovis/solid\"\nimport { StackedBar, type BulletLegendItemInterface } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n  mobile: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst BarChartStacked = () => {\n  const items = (): BulletLegendItemInterface[] => {\n    return Object.entries(chartConfig).map(([_, config]) => ({\n      name: config.label,\n      color: config.color,\n    }))\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Bar Chart - Stacked</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 620]}\n        >\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.desktop, (d) => d.mobile]}\n            color={[\"var(--color-desktop)\", \"var(--color-mobile)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"month\"\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n        <div class=\"flex items-center justify-center gap-4 pt-3\">\n          <VisBulletLegend items={items()} />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default BarChartStacked\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-stacked"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-stacked.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-mixed": {
			name: "bar-chart-mixed",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-mixed.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { Direction, Orientation, StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  browser: string\n  visitors: number\n  fill: string\n}\n\nconst data: DataRecord[] = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--chart-3))\",\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--chart-4))\",\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--chart-5))\",\n  },\n} satisfies ChartConfig\n\nconst BarChartMixed = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Bar Chart- Mixed</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDirection={Direction.South}\n        >\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.visitors}\n            color={(d) => d.fill}\n            roundedCorners={5}\n            orientation={Orientation.Horizontal}\n          />\n          <VisAxis<DataRecord>\n            type=\"y\"\n            tickFormat={(_, i) =>\n              chartConfig[data[i].browser as keyof typeof chartConfig].label\n            }\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"browser\"\n                    hideLabel\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default BarChartMixed\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-mixed"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-mixed.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-active": {
			name: "bar-chart-active",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-active.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  browser: string\n  visitors: number\n  fill: string\n}\n\nconst data: DataRecord[] = [\n  { browser: \"chrome\", visitors: 187, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 275, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--chart-3))\",\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--chart-4))\",\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--chart-5))\",\n  },\n} satisfies ChartConfig\n\nconst BarChartActive = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Bar Chart- Active</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <style\n            innerText={`path[data-stacked-bar-active=true] {\n\t\t\t\t\t--vis-stacked-bar-stroke-color: ${data.find((d) => d.browser === \"firefox\")?.fill};\n\t\t\t\t\t--vis-stacked-bar-stroke-width: 2;\n\t\t\t\t\t--vis-stacked-bar-hover-stroke-color: var(--vis-stacked-bar-stroke-color);\n\t\t\t\t\t--vis-stacked-bar-hover-stroke-width: var(--vis-stacked-bar-stroke-width);\n\t\t\t\t\t}`}\n          />\n          <VisStackedBar<DataRecord>\n            id={(d) => `stacked-bar-${d.browser}`}\n            x={(_, i) => i}\n            y={(d) => d.visitors}\n            color={(d) => d.fill}\n            roundedCorners={8}\n            attributes={{\n              [StackedBar.selectors.bar]: {\n                \"stroke-width\": 2,\n                \"stroke-dasharray\": 4,\n                \"stroke-dashoffset\": 4,\n                \"fill-opacity\": 0.8,\n                \"data-stacked-bar-active\": (d) => d.browser === \"firefox\",\n              },\n            }}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(_, i) =>\n              chartConfig[data[i].browser as keyof typeof chartConfig].label\n            }\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"browser\"\n                    hideLabel\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default BarChartActive\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-active"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-active.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-interactive": {
			name: "bar-chart-interactive",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart","use-mobile"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-interactive.tsx",
				type: "registry:block",
				target: "",
				content: "import { For, createMemo, createSignal } from \"solid-js\"\nimport { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  desktop: { view: number }\n  mobile: { view: number }\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-04-01\", desktop: { view: 222 }, mobile: { view: 150 } },\n  { date: \"2024-04-02\", desktop: { view: 97 }, mobile: { view: 180 } },\n  { date: \"2024-04-03\", desktop: { view: 167 }, mobile: { view: 120 } },\n  { date: \"2024-04-04\", desktop: { view: 242 }, mobile: { view: 260 } },\n  { date: \"2024-04-05\", desktop: { view: 373 }, mobile: { view: 290 } },\n  { date: \"2024-04-06\", desktop: { view: 301 }, mobile: { view: 340 } },\n  { date: \"2024-04-07\", desktop: { view: 245 }, mobile: { view: 180 } },\n  { date: \"2024-04-08\", desktop: { view: 409 }, mobile: { view: 320 } },\n  { date: \"2024-04-09\", desktop: { view: 59 }, mobile: { view: 110 } },\n  { date: \"2024-04-10\", desktop: { view: 261 }, mobile: { view: 190 } },\n  { date: \"2024-04-11\", desktop: { view: 327 }, mobile: { view: 350 } },\n  { date: \"2024-04-12\", desktop: { view: 292 }, mobile: { view: 210 } },\n  { date: \"2024-04-13\", desktop: { view: 342 }, mobile: { view: 380 } },\n  { date: \"2024-04-14\", desktop: { view: 137 }, mobile: { view: 220 } },\n  { date: \"2024-04-15\", desktop: { view: 120 }, mobile: { view: 170 } },\n  { date: \"2024-04-16\", desktop: { view: 138 }, mobile: { view: 190 } },\n  { date: \"2024-04-17\", desktop: { view: 446 }, mobile: { view: 360 } },\n  { date: \"2024-04-18\", desktop: { view: 364 }, mobile: { view: 410 } },\n  { date: \"2024-04-19\", desktop: { view: 243 }, mobile: { view: 180 } },\n  { date: \"2024-04-20\", desktop: { view: 89 }, mobile: { view: 150 } },\n  { date: \"2024-04-21\", desktop: { view: 137 }, mobile: { view: 200 } },\n  { date: \"2024-04-22\", desktop: { view: 224 }, mobile: { view: 170 } },\n  { date: \"2024-04-23\", desktop: { view: 138 }, mobile: { view: 230 } },\n  { date: \"2024-04-24\", desktop: { view: 387 }, mobile: { view: 290 } },\n  { date: \"2024-04-25\", desktop: { view: 215 }, mobile: { view: 250 } },\n  { date: \"2024-04-26\", desktop: { view: 75 }, mobile: { view: 130 } },\n  { date: \"2024-04-27\", desktop: { view: 383 }, mobile: { view: 420 } },\n  { date: \"2024-04-28\", desktop: { view: 122 }, mobile: { view: 180 } },\n  { date: \"2024-04-29\", desktop: { view: 315 }, mobile: { view: 240 } },\n  { date: \"2024-04-30\", desktop: { view: 454 }, mobile: { view: 380 } },\n  { date: \"2024-05-01\", desktop: { view: 165 }, mobile: { view: 220 } },\n  { date: \"2024-05-02\", desktop: { view: 293 }, mobile: { view: 310 } },\n  { date: \"2024-05-03\", desktop: { view: 247 }, mobile: { view: 190 } },\n  { date: \"2024-05-04\", desktop: { view: 385 }, mobile: { view: 420 } },\n  { date: \"2024-05-05\", desktop: { view: 481 }, mobile: { view: 390 } },\n  { date: \"2024-05-06\", desktop: { view: 498 }, mobile: { view: 520 } },\n  { date: \"2024-05-07\", desktop: { view: 388 }, mobile: { view: 300 } },\n  { date: \"2024-05-08\", desktop: { view: 149 }, mobile: { view: 210 } },\n  { date: \"2024-05-09\", desktop: { view: 227 }, mobile: { view: 180 } },\n  { date: \"2024-05-10\", desktop: { view: 293 }, mobile: { view: 330 } },\n  { date: \"2024-05-11\", desktop: { view: 335 }, mobile: { view: 270 } },\n  { date: \"2024-05-12\", desktop: { view: 197 }, mobile: { view: 240 } },\n  { date: \"2024-05-13\", desktop: { view: 197 }, mobile: { view: 160 } },\n  { date: \"2024-05-14\", desktop: { view: 448 }, mobile: { view: 490 } },\n  { date: \"2024-05-15\", desktop: { view: 473 }, mobile: { view: 380 } },\n  { date: \"2024-05-16\", desktop: { view: 338 }, mobile: { view: 400 } },\n  { date: \"2024-05-17\", desktop: { view: 499 }, mobile: { view: 420 } },\n  { date: \"2024-05-18\", desktop: { view: 315 }, mobile: { view: 350 } },\n  { date: \"2024-05-19\", desktop: { view: 235 }, mobile: { view: 180 } },\n  { date: \"2024-05-20\", desktop: { view: 177 }, mobile: { view: 230 } },\n  { date: \"2024-05-21\", desktop: { view: 82 }, mobile: { view: 140 } },\n  { date: \"2024-05-22\", desktop: { view: 81 }, mobile: { view: 120 } },\n  { date: \"2024-05-23\", desktop: { view: 252 }, mobile: { view: 290 } },\n  { date: \"2024-05-24\", desktop: { view: 294 }, mobile: { view: 220 } },\n  { date: \"2024-05-25\", desktop: { view: 201 }, mobile: { view: 250 } },\n  { date: \"2024-05-26\", desktop: { view: 213 }, mobile: { view: 170 } },\n  { date: \"2024-05-27\", desktop: { view: 420 }, mobile: { view: 460 } },\n  { date: \"2024-05-28\", desktop: { view: 233 }, mobile: { view: 190 } },\n  { date: \"2024-05-29\", desktop: { view: 78 }, mobile: { view: 130 } },\n  { date: \"2024-05-30\", desktop: { view: 340 }, mobile: { view: 280 } },\n  { date: \"2024-05-31\", desktop: { view: 178 }, mobile: { view: 230 } },\n  { date: \"2024-06-01\", desktop: { view: 178 }, mobile: { view: 200 } },\n  { date: \"2024-06-02\", desktop: { view: 470 }, mobile: { view: 410 } },\n  { date: \"2024-06-03\", desktop: { view: 103 }, mobile: { view: 160 } },\n  { date: \"2024-06-04\", desktop: { view: 439 }, mobile: { view: 380 } },\n  { date: \"2024-06-05\", desktop: { view: 88 }, mobile: { view: 140 } },\n  { date: \"2024-06-06\", desktop: { view: 294 }, mobile: { view: 250 } },\n  { date: \"2024-06-07\", desktop: { view: 323 }, mobile: { view: 370 } },\n  { date: \"2024-06-08\", desktop: { view: 385 }, mobile: { view: 320 } },\n  { date: \"2024-06-09\", desktop: { view: 438 }, mobile: { view: 480 } },\n  { date: \"2024-06-10\", desktop: { view: 155 }, mobile: { view: 200 } },\n  { date: \"2024-06-11\", desktop: { view: 92 }, mobile: { view: 150 } },\n  { date: \"2024-06-12\", desktop: { view: 492 }, mobile: { view: 420 } },\n  { date: \"2024-06-13\", desktop: { view: 81 }, mobile: { view: 130 } },\n  { date: \"2024-06-14\", desktop: { view: 426 }, mobile: { view: 380 } },\n  { date: \"2024-06-15\", desktop: { view: 307 }, mobile: { view: 350 } },\n  { date: \"2024-06-16\", desktop: { view: 371 }, mobile: { view: 310 } },\n  { date: \"2024-06-17\", desktop: { view: 475 }, mobile: { view: 520 } },\n  { date: \"2024-06-18\", desktop: { view: 107 }, mobile: { view: 170 } },\n  { date: \"2024-06-19\", desktop: { view: 341 }, mobile: { view: 290 } },\n  { date: \"2024-06-20\", desktop: { view: 408 }, mobile: { view: 450 } },\n  { date: \"2024-06-21\", desktop: { view: 169 }, mobile: { view: 210 } },\n  { date: \"2024-06-22\", desktop: { view: 317 }, mobile: { view: 270 } },\n  { date: \"2024-06-23\", desktop: { view: 480 }, mobile: { view: 530 } },\n  { date: \"2024-06-24\", desktop: { view: 132 }, mobile: { view: 180 } },\n  { date: \"2024-06-25\", desktop: { view: 141 }, mobile: { view: 190 } },\n  { date: \"2024-06-26\", desktop: { view: 434 }, mobile: { view: 380 } },\n  { date: \"2024-06-27\", desktop: { view: 448 }, mobile: { view: 490 } },\n  { date: \"2024-06-28\", desktop: { view: 149 }, mobile: { view: 200 } },\n  { date: \"2024-06-29\", desktop: { view: 103 }, mobile: { view: 160 } },\n  { date: \"2024-06-30\", desktop: { view: 446 }, mobile: { view: 400 } },\n]\n\nconst chartConfig = {\n  view: {\n    label: \"Page Views\",\n  },\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst BarChartInteractive = () => {\n  const isMobile = useIsMobile()\n\n  const numTicks = () => {\n    if (isMobile()) {\n      return 4\n    }\n    return 9\n  }\n\n  const [activeChart, setActiveChart] =\n    createSignal<keyof typeof chartConfig>(\"desktop\")\n\n  const keys = createMemo(() =>\n    // @ts-expect-error\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    Object.keys(data[0][activeChart()]).map((i) => ({ view: i }))\n  )\n\n  const y = createMemo(() =>\n    // @ts-expect-error\n    // eslint-disable-next-line solid/reactivity\n    keys().map((i) => (d: DataRecord) => d[activeChart()][i.view])\n  )\n\n  const total = createMemo(() => ({\n    desktop: data.reduce((acc, curr) => acc + curr.desktop.view, 0),\n    mobile: data.reduce((acc, curr) => acc + curr.mobile.view, 0),\n  }))\n\n  return (\n    <Card>\n      <CardHeader class=\"flex flex-col items-stretch space-y-0 border-b p-0 sm:flex-row\">\n        <div class=\"flex flex-1 flex-col justify-center gap-1 px-6 py-5 sm:py-6\">\n          <CardTitle>Bar Chart - Interactive</CardTitle>\n          <CardDescription>\n            Showing total visitors for the last 3 months\n          </CardDescription>\n        </div>\n        <div class=\"flex\">\n          <For each={[\"desktop\", \"mobile\"]}>\n            {(key) => {\n              const chart = key as keyof typeof chartConfig\n              return (\n                <button\n                  data-active={activeChart() === chart}\n                  class=\"data-[active=true]:bg-muted/50 relative z-30 flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l sm:border-l sm:border-t-0 sm:px-8 sm:py-6\"\n                  onClick={() => setActiveChart(chart)}\n                >\n                  <span class=\"text-muted-foreground text-xs\">\n                    {chartConfig[chart].label}\n                  </span>\n                  <span class=\"text-lg font-bold leading-none sm:text-3xl\">\n                    {total()[key as keyof typeof total]}\n                  </span>\n                </button>\n              )\n            }}\n          </For>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          class=\"aspect-auto\"\n          yDomain={[0, Math.max(...data.map((d) => d.mobile.view + 50))]}\n        >\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={y()}\n            color={`var(--color-${activeChart()})`}\n            barPadding={0.2}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => {\n              const date = new Date(data[d as number].date)\n              return date.toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n              })\n            }}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={numTicks()}\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent<Partial<DataRecord>, typeof chartConfig>\n                    data={{\n                      date: d.date,\n                      // @ts-expect-error\n                      [activeChart()]: d[activeChart()],\n                    }}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                    nameKey=\"view\"\n                    labelFormatter={() =>\n                      new Date(d.date).toLocaleDateString(\"en-US\", {\n                        month: \"short\",\n                        day: \"numeric\",\n                        year: \"numeric\",\n                      })\n                    }\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default BarChartInteractive\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-interactive"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-interactive.tsx",
			category: "",
			subcategory: ""
		}, 
		"line-chart": {
			name: "line-chart",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/line-chart.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { CurveType, Position } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186 },\n  { month: \"February\", desktop: 305 },\n  { month: \"March\", desktop: 237 },\n  { month: \"April\", desktop: 73 },\n  { month: \"May\", desktop: 209 },\n  { month: \"June\", desktop: 214 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n} satisfies ChartConfig\n\nconst LineChart = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Line Chart</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            curveType={CurveType.Natural}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color=\"var(--color-desktop)\"\n            template={(props) => (\n              <ChartTooltipContent labelKey=\"month\" hideLabel {...props} />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default LineChart\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/line-chart"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/line-chart.tsx",
			category: "",
			subcategory: ""
		}, 
		"line-chart-linear": {
			name: "line-chart-linear",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/line-chart-linear.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { CurveType, Position } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186 },\n  { month: \"February\", desktop: 305 },\n  { month: \"March\", desktop: 237 },\n  { month: \"April\", desktop: 73 },\n  { month: \"May\", desktop: 209 },\n  { month: \"June\", desktop: 214 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n} satisfies ChartConfig\n\nconst LineChartLinear = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Line Chart - Linear</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            curveType={CurveType.Linear}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color=\"var(--color-desktop)\"\n            template={(props) => (\n              <ChartTooltipContent labelKey=\"month\" hideLabel {...props} />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default LineChartLinear\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/line-chart-linear"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/line-chart-linear.tsx",
			category: "",
			subcategory: ""
		}, 
		"line-chart-multiple": {
			name: "line-chart-multiple",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/line-chart-multiple.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { CurveType, Position } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  month: string\n  desktop: number\n  mobile: number\n}\n\nconst data: DataRecord[] = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst LineChartMultiple = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Line Chart - Multiple</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"\">\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          yDomain={[0, 310]}\n        >\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.desktop}\n            color=\"var(--color-desktop)\"\n            curveType={CurveType.Natural}\n          />{\" \"}\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={(d) => d.mobile}\n            color=\"var(--color-mobile)\"\n            curveType={CurveType.Natural}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n          />\n          <ChartCrosshair<DataRecord>\n            color=\"var(--color-desktop)\"\n            template={(props) => (\n              <ChartTooltipContent labelKey=\"month\" hideLabel {...props} />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div class=\"flex w-full items-start gap-2 text-sm\">\n          <div class=\"grid gap-2\">\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"size-4\"\n                viewBox=\"0 0 24 24\"\n              >\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                >\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n                  <path d=\"M16 7h6v6\" />\n                </g>\n              </svg>\n            </div>\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n              Showing total visitors for the last 6 months\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default LineChartMultiple\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/line-chart-multiple"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/line-chart-multiple.tsx",
			category: "",
			subcategory: ""
		}, 
		"line-chart-interactive": {
			name: "line-chart-interactive",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/line-chart-interactive.tsx",
				type: "registry:block",
				target: "",
				content: "import { For, createMemo, createSignal } from \"solid-js\"\nimport { VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\nimport { Position } from \"@unovis/ts\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartCrosshair,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  desktop: { view: number }\n  mobile: { view: number }\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-04-01\", desktop: { view: 222 }, mobile: { view: 150 } },\n  { date: \"2024-04-02\", desktop: { view: 97 }, mobile: { view: 180 } },\n  { date: \"2024-04-03\", desktop: { view: 167 }, mobile: { view: 120 } },\n  { date: \"2024-04-04\", desktop: { view: 242 }, mobile: { view: 260 } },\n  { date: \"2024-04-05\", desktop: { view: 373 }, mobile: { view: 290 } },\n  { date: \"2024-04-06\", desktop: { view: 301 }, mobile: { view: 340 } },\n  { date: \"2024-04-07\", desktop: { view: 245 }, mobile: { view: 180 } },\n  { date: \"2024-04-08\", desktop: { view: 409 }, mobile: { view: 320 } },\n  { date: \"2024-04-09\", desktop: { view: 59 }, mobile: { view: 110 } },\n  { date: \"2024-04-10\", desktop: { view: 261 }, mobile: { view: 190 } },\n  { date: \"2024-04-11\", desktop: { view: 327 }, mobile: { view: 350 } },\n  { date: \"2024-04-12\", desktop: { view: 292 }, mobile: { view: 210 } },\n  { date: \"2024-04-13\", desktop: { view: 342 }, mobile: { view: 380 } },\n  { date: \"2024-04-14\", desktop: { view: 137 }, mobile: { view: 220 } },\n  { date: \"2024-04-15\", desktop: { view: 120 }, mobile: { view: 170 } },\n  { date: \"2024-04-16\", desktop: { view: 138 }, mobile: { view: 190 } },\n  { date: \"2024-04-17\", desktop: { view: 446 }, mobile: { view: 360 } },\n  { date: \"2024-04-18\", desktop: { view: 364 }, mobile: { view: 410 } },\n  { date: \"2024-04-19\", desktop: { view: 243 }, mobile: { view: 180 } },\n  { date: \"2024-04-20\", desktop: { view: 89 }, mobile: { view: 150 } },\n  { date: \"2024-04-21\", desktop: { view: 137 }, mobile: { view: 200 } },\n  { date: \"2024-04-22\", desktop: { view: 224 }, mobile: { view: 170 } },\n  { date: \"2024-04-23\", desktop: { view: 138 }, mobile: { view: 230 } },\n  { date: \"2024-04-24\", desktop: { view: 387 }, mobile: { view: 290 } },\n  { date: \"2024-04-25\", desktop: { view: 215 }, mobile: { view: 250 } },\n  { date: \"2024-04-26\", desktop: { view: 75 }, mobile: { view: 130 } },\n  { date: \"2024-04-27\", desktop: { view: 383 }, mobile: { view: 420 } },\n  { date: \"2024-04-28\", desktop: { view: 122 }, mobile: { view: 180 } },\n  { date: \"2024-04-29\", desktop: { view: 315 }, mobile: { view: 240 } },\n  { date: \"2024-04-30\", desktop: { view: 454 }, mobile: { view: 380 } },\n  { date: \"2024-05-01\", desktop: { view: 165 }, mobile: { view: 220 } },\n  { date: \"2024-05-02\", desktop: { view: 293 }, mobile: { view: 310 } },\n  { date: \"2024-05-03\", desktop: { view: 247 }, mobile: { view: 190 } },\n  { date: \"2024-05-04\", desktop: { view: 385 }, mobile: { view: 420 } },\n  { date: \"2024-05-05\", desktop: { view: 481 }, mobile: { view: 390 } },\n  { date: \"2024-05-06\", desktop: { view: 498 }, mobile: { view: 520 } },\n  { date: \"2024-05-07\", desktop: { view: 388 }, mobile: { view: 300 } },\n  { date: \"2024-05-08\", desktop: { view: 149 }, mobile: { view: 210 } },\n  { date: \"2024-05-09\", desktop: { view: 227 }, mobile: { view: 180 } },\n  { date: \"2024-05-10\", desktop: { view: 293 }, mobile: { view: 330 } },\n  { date: \"2024-05-11\", desktop: { view: 335 }, mobile: { view: 270 } },\n  { date: \"2024-05-12\", desktop: { view: 197 }, mobile: { view: 240 } },\n  { date: \"2024-05-13\", desktop: { view: 197 }, mobile: { view: 160 } },\n  { date: \"2024-05-14\", desktop: { view: 448 }, mobile: { view: 490 } },\n  { date: \"2024-05-15\", desktop: { view: 473 }, mobile: { view: 380 } },\n  { date: \"2024-05-16\", desktop: { view: 338 }, mobile: { view: 400 } },\n  { date: \"2024-05-17\", desktop: { view: 499 }, mobile: { view: 420 } },\n  { date: \"2024-05-18\", desktop: { view: 315 }, mobile: { view: 350 } },\n  { date: \"2024-05-19\", desktop: { view: 235 }, mobile: { view: 180 } },\n  { date: \"2024-05-20\", desktop: { view: 177 }, mobile: { view: 230 } },\n  { date: \"2024-05-21\", desktop: { view: 82 }, mobile: { view: 140 } },\n  { date: \"2024-05-22\", desktop: { view: 81 }, mobile: { view: 120 } },\n  { date: \"2024-05-23\", desktop: { view: 252 }, mobile: { view: 290 } },\n  { date: \"2024-05-24\", desktop: { view: 294 }, mobile: { view: 220 } },\n  { date: \"2024-05-25\", desktop: { view: 201 }, mobile: { view: 250 } },\n  { date: \"2024-05-26\", desktop: { view: 213 }, mobile: { view: 170 } },\n  { date: \"2024-05-27\", desktop: { view: 420 }, mobile: { view: 460 } },\n  { date: \"2024-05-28\", desktop: { view: 233 }, mobile: { view: 190 } },\n  { date: \"2024-05-29\", desktop: { view: 78 }, mobile: { view: 130 } },\n  { date: \"2024-05-30\", desktop: { view: 340 }, mobile: { view: 280 } },\n  { date: \"2024-05-31\", desktop: { view: 178 }, mobile: { view: 230 } },\n  { date: \"2024-06-01\", desktop: { view: 178 }, mobile: { view: 200 } },\n  { date: \"2024-06-02\", desktop: { view: 470 }, mobile: { view: 410 } },\n  { date: \"2024-06-03\", desktop: { view: 103 }, mobile: { view: 160 } },\n  { date: \"2024-06-04\", desktop: { view: 439 }, mobile: { view: 380 } },\n  { date: \"2024-06-05\", desktop: { view: 88 }, mobile: { view: 140 } },\n  { date: \"2024-06-06\", desktop: { view: 294 }, mobile: { view: 250 } },\n  { date: \"2024-06-07\", desktop: { view: 323 }, mobile: { view: 370 } },\n  { date: \"2024-06-08\", desktop: { view: 385 }, mobile: { view: 320 } },\n  { date: \"2024-06-09\", desktop: { view: 438 }, mobile: { view: 480 } },\n  { date: \"2024-06-10\", desktop: { view: 155 }, mobile: { view: 200 } },\n  { date: \"2024-06-11\", desktop: { view: 92 }, mobile: { view: 150 } },\n  { date: \"2024-06-12\", desktop: { view: 492 }, mobile: { view: 420 } },\n  { date: \"2024-06-13\", desktop: { view: 81 }, mobile: { view: 130 } },\n  { date: \"2024-06-14\", desktop: { view: 426 }, mobile: { view: 380 } },\n  { date: \"2024-06-15\", desktop: { view: 307 }, mobile: { view: 350 } },\n  { date: \"2024-06-16\", desktop: { view: 371 }, mobile: { view: 310 } },\n  { date: \"2024-06-17\", desktop: { view: 475 }, mobile: { view: 520 } },\n  { date: \"2024-06-18\", desktop: { view: 107 }, mobile: { view: 170 } },\n  { date: \"2024-06-19\", desktop: { view: 341 }, mobile: { view: 290 } },\n  { date: \"2024-06-20\", desktop: { view: 408 }, mobile: { view: 450 } },\n  { date: \"2024-06-21\", desktop: { view: 169 }, mobile: { view: 210 } },\n  { date: \"2024-06-22\", desktop: { view: 317 }, mobile: { view: 270 } },\n  { date: \"2024-06-23\", desktop: { view: 480 }, mobile: { view: 530 } },\n  { date: \"2024-06-24\", desktop: { view: 132 }, mobile: { view: 180 } },\n  { date: \"2024-06-25\", desktop: { view: 141 }, mobile: { view: 190 } },\n  { date: \"2024-06-26\", desktop: { view: 434 }, mobile: { view: 380 } },\n  { date: \"2024-06-27\", desktop: { view: 448 }, mobile: { view: 490 } },\n  { date: \"2024-06-28\", desktop: { view: 149 }, mobile: { view: 200 } },\n  { date: \"2024-06-29\", desktop: { view: 103 }, mobile: { view: 160 } },\n  { date: \"2024-06-30\", desktop: { view: 446 }, mobile: { view: 400 } },\n]\n\nconst chartConfig = {\n  view: {\n    label: \"Page Views\",\n  },\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst LineChartInteractive = () => {\n  const isMobile = useIsMobile()\n\n  const numTicks = () => {\n    if (isMobile()) {\n      return 4\n    }\n    return 9\n  }\n\n  const [activeChart, setActiveChart] =\n    createSignal<keyof typeof chartConfig>(\"desktop\")\n\n  const keys = createMemo(() =>\n    // @ts-expect-error\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    Object.keys(data[0][activeChart()]).map((i) => ({ view: i }))\n  )\n\n  const y = createMemo(() =>\n    // @ts-expect-error\n    // eslint-disable-next-line solid/reactivity\n    keys().map((i) => (d: DataRecord) => d[activeChart()][i.view])\n  )\n\n  const total = createMemo(() => ({\n    desktop: data.reduce((acc, curr) => acc + curr.desktop.view, 0),\n    mobile: data.reduce((acc, curr) => acc + curr.mobile.view, 0),\n  }))\n\n  return (\n    <Card>\n      <CardHeader class=\"flex flex-col items-stretch space-y-0 border-b p-0 sm:flex-row\">\n        <div class=\"flex flex-1 flex-col justify-center gap-1 px-6 py-5 sm:py-6\">\n          <CardTitle>Line Chart - Interactive</CardTitle>\n          <CardDescription>\n            Showing total visitors for the last 3 months\n          </CardDescription>\n        </div>\n        <div class=\"flex\">\n          <For each={[\"desktop\", \"mobile\"]}>\n            {(key) => {\n              const chart = key as keyof typeof chartConfig\n              return (\n                <button\n                  data-active={activeChart() === chart}\n                  class=\"data-[active=true]:bg-muted/50 relative z-30 flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l sm:border-l sm:border-t-0 sm:px-8 sm:py-6\"\n                  onClick={() => setActiveChart(chart)}\n                >\n                  <span class=\"text-muted-foreground text-xs\">\n                    {chartConfig[chart].label}\n                  </span>\n                  <span class=\"text-lg font-bold leading-none sm:text-3xl\">\n                    {total()[key as keyof typeof total]}\n                  </span>\n                </button>\n              )\n            }}\n          </For>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          type=\"xy\"\n          data={data}\n          class=\"aspect-auto\"\n          yDomain={[0, Math.max(...data.map((d) => d.mobile.view + 50))]}\n        >\n          <VisLine<DataRecord>\n            x={(_, i) => i}\n            y={y()}\n            color={`var(--color-${activeChart()})`}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            tickFormat={(d) => {\n              const date = new Date(data[d as number].date)\n              return date.toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n              })\n            }}\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={numTicks()}\n          />\n          <ChartCrosshair<DataRecord>\n            color={`var(--color-${activeChart()})`}\n            template={(props) => (\n              <ChartTooltipContent\n                labelKey=\"date\"\n                nameKey=\"view\"\n                labelFormatter={() =>\n                  new Date(props.data.date).toLocaleDateString(\"en-US\", {\n                    month: \"short\",\n                    day: \"numeric\",\n                    year: \"numeric\",\n                  })\n                }\n                {...props}\n                data={{\n                  date: props.data.date,\n                  // @ts-expect-error\n                  [activeChart()]: props.data[activeChart()],\n                }}\n              />\n            )}\n          />\n          <VisTooltip horizontalPlacement={Position.Center} />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default LineChartInteractive\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/line-chart-interactive"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/line-chart-interactive.tsx",
			category: "",
			subcategory: ""
		}, 
		"donut-chart": {
			name: "donut-chart",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/donut-chart.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisDonut, VisTooltip } from \"@unovis/solid\"\nimport { Donut } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  browser: string\n  visitors: number\n  fill: string\n}\n\nconst data: DataRecord[] = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--chart-3))\",\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--chart-4))\",\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--chart-5))\",\n  },\n} satisfies ChartConfig\n\nconst DonutChart = () => {\n  return (\n    <Card class=\"flex flex-col\">\n      <CardHeader class=\"items-center\">\n        <CardTitle>Donut Chart</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"flex-1\">\n        <ChartContainer config={chartConfig} type=\"single\">\n          <VisDonut<DataRecord>\n            data={data}\n            value={(d) => d.visitors}\n            color={(d) => d.fill}\n            arcWidth={40}\n          />\n          <VisTooltip\n            triggers={{\n              [Donut.selectors.segment]: (d: { data: DataRecord }, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d.data}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"browser\"\n                    hideLabel\n                    labelAsKey\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter class=\"flex-col gap-2 text-sm\">\n        <div class=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month{\" \"}\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            class=\"size-4\"\n            viewBox=\"0 0 24 24\"\n          >\n            <g\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n            >\n              <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n              <path d=\"M16 7h6v6\" />\n            </g>\n          </svg>\n        </div>\n        <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n          Showing total visitors for the last 6 months\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default DonutChart\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/donut-chart"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/donut-chart.tsx",
			category: "",
			subcategory: ""
		}, 
		"donut-chart-pie": {
			name: "donut-chart-pie",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/donut-chart-pie.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisDonut, VisTooltip } from \"@unovis/solid\"\nimport { Donut } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  browser: string\n  visitors: number\n  fill: string\n}\n\nconst data: DataRecord[] = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--chart-3))\",\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--chart-4))\",\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--chart-5))\",\n  },\n} satisfies ChartConfig\n\nconst DonutChartPie = () => {\n  return (\n    <Card class=\"flex flex-col\">\n      <CardHeader class=\"items-center\">\n        <CardTitle>Donut Chart - Pie</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"flex-1\">\n        <ChartContainer config={chartConfig} type=\"single\">\n          <VisDonut<DataRecord>\n            data={data}\n            value={(d) => d.visitors}\n            color={(d) => d.fill}\n            arcWidth={0}\n          />\n          <VisTooltip\n            triggers={{\n              [Donut.selectors.segment]: (d: { data: DataRecord }, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d.data}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"browser\"\n                    hideLabel\n                    labelAsKey\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n      <CardFooter class=\"flex-col gap-2 text-sm\">\n        <div class=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month{\" \"}\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            class=\"size-4\"\n            viewBox=\"0 0 24 24\"\n          >\n            <g\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n            >\n              <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\n              <path d=\"M16 7h6v6\" />\n            </g>\n          </svg>\n        </div>\n        <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\n          Showing total visitors for the last 6 months\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default DonutChartPie\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/donut-chart-pie"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/donut-chart-pie.tsx",
			category: "",
			subcategory: ""
		}, 
		"donut-chart-legend": {
			name: "donut-chart-legend",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/donut-chart-legend.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisBulletLegend, VisDonut } from \"@unovis/solid\"\nimport type { BulletLegendItemInterface } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  browser: string\n  visitors: number\n  fill: string\n}\n\nconst data: DataRecord[] = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--chart-3))\",\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--chart-4))\",\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--chart-5))\",\n  },\n} satisfies ChartConfig\n\nconst DonutChartLegend = () => {\n  const items = (): BulletLegendItemInterface[] => {\n    return Object.entries(chartConfig)\n      .filter(([key]) => key !== \"visitors\")\n      .map(([_, config]) => ({\n        name: config.label,\n        // @ts-expect-error\n        color: config.color,\n      }))\n  }\n\n  return (\n    <Card class=\"flex flex-col\">\n      <CardHeader class=\"items-center\">\n        <CardTitle>Donut Chart - Legend</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent class=\"flex-1 pb-0\">\n        <ChartContainer config={chartConfig} type=\"single\">\n          <VisDonut<DataRecord>\n            data={data}\n            value={(d) => d.visitors}\n            color={(d) => d.fill}\n            arcWidth={40}\n          />\n        </ChartContainer>\n        <div class=\"flex items-center justify-center py-3 pt-6\">\n          <div class=\"w-2/3 [&>div>*]:flex [&>div>*]:basis-1/4 [&>div>*]:justify-center [&>div]:!flex [&>div]:flex-wrap [&>div]:justify-center [&>div]:gap-2\">\n            <VisBulletLegend items={items()} />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default DonutChartLegend\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/donut-chart-legend"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/donut-chart-legend.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-default": {
			name: "chart-tooltip-default",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-default.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipDefault = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - Default</CardTitle>\n        <CardDescription>\n          Default tooltip with ChartTooltipContent.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipDefault\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-default"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-default.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-line": {
			name: "chart-tooltip-line",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-line.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipLine = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - Line Indicator</CardTitle>\n        <CardDescription>Tooltip with line indicator.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                    indicator=\"line\"\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipLine\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-line"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-line.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-no-indicator": {
			name: "chart-tooltip-no-indicator",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-no-indicator.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipNoIndicator = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - No Indicator</CardTitle>\n        <CardDescription>Tooltip with no indicator.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                    hideIndicator\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipNoIndicator\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-no-indicator"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-no-indicator.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-custom-label": {
			name: "chart-tooltip-custom-label",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-custom-label.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  activities: {\n    label: \"Activities\",\n  },\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipCustomLabel = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - Custom label</CardTitle>\n        <CardDescription>\n          Tooltip with custom label from chartConfig.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent<DataRecord, typeof chartConfig>\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"activities\"\n                    indicator=\"line\"\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipCustomLabel\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-custom-label"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-custom-label.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-label-formatter": {
			name: "chart-tooltip-label-formatter",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-label-formatter.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipLabelFormatter = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - Label Formatter</CardTitle>\n        <CardDescription>Tooltip with label formatter.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                    labelFormatter={() =>\n                      new Date(d.date).toLocaleDateString(\"en-US\", {\n                        day: \"numeric\",\n                        month: \"long\",\n                        year: \"numeric\",\n                      })\n                    }\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipLabelFormatter\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-label-formatter"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-label-formatter.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-no-label": {
			name: "chart-tooltip-no-label",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-no-label.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipNoLabel = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - No Label</CardTitle>\n        <CardDescription>Tooltip with no label.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                    hideLabel\n                    hideIndicator\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipNoLabel\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-no-label"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-no-label.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-formatter": {
			name: "chart-tooltip-formatter",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-formatter.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipFormatter = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - Formatter</CardTitle>\n        <CardDescription>Tooltip with custom formatter .</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                    hideLabel\n                    formatter={(value, name) => (\n                      <div class=\"text-muted-foreground flex min-w-[130px] items-center text-xs\">\n                        {name}\n                        <div class=\"text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums\">\n                          {value}\n                          <span class=\"text-muted-foreground font-normal\">\n                            kcal\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipFormatter\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-formatter"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-formatter.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-icon": {
			name: "chart-tooltip-icon",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-icon.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n    icon: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n          d=\"M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0m16 4v-2.38c0-2.12 1.03-3.12 1-5.62c-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0m-4-3h4M4 13h4\"\n        />\n      </svg>\n    ),\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n    icon: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n          d=\"M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1M2 12c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1M2 18c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\n        />\n      </svg>\n    ),\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipIcon = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - Icon</CardTitle>\n        <CardDescription>Tooltip with icons.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                    hideLabel\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipIcon\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-icon"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-icon.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-advanced": {
			name: "chart-tooltip-advanced",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-advanced.tsx",
				type: "registry:block",
				target: "",
				content: "import { Show } from \"solid-js\"\nimport { render } from \"solid-js/web\"\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\nimport { StackedBar } from \"@unovis/ts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\n\ntype DataRecord = {\n  date: string\n  running: number\n  swimming: number\n}\n\nconst data: DataRecord[] = [\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\n]\n\nconst chartConfig = {\n  running: {\n    label: \"Running\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  swimming: {\n    label: \"Swimming\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nconst ChartTooltipAdvanced = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tooltip - Advanced</CardTitle>\n        <CardDescription>\n          Tooltip with custom formatter and total.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\n          <VisStackedBar<DataRecord>\n            x={(_, i) => i}\n            y={[(d) => d.running, (d) => d.swimming]}\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\n            roundedCorners={4}\n          />\n          <VisAxis<DataRecord>\n            type=\"x\"\n            gridLine={false}\n            tickLine={false}\n            domainLine={false}\n            numTicks={data.length}\n            tickFormat={(d) =>\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n              })\n            }\n          />\n          <VisTooltip\n            triggers={{\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\n                const container = document.createElement(\"div\")\n                const Component = () => (\n                  <ChartTooltipContent\n                    data={d}\n                    x={x}\n                    config={chartConfig}\n                    labelKey=\"date\"\n                    hideLabel\n                    formatter={(value, name, item, index) => (\n                      <>\n                        <div\n                          class=\"h-2.5 w-2.5 shrink-0 rounded-[2px] bg-[--color-bg]\"\n                          style={{\n                            \"--color-bg\": `var(--color-${(name as string).toLowerCase()})`,\n                          }}\n                        />\n                        {name}\n                        <div class=\"text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums\">\n                          {value}\n                          <span class=\"text-muted-foreground font-normal\">\n                            kcal\n                          </span>\n                        </div>\n                        {/* Add this after the last item */}\n                        <Show when={index === 1}>\n                          <div class=\"text-foreground mt-1.5 flex basis-full items-center border-t pt-1.5 text-xs font-medium\">\n                            Total\n                            <div class=\"text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums\">\n                              {item.running + item.swimming}\n                              <span class=\"text-muted-foreground font-normal\">\n                                kcal\n                              </span>\n                            </div>\n                          </div>\n                        </Show>\n                      </>\n                    )}\n                  />\n                )\n                render(() => <Component />, container)\n                return container.innerHTML\n              },\n            }}\n          />\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ChartTooltipAdvanced\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-advanced"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-advanced.tsx",
			category: "",
			subcategory: ""
		},
	},
  }
  