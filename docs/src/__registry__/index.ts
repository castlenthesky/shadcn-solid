// @ts-nocheck
// This file is autogenerated by scripts/index.ts
// Do not edit this file directly.
import { clientOnly } from "@solidjs/start"
  
export const Index: Record<string, any> = {
   "tailwindcss": { 
		"accordion-demo": {
			name: "accordion-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/accordion-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/accordion-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"alert-demo": {
			name: "alert-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/alert-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/alert-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"alert-destructive": {
			name: "alert-destructive",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/alert-destructive.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/alert-destructive"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"alert-dialog-demo": {
			name: "alert-dialog-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/alert-dialog-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/alert-dialog-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-demo": {
			name: "button-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-secondary": {
			name: "button-secondary",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-secondary.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-secondary"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-destructive": {
			name: "button-destructive",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-destructive.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-destructive"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-outline": {
			name: "button-outline",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-outline.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-outline"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-ghost": {
			name: "button-ghost",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-ghost.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-ghost"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-link": {
			name: "button-link",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-link.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-link"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-with-icon": {
			name: "button-with-icon",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-with-icon.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-with-icon"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-loading": {
			name: "button-loading",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-loading.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-loading"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"button-as-child": {
			name: "button-as-child",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/button-as-child.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/button-as-child"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"badge-demo": {
			name: "badge-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/badge-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/badge-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"badge-secondary": {
			name: "badge-secondary",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/badge-secondary.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/badge-secondary"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"badge-destructive": {
			name: "badge-destructive",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/badge-destructive.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/badge-destructive"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"badge-outline": {
			name: "badge-outline",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/badge-outline.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/badge-outline"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"calendar-demo": {
			name: "calendar-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/calendar-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/calendar-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"card-demo": {
			name: "card-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/card-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/card-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-demo": {
			name: "carousel-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-size": {
			name: "carousel-size",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-size.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-size"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-api-demo": {
			name: "carousel-api-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-api-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-api-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-orientation": {
			name: "carousel-orientation",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-orientation.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-orientation"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-plugin": {
			name: "carousel-plugin",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-plugin.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-plugin"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"carousel-spacing": {
			name: "carousel-spacing",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/carousel-spacing.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/carousel-spacing"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"checkbox-demo": {
			name: "checkbox-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/checkbox-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/checkbox-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"checkbox-disabled": {
			name: "checkbox-disabled",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/checkbox-disabled.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/checkbox-disabled"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"checkbox-with-text": {
			name: "checkbox-with-text",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/checkbox-with-text.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/checkbox-with-text"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"collapsible-demo": {
			name: "collapsible-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/collapsible-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/collapsible-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"combobox-demo": {
			name: "combobox-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/combobox-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/combobox-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"command-demo": {
			name: "command-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/command-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/command-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"command-dialog": {
			name: "command-dialog",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/command-dialog.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/command-dialog"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"context-menu-demo": {
			name: "context-menu-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/context-menu-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/context-menu-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"data-table-demo": {
			name: "data-table-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/data-table-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/data-table-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"date-picker-demo": {
			name: "date-picker-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/date-picker-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/date-picker-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"date-picker-with-range-demo": {
			name: "date-picker-with-range-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/date-picker-with-range-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/date-picker-with-range-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"dialog-demo": {
			name: "dialog-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/dialog-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/dialog-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"drawer-demo": {
			name: "drawer-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/drawer-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/drawer-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"drawer-side-demo": {
			name: "drawer-side-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/drawer-side-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/drawer-side-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"dropdown-menu-demo": {
			name: "dropdown-menu-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/dropdown-menu-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/dropdown-menu-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"dropdown-menu-checkboxes": {
			name: "dropdown-menu-checkboxes",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/dropdown-menu-checkboxes.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/dropdown-menu-checkboxes"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"dropdown-menu-radio-group": {
			name: "dropdown-menu-radio-group",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/dropdown-menu-radio-group.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/dropdown-menu-radio-group"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"hover-card-demo": {
			name: "hover-card-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/hover-card-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/hover-card-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"menubar-demo": {
			name: "menubar-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/menubar-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/menubar-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"mode-toggle": {
			name: "mode-toggle",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/mode-toggle.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/mode-toggle"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"navigation-menu-demo": {
			name: "navigation-menu-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/navigation-menu-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/navigation-menu-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"number-field-demo": {
			name: "number-field-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/number-field-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/number-field-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"number-field-disabled-demo": {
			name: "number-field-disabled-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/number-field-disabled-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/number-field-disabled-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"number-field-with-error-demo": {
			name: "number-field-with-error-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/number-field-with-error-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/number-field-with-error-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"otp-field-demo": {
			name: "otp-field-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/otp-field-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/otp-field-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"otp-field-with-pattern-demo": {
			name: "otp-field-with-pattern-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/otp-field-with-pattern-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/otp-field-with-pattern-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"otp-field-with-controlled-demo": {
			name: "otp-field-with-controlled-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/otp-field-with-controlled-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/otp-field-with-controlled-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"popover-demo": {
			name: "popover-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/popover-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/popover-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"pagination-demo": {
			name: "pagination-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/pagination-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/pagination-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"progress-demo": {
			name: "progress-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/progress-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/progress-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"radio-group-demo": {
			name: "radio-group-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/radio-group-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/radio-group-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"resizable-demo": {
			name: "resizable-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/resizable-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/resizable-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"resizable-vertical-demo": {
			name: "resizable-vertical-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/resizable-vertical-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/resizable-vertical-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"resizable-with-handle-demo": {
			name: "resizable-with-handle-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/resizable-with-handle-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/resizable-with-handle-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"select-demo": {
			name: "select-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/select-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/select-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"separator-demo": {
			name: "separator-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/separator-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/separator-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"skeleton-demo": {
			name: "skeleton-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/skeleton-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/skeleton-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"sonner-demo": {
			name: "sonner-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/sonner-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/sonner-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"switch-demo": {
			name: "switch-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/switch-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/switch-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"table-demo": {
			name: "table-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/table-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/table-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"tabs-demo": {
			name: "tabs-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/tabs-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/tabs-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"tabs-orientation-demo": {
			name: "tabs-orientation-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/tabs-orientation-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/tabs-orientation-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-demo": {
			name: "textarea-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-disabled": {
			name: "textarea-disabled",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-disabled.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-disabled"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-with-button": {
			name: "textarea-with-button",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-with-button.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-with-button"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-with-label": {
			name: "textarea-with-label",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-with-label.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-with-label"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textarea-with-text": {
			name: "textarea-with-text",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textarea-with-text.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textarea-with-text"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-demo": {
			name: "textfield-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-disabled": {
			name: "textfield-disabled",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-disabled.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-disabled"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-file": {
			name: "textfield-file",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-file.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-file"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-with-button": {
			name: "textfield-with-button",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-with-button.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-with-button"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-with-label": {
			name: "textfield-with-label",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-with-label.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-with-label"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-with-text": {
			name: "textfield-with-text",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-with-text.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-with-text"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"textfield-with-error": {
			name: "textfield-with-error",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/textfield-with-error.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/textfield-with-error"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toast-demo": {
			name: "toast-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toast-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toast-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toast-destructive": {
			name: "toast-destructive",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toast-destructive.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toast-destructive"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-demo": {
			name: "toggle-group-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-outline-demo": {
			name: "toggle-group-outline-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-outline-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-outline-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-single-demo": {
			name: "toggle-group-single-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-single-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-single-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-small-demo": {
			name: "toggle-group-small-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-small-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-small-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-large-demo": {
			name: "toggle-group-large-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-large-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-large-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-group-disabled-demo": {
			name: "toggle-group-disabled-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-group-disabled-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-group-disabled-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-demo": {
			name: "toggle-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-disabled": {
			name: "toggle-disabled",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-disabled.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-disabled"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-large": {
			name: "toggle-large",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-large.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-large"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-outline": {
			name: "toggle-outline",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-outline.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-outline"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-small": {
			name: "toggle-small",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-small.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-small"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"toggle-with-text": {
			name: "toggle-with-text",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/toggle-with-text.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/toggle-with-text"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"tooltip-demo": {
			name: "tooltip-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/tooltip-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/tooltip-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"demo-sidebar": {
			name: "demo-sidebar",
			description: "",
			type: "registry:block",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/blocks/demo-sidebar.tsx",
				type: "registry:block",
				target: "",
				content: "import { For } from \"solid-js\"\r\n\r\nimport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarGroup,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarProvider,\r\n  SidebarTrigger,\r\n} from \"../ui/sidebar\"\r\n\r\nconst items = [\r\n  {\r\n    title: \"Home\",\r\n    url: \"#\",\r\n    icon: () => (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        class=\"size-4\"\r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <g\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n        >\r\n          <path d=\"M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8\" />\r\n          <path d=\"M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\" />\r\n        </g>\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Inbox\",\r\n    url: \"#\",\r\n    icon: () => (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        class=\"size-4\"\r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <g\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n        >\r\n          <path d=\"M22 12h-6l-2 3h-4l-2-3H2\" />\r\n          <path d=\"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11\" />\r\n        </g>\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Calendar\",\r\n    url: \"#\",\r\n    icon: () => (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        class=\"size-4\"\r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <g\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n        >\r\n          <path d=\"M8 2v4m8-4v4\" />\r\n          <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" />\r\n          <path d=\"M3 10h18\" />\r\n        </g>\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Search\",\r\n    url: \"#\",\r\n    icon: () => (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        class=\"size-4\"\r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <g\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n        >\r\n          <circle cx=\"11\" cy=\"11\" r=\"8\" />\r\n          <path d=\"m21 21l-4.3-4.3\" />\r\n        </g>\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Settings\",\r\n    url: \"#\",\r\n    icon: () => (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        class=\"size-4\"\r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <g\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n        >\r\n          <path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n        </g>\r\n      </svg>\r\n    ),\r\n  },\r\n]\r\n\r\nconst AppSidebar = () => {\r\n  return (\r\n    <SidebarProvider>\r\n      <Sidebar>\r\n        <SidebarContent>\r\n          <SidebarGroup>\r\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\r\n            <SidebarGroupContent>\r\n              <SidebarMenu>\r\n                <For each={items}>\r\n                  {(item) => (\r\n                    <SidebarMenuItem>\r\n                      <SidebarMenuButton as=\"a\" href={item.url}>\r\n                        <item.icon />\r\n                        <span>{item.title}</span>\r\n                      </SidebarMenuButton>\r\n                    </SidebarMenuItem>\r\n                  )}\r\n                </For>\r\n              </SidebarMenu>\r\n            </SidebarGroupContent>\r\n          </SidebarGroup>\r\n        </SidebarContent>\r\n      </Sidebar>\r\n      <SidebarInset>\r\n        <header class=\"flex h-12 items-center justify-between px-4\">\r\n          <SidebarTrigger />\r\n        </header>\r\n      </SidebarInset>\r\n    </SidebarProvider>\r\n  )\r\n}\r\n\r\nexport default AppSidebar\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/blocks/demo-sidebar"), { lazy: true }),
			source: "src/__registry__/tailwindcss/blocks/demo-sidebar.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-demo": {
			name: "chart-tooltip-demo",
			description: "",
			type: "registry:example",
			registryDependencies: undefined,
			files: [{
				path: "src/registry/tailwindcss/examples/chart-tooltip-demo.tsx",
				type: "registry:example",
				target: "",
				content: ""
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/examples/chart-tooltip-demo"), { lazy: true }),
			source: "",
			category: "",
			subcategory: ""
		}, 
		"sidebar-01": {
			name: "sidebar-01",
			description: "A sidebar that collapses to icons.",
			type: "registry:block",
			registryDependencies: ["sidebar","separator","collapsible","dropdown-menu"],
			files: [{
				path: "src/registry/tailwindcss/blocks/sidebar-01/index.tsx",
				type: "registry:page",
				target: "src/routes/dashboard.tsx",
				content: "import AppSidebar from \"@/components/app-sidebar\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\nimport {\r\n  SidebarInset,\r\n  SidebarProvider,\r\n  SidebarTrigger,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst Page = () => {\r\n  return (\r\n    <SidebarProvider>\r\n      <AppSidebar />\r\n      <SidebarInset>\r\n        <header class=\"flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12\">\r\n          <div class=\"flex items-center gap-2 px-4\">\r\n            <SidebarTrigger class=\"-ml-1\" />\r\n            <Separator orientation=\"vertical\" class=\"mr-2 h-4\" />\r\n          </div>\r\n        </header>\r\n        <div class=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\r\n          <div class=\"grid auto-rows-min gap-4 md:grid-cols-3\">\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n          </div>\r\n          <div class=\"bg-muted/50 min-h-[100vh] flex-1 rounded-xl md:min-h-min\" />\r\n        </div>\r\n      </SidebarInset>\r\n    </SidebarProvider>\r\n  )\r\n}\r\n\r\nexport default Page\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/app-sidebar.tsx",
				type: "registry:component",
				target: "src/components/app-sidebar.tsx",
				content: "import type { ComponentProps } from \"solid-js\"\r\n\r\nimport NavMain from \"@/components/nav-main\"\r\nimport NavProjects from \"@/components/nav-projects\"\r\nimport NavUser from \"@/components/nav-user\"\r\nimport TeamSwitcher from \"@/components/team-switcher\"\r\nimport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarHeader,\r\n  SidebarRail,\r\n} from \"@/components/ui/sidebar\"\r\n\r\n// This is sample data.\r\nconst data = {\r\n  user: {\r\n    name: \"shadcn\",\r\n    email: \"m@example.com\",\r\n    avatar: \"/avatars/shadcn.jpg\",\r\n  },\r\n  teams: [\r\n    {\r\n      name: \"Acme Inc\",\r\n      logo: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4 shrink-0\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M7 2h10M5 6h14\" />\r\n            <rect width=\"18\" height=\"12\" x=\"3\" y=\"10\" rx=\"2\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n      plan: \"Enterprise\",\r\n    },\r\n    {\r\n      name: \"Acme Corp.\",\r\n      logo: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4 shrink-0\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2\"\r\n          />\r\n        </svg>\r\n      ),\r\n      plan: \"Startup\",\r\n    },\r\n    {\r\n      name: \"Evil Corp.\",\r\n      logo: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4 shrink-0\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3\"\r\n          />\r\n        </svg>\r\n      ),\r\n      plan: \"Free\",\r\n    },\r\n  ],\r\n  navMain: [\r\n    {\r\n      title: \"Playground\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"m7 11l2-2l-2-2m4 6h4\" />\r\n            <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n      isActive: true,\r\n      items: [\r\n        {\r\n          title: \"History\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Starred\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Settings\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Models\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M12 8V4H8\" />\r\n            <rect width=\"16\" height=\"12\" x=\"4\" y=\"8\" rx=\"2\" />\r\n            <path d=\"M2 14h2m16 0h2m-7-1v2m-6-2v2\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n      items: [\r\n        {\r\n          title: \"Genesis\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Explorer\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Quantum\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Documentation\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M12 7v14m-9-3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4a4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3a3 3 0 0 0-3-3z\"\r\n          />\r\n        </svg>\r\n      ),\r\n      items: [\r\n        {\r\n          title: \"Introduction\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Get Started\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Tutorials\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Changelog\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Settings\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M20 7h-9m3 10H5\" />\r\n            <circle cx=\"17\" cy=\"17\" r=\"3\" />\r\n            <circle cx=\"7\" cy=\"7\" r=\"3\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n      items: [\r\n        {\r\n          title: \"General\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Team\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Billing\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Limits\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  projects: [\r\n    {\r\n      name: \"Design Engineering\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M22 6H2m20 12H2M6 2v20M18 2v20\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Sales & Marketing\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z\" />\r\n            <path d=\"M21.21 15.89A10 10 0 1 1 8 2.83\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Travel\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0zm.894.211v15M9 3.236v15\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n  ],\r\n}\r\n\r\nconst AppSidebar = (props: ComponentProps<typeof Sidebar>) => {\r\n  return (\r\n    <Sidebar collapsible=\"icon\" {...props}>\r\n      <SidebarHeader>\r\n        <TeamSwitcher teams={data.teams} />\r\n      </SidebarHeader>\r\n      <SidebarContent>\r\n        <NavMain items={data.navMain} />\r\n        <NavProjects projects={data.projects} />\r\n      </SidebarContent>\r\n      <SidebarFooter>\r\n        <NavUser user={data.user} />\r\n      </SidebarFooter>\r\n      <SidebarRail />\r\n    </Sidebar>\r\n  )\r\n}\r\n\r\nexport default AppSidebar\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/nav-main.tsx",
				type: "registry:component",
				target: "src/components/nav-main.tsx",
				content: "import { For, Show, type Accessor, type JSX } from \"solid-js\"\r\nimport type {\r\n  CollapsibleRootProps,\r\n  CollapsibleTriggerProps,\r\n} from \"@kobalte/core/collapsible\"\r\n\r\nimport {\r\n  Collapsible,\r\n  CollapsibleContent,\r\n  CollapsibleTrigger,\r\n} from \"@/components/ui/collapsible\"\r\nimport {\r\n  SidebarGroup,\r\n  SidebarGroupLabel,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst NavMain = (props: {\r\n  items: {\r\n    title: string\r\n    url: string\r\n    icon?: Accessor<JSX.Element>\r\n    isActive?: boolean\r\n    items?: {\r\n      title: string\r\n      url: string\r\n    }[]\r\n  }[]\r\n}) => {\r\n  return (\r\n    <SidebarGroup>\r\n      <SidebarGroupLabel>Platform</SidebarGroupLabel>\r\n      <SidebarMenu>\r\n        <For each={props.items}>\r\n          {(item) => (\r\n            <Collapsible\r\n              defaultOpen={item.isActive}\r\n              as={(props: CollapsibleRootProps) => (\r\n                <SidebarMenuItem {...props}>\r\n                  <CollapsibleTrigger\r\n                    as={(props: CollapsibleTriggerProps) => (\r\n                      // @ts-expect-error\r\n                      <SidebarMenuButton\r\n                        {...props}\r\n                        tooltip={item.title}\r\n                        class=\"[&>svg:last-of-type]:data-[expanded]:rotate-90\"\r\n                      >\r\n                        <Show when={item.icon!()}>{item.icon!()}</Show>\r\n                        <span>{item.title}</span>\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          class=\"ml-auto transition-transform duration-200\"\r\n                          viewBox=\"0 0 24 24\"\r\n                        >\r\n                          <path\r\n                            fill=\"none\"\r\n                            stroke=\"currentColor\"\r\n                            stroke-linecap=\"round\"\r\n                            stroke-linejoin=\"round\"\r\n                            stroke-width=\"2\"\r\n                            d=\"m9 18l6-6l-6-6\"\r\n                          />\r\n                        </svg>\r\n                      </SidebarMenuButton>\r\n                    )}\r\n                  />\r\n                  <CollapsibleContent>\r\n                    <SidebarMenuSub>\r\n                      <For each={item.items}>\r\n                        {(subItem) => (\r\n                          <SidebarMenuSubItem>\r\n                            <SidebarMenuSubButton as=\"a\" href={subItem.url}>\r\n                              <span>{subItem.title}</span>\r\n                            </SidebarMenuSubButton>\r\n                          </SidebarMenuSubItem>\r\n                        )}\r\n                      </For>\r\n                    </SidebarMenuSub>\r\n                  </CollapsibleContent>\r\n                </SidebarMenuItem>\r\n              )}\r\n            />\r\n          )}\r\n        </For>\r\n      </SidebarMenu>\r\n    </SidebarGroup>\r\n  )\r\n}\r\n\r\nexport default NavMain\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/nav-projects.tsx",
				type: "registry:component",
				target: "src/components/nav-projects.tsx",
				content: "import { For, type Accessor, type JSX } from \"solid-js\"\r\nimport type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport {\r\n  SidebarGroup,\r\n  SidebarGroupLabel,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  useSideBar,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst NavProjects = (props: {\r\n  projects: {\r\n    name: string\r\n    url: string\r\n    icon: Accessor<JSX.Element>\r\n  }[]\r\n}) => {\r\n  const { isMobile } = useSideBar()\r\n\r\n  return (\r\n    <SidebarGroup class=\"group-data-[collapsible=icon]:hidden\">\r\n      <SidebarGroupLabel>Projects</SidebarGroupLabel>\r\n      <SidebarMenu>\r\n        <For each={props.projects}>\r\n          {(item) => (\r\n            <SidebarMenuItem>\r\n              <SidebarMenuButton as=\"a\" href={item.url}>\r\n                <item.icon />\r\n                <span>{item.name}</span>\r\n              </SidebarMenuButton>\r\n              <DropdownMenu\r\n                placement={isMobile() ? \"bottom-end\" : \"right-start\"}\r\n              >\r\n                <DropdownMenuTrigger\r\n                  as={(props: DropdownMenuTriggerProps) => (\r\n                    // @ts-expect-error\r\n                    <SidebarMenuAction {...props} showOnHover>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"size-4\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <g\r\n                          fill=\"none\"\r\n                          stroke=\"currentColor\"\r\n                          stroke-linecap=\"round\"\r\n                          stroke-linejoin=\"round\"\r\n                          stroke-width=\"2\"\r\n                        >\r\n                          <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n                          <circle cx=\"19\" cy=\"12\" r=\"1\" />\r\n                          <circle cx=\"5\" cy=\"12\" r=\"1\" />\r\n                        </g>\r\n                      </svg>\r\n                      <span class=\"sr-only\">More</span>\r\n                    </SidebarMenuAction>\r\n                  )}\r\n                />\r\n                <DropdownMenuContent class=\"w-48 rounded-lg\">\r\n                  <DropdownMenuItem>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      class=\"text-muted-foreground size-4\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                        stroke-width=\"2\"\r\n                        d=\"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z\"\r\n                      />\r\n                    </svg>\r\n                    <span>View Project</span>\r\n                  </DropdownMenuItem>\r\n                  <DropdownMenuItem>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      class=\"text-muted-foreground size-4\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <g\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                        stroke-width=\"2\"\r\n                      >\r\n                        <path d=\"m15 17l5-5l-5-5\" />\r\n                        <path d=\"M4 18v-2a4 4 0 0 1 4-4h12\" />\r\n                      </g>\r\n                    </svg>\r\n                    <span>Share Project</span>\r\n                  </DropdownMenuItem>\r\n                  <DropdownMenuSeparator />\r\n                  <DropdownMenuItem>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      class=\"text-muted-foreground size-4\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                        stroke-width=\"2\"\r\n                        d=\"M3 6h18m-2 0v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2m-6 5v6m4-6v6\"\r\n                      />\r\n                    </svg>\r\n                    <span>Delete Project</span>\r\n                  </DropdownMenuItem>\r\n                </DropdownMenuContent>\r\n              </DropdownMenu>\r\n            </SidebarMenuItem>\r\n          )}\r\n        </For>\r\n        <SidebarMenuItem>\r\n          <SidebarMenuButton class=\"text-sidebar-foreground/70\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              class=\"text-sidebar-foreground/70 size-4\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <g\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                stroke-width=\"2\"\r\n              >\r\n                <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n                <circle cx=\"19\" cy=\"12\" r=\"1\" />\r\n                <circle cx=\"5\" cy=\"12\" r=\"1\" />\r\n              </g>\r\n            </svg>\r\n            <span>More</span>\r\n          </SidebarMenuButton>\r\n        </SidebarMenuItem>\r\n      </SidebarMenu>\r\n    </SidebarGroup>\r\n  )\r\n}\r\n\r\nexport default NavProjects\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/nav-user.tsx",
				type: "registry:component",
				target: "src/components/nav-user.tsx",
				content: "import type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\r\nimport { Image } from \"@kobalte/core/image\"\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuGroupLabel,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport {\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  useSideBar,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst NavUser = (props: {\r\n  user: {\r\n    name: string\r\n    email: string\r\n    avatar: string\r\n  }\r\n}) => {\r\n  const { isMobile } = useSideBar()\r\n\r\n  return (\r\n    <SidebarMenu>\r\n      <SidebarMenuItem>\r\n        <DropdownMenu placement={isMobile() ? \"bottom-end\" : \"right-end\"}>\r\n          <DropdownMenuTrigger\r\n            as={(triggerProps: DropdownMenuTriggerProps) => (\r\n              // @ts-expect-error\r\n              <SidebarMenuButton\r\n                {...triggerProps}\r\n                size=\"lg\"\r\n                class=\"data-[expanded]:bg-sidebar-accent data-[expanded]:text-sidebar-accent-foreground\"\r\n              >\r\n                <Image class=\"relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg\">\r\n                  <Image.Img\r\n                    class=\"aspect-square h-full w-full\"\r\n                    src={props.user.avatar}\r\n                    alt={props.user.name}\r\n                  />\r\n                  <Image.Fallback class=\"bg-muted flex h-full w-full items-center justify-center rounded-lg\">\r\n                    CN\r\n                  </Image.Fallback>\r\n                </Image>\r\n                <div class=\"grid flex-1 text-left text-sm leading-tight\">\r\n                  <span class=\"truncate font-semibold\">{props.user.name}</span>\r\n                  <span class=\"truncate text-xs\">{props.user.email}</span>\r\n                </div>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"ml-auto size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"m7 15l5 5l5-5M7 9l5-5l5 5\"\r\n                  />\r\n                </svg>\r\n              </SidebarMenuButton>\r\n            )}\r\n          />\r\n          <DropdownMenuContent class=\"w-[--kb-popper-anchor-width] min-w-56 rounded-lg\">\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuGroupLabel class=\"p-0 font-normal\">\r\n                <div class=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\r\n                  <Image class=\"relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg\">\r\n                    <Image.Img\r\n                      class=\"aspect-square h-full w-full\"\r\n                      src={props.user.avatar}\r\n                      alt={props.user.name}\r\n                    />\r\n                    <Image.Fallback class=\"bg-muted flex h-full w-full items-center justify-center rounded-lg\">\r\n                      CN\r\n                    </Image.Fallback>\r\n                  </Image>\r\n                  <div class=\"grid flex-1 text-left text-sm leading-tight\">\r\n                    <span class=\"truncate font-semibold\">\r\n                      {props.user.name}\r\n                    </span>\r\n                    <span class=\"truncate text-xs\">{props.user.email}</span>\r\n                  </div>\r\n                </div>\r\n              </DropdownMenuGroupLabel>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuItem>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0zM20 3v4m2-2h-4M4 17v2m1-1H3\"\r\n                  />\r\n                </svg>\r\n                Upgrade to Pro\r\n              </DropdownMenuItem>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuItem>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <g\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                  >\r\n                    <path d=\"M3.85 8.62a4 4 0 0 1 4.78-4.77a4 4 0 0 1 6.74 0a4 4 0 0 1 4.78 4.78a4 4 0 0 1 0 6.74a4 4 0 0 1-4.77 4.78a4 4 0 0 1-6.75 0a4 4 0 0 1-4.78-4.77a4 4 0 0 1 0-6.76\" />\r\n                    <path d=\"m9 12l2 2l4-4\" />\r\n                  </g>\r\n                </svg>\r\n                Account\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <g\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                  >\r\n                    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\r\n                    <path d=\"M2 10h20\" />\r\n                  </g>\r\n                </svg>\r\n                Billing\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9m4.3 13a1.94 1.94 0 0 0 3.4 0\"\r\n                  />\r\n                </svg>\r\n                Notifications\r\n              </DropdownMenuItem>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                  d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4m7 14l5-5l-5-5m5 5H9\"\r\n                />\r\n              </svg>\r\n              Log out\r\n            </DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </SidebarMenuItem>\r\n    </SidebarMenu>\r\n  )\r\n}\r\n\r\nexport default NavUser\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-01/components/team-switcher.tsx",
				type: "registry:component",
				target: "src/components/team-switcher.tsx",
				content: "import { For, createSignal, type Accessor, type JSX } from \"solid-js\"\r\nimport type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuGroupLabel,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuShortcut,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport {\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  useSideBar,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst TeamSwitcher = (props: {\r\n  teams: {\r\n    name: string\r\n    logo: Accessor<JSX.Element>\r\n    plan: string\r\n  }[]\r\n}) => {\r\n  // eslint-disable-next-line solid/reactivity\r\n  const [activeTeam, setActiveTeam] = createSignal(props.teams[0])\r\n  const { isMobile } = useSideBar()\r\n\r\n  return (\r\n    <SidebarMenu>\r\n      <SidebarMenuItem>\r\n        <DropdownMenu\r\n          placement={isMobile() ? \"bottom-end\" : \"right-start\"}\r\n          sameWidth\r\n        >\r\n          <DropdownMenuTrigger\r\n            as={(props: DropdownMenuTriggerProps) => (\r\n              // @ts-expect-error\r\n              <SidebarMenuButton\r\n                {...props}\r\n                size=\"lg\"\r\n                class=\"data-[expanded]:bg-sidebar-accent data-[expanded]:text-sidebar-accent-foreground\"\r\n              >\r\n                <div class=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\r\n                  {activeTeam().logo()}\r\n                </div>\r\n                <div class=\"grid flex-1 text-left text-sm leading-tight\">\r\n                  <span class=\"truncate font-semibold\">\r\n                    {activeTeam().name}\r\n                  </span>\r\n                  <span class=\"truncate text-xs\">{activeTeam().plan}</span>\r\n                </div>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"ml-auto size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"m7 15l5 5l5-5M7 9l5-5l5 5\"\r\n                  />\r\n                </svg>\r\n              </SidebarMenuButton>\r\n            )}\r\n          />\r\n          <DropdownMenuContent class=\"w-[--kb-popper-anchor-width] min-w-56 rounded-lg\">\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuGroupLabel class=\"text-muted-foreground text-xs\">\r\n                Teams\r\n              </DropdownMenuGroupLabel>\r\n              <For each={props.teams}>\r\n                {(team, index) => (\r\n                  <DropdownMenuItem\r\n                    onClick={() => setActiveTeam(team)}\r\n                    class=\"gap-2 p-2\"\r\n                  >\r\n                    <div class=\"flex size-6 items-center justify-center rounded-sm border\">\r\n                      {team.logo()}\r\n                    </div>\r\n                    {team.name}\r\n                    <DropdownMenuShortcut>⌘{index() + 1}</DropdownMenuShortcut>\r\n                  </DropdownMenuItem>\r\n                )}\r\n              </For>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem class=\"gap-2 p-2\">\r\n              <div class=\"bg-background flex size-6 items-center justify-center rounded-md border\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"M5 12h14m-7-7v14\"\r\n                  />\r\n                </svg>\r\n              </div>\r\n              <div class=\"text-muted-foreground font-medium\">Add team</div>\r\n            </DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </SidebarMenuItem>\r\n    </SidebarMenu>\r\n  )\r\n}\r\n\r\nexport default TeamSwitcher\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/blocks/sidebar-01/index"), { lazy: true }),
			source: "src/__registry__/tailwindcss/blocks/sidebar-01/index.tsx",
			category: "",
			subcategory: ""
		}, 
		"sidebar-02": {
			name: "sidebar-02",
			description: "A floating sidebar with submenus.",
			type: "registry:block",
			registryDependencies: ["sidebar"],
			files: [{
				path: "src/registry/tailwindcss/blocks/sidebar-02/index.tsx",
				type: "registry:page",
				target: "src/routes/dashboard.tsx",
				content: "import AppSidebar from \"@/components/app-sidebar\"\r\nimport {\r\n  SidebarInset,\r\n  SidebarProvider,\r\n  SidebarTrigger,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst Page = () => {\r\n  return (\r\n    <SidebarProvider\r\n      style={{\r\n        \"--sidebar-width\": \"19rem\",\r\n      }}\r\n    >\r\n      <AppSidebar />\r\n      <SidebarInset>\r\n        <header class=\"flex h-16 shrink-0 items-center gap-2 px-4\">\r\n          <SidebarTrigger class=\"-ml-1\" />\r\n        </header>\r\n        <div class=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\r\n          <div class=\"grid auto-rows-min gap-4 md:grid-cols-3\">\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n          </div>\r\n          <div class=\"bg-muted/50 min-h-[100vh] flex-1 rounded-xl md:min-h-min\" />\r\n        </div>\r\n      </SidebarInset>\r\n    </SidebarProvider>\r\n  )\r\n}\r\n\r\nexport default Page\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-02/components/app-sidebar.tsx",
				type: "registry:component",
				target: "src/components/app-sidebar.tsx",
				content: "import { For, Show, type ComponentProps } from \"solid-js\"\r\n\r\nimport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarGroup,\r\n  SidebarHeader,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n} from \"@/components/ui/sidebar\"\r\n\r\n// This is sample data.\r\nconst data = {\r\n  navMain: [\r\n    {\r\n      title: \"Getting Started\",\r\n      url: \"#\",\r\n      items: [\r\n        {\r\n          title: \"Installation\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Project Structure\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Building Your Application\",\r\n      url: \"#\",\r\n      items: [\r\n        {\r\n          title: \"Routing\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Data Fetching\",\r\n          url: \"#\",\r\n          isActive: true,\r\n        },\r\n        {\r\n          title: \"Rendering\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Caching\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Styling\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Optimizing\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Configuring\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Testing\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Authentication\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Deploying\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Upgrading\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Examples\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"API Reference\",\r\n      url: \"#\",\r\n      items: [\r\n        {\r\n          title: \"Components\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"File Conventions\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Functions\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"next.config.js Options\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"CLI\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Edge Runtime\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Architecture\",\r\n      url: \"#\",\r\n      items: [\r\n        {\r\n          title: \"Accessibility\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Fast Refresh\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Next.js Compiler\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Supported Browsers\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Turbopack\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Community\",\r\n      url: \"#\",\r\n      items: [\r\n        {\r\n          title: \"Contribution Guide\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n}\r\n\r\nconst AppSidebar = (props: ComponentProps<typeof Sidebar>) => {\r\n  return (\r\n    <Sidebar variant=\"floating\" {...props}>\r\n      <SidebarHeader>\r\n        <SidebarMenu>\r\n          <SidebarMenuItem>\r\n            <SidebarMenuButton size=\"lg\" as=\"a\" href=\"#\">\r\n              <div class=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <g\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                  >\r\n                    <path d=\"M7 2h10M5 6h14\" />\r\n                    <rect width=\"18\" height=\"12\" x=\"3\" y=\"10\" rx=\"2\" />\r\n                  </g>\r\n                </svg>\r\n              </div>\r\n              <div class=\"flex flex-col gap-0.5 leading-none\">\r\n                <span class=\"font-semibold\">Documentation</span>\r\n                <span class=\"\">v1.0.0</span>\r\n              </div>\r\n            </SidebarMenuButton>\r\n          </SidebarMenuItem>\r\n        </SidebarMenu>\r\n      </SidebarHeader>\r\n      <SidebarContent>\r\n        <SidebarGroup>\r\n          <SidebarMenu class=\"gap-2\">\r\n            <For each={data.navMain}>\r\n              {(item) => (\r\n                <>\r\n                  <SidebarMenuButton as=\"a\" href={item.url} class=\"font-medium\">\r\n                    {item.title}\r\n                  </SidebarMenuButton>\r\n                  <Show when={item.items.length}>\r\n                    <SidebarMenuSub class=\"ml-0 border-l-0 px-1.5\">\r\n                      <For each={item.items}>\r\n                        {(item) => (\r\n                          <SidebarMenuSubItem>\r\n                            <SidebarMenuSubButton\r\n                              isActive={item.isActive}\r\n                              as=\"a\"\r\n                              href={item.url}\r\n                            >\r\n                              {item.title}\r\n                            </SidebarMenuSubButton>\r\n                          </SidebarMenuSubItem>\r\n                        )}\r\n                      </For>\r\n                    </SidebarMenuSub>\r\n                  </Show>\r\n                </>\r\n              )}\r\n            </For>\r\n          </SidebarMenu>\r\n        </SidebarGroup>\r\n      </SidebarContent>\r\n    </Sidebar>\r\n  )\r\n}\r\n\r\nexport default AppSidebar\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/blocks/sidebar-02/index"), { lazy: true }),
			source: "src/__registry__/tailwindcss/blocks/sidebar-02/index.tsx",
			category: "",
			subcategory: ""
		}, 
		"sidebar-03": {
			name: "sidebar-03",
			description: "An inset sidebar with secondary navigation.",
			type: "registry:block",
			registryDependencies: ["sidebar","collapsible","dropdown-menu"],
			files: [{
				path: "src/registry/tailwindcss/blocks/sidebar-03/index.tsx",
				type: "registry:page",
				target: "src/routes/dashboard.tsx",
				content: "import AppSidebar from \"@/components/app-sidebar\"\r\nimport {\r\n  SidebarInset,\r\n  SidebarProvider,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst Page = () => {\r\n  return (\r\n    <SidebarProvider>\r\n      <AppSidebar />\r\n      <SidebarInset>\r\n        <header class=\"flex h-16 shrink-0 items-center gap-2\">\r\n          <div class=\"flex items-center gap-2 px-4\">\r\n            <SidebarTrigger class=\"-ml-1\" />\r\n            <SidebarSeparator orientation=\"vertical\" class=\"mr-2 h-4\" />\r\n          </div>\r\n        </header>\r\n        <div class=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\r\n          <div class=\"grid auto-rows-min gap-4 md:grid-cols-3\">\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n            <div class=\"bg-muted/50 aspect-video rounded-xl\" />\r\n          </div>\r\n          <div class=\"bg-muted/50 min-h-[100vh] flex-1 rounded-xl md:min-h-min\" />\r\n        </div>\r\n      </SidebarInset>\r\n    </SidebarProvider>\r\n  )\r\n}\r\n\r\nexport default Page\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/app-sidebar.tsx",
				type: "registry:component",
				target: "src/components/app-sidebar.tsx",
				content: "import type { ComponentProps } from \"solid-js\"\r\n\r\nimport NavMain from \"@/components/nav-main\"\r\nimport NavProjects from \"@/components/nav-projects\"\r\nimport NavSecondary from \"@/components/nav-secondary\"\r\nimport NavUser from \"@/components/nav-user\"\r\nimport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarHeader,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n} from \"@/components/ui/sidebar\"\r\n\r\n// This is sample data.\r\nconst data = {\r\n  user: {\r\n    name: \"shadcn\",\r\n    email: \"m@example.com\",\r\n    avatar: \"https://ui.shadcn.com/avatars/shadcn.jpg\",\r\n  },\r\n  navMain: [\r\n    {\r\n      title: \"Playground\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"m7 11l2-2l-2-2m4 6h4\" />\r\n            <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n      isActive: true,\r\n      items: [\r\n        {\r\n          title: \"History\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Starred\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Settings\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Models\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M12 8V4H8\" />\r\n            <rect width=\"16\" height=\"12\" x=\"4\" y=\"8\" rx=\"2\" />\r\n            <path d=\"M2 14h2m16 0h2m-7-1v2m-6-2v2\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n      items: [\r\n        {\r\n          title: \"Genesis\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Explorer\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Quantum\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Documentation\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M12 7v14m-9-3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4a4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3a3 3 0 0 0-3-3z\"\r\n          />\r\n        </svg>\r\n      ),\r\n      items: [\r\n        {\r\n          title: \"Introduction\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Get Started\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Tutorials\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Changelog\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Settings\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M20 7h-9m3 10H5\" />\r\n            <circle cx=\"17\" cy=\"17\" r=\"3\" />\r\n            <circle cx=\"7\" cy=\"7\" r=\"3\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n      items: [\r\n        {\r\n          title: \"General\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Team\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Billing\",\r\n          url: \"#\",\r\n        },\r\n        {\r\n          title: \"Limits\",\r\n          url: \"#\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  navSecondary: [\r\n    {\r\n      title: \"Support\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n            <path d=\"m4.93 4.93l4.24 4.24m5.66 0l4.24-4.24m-4.24 9.9l4.24 4.24m-9.9-4.24l-4.24 4.24\" />\r\n            <circle cx=\"12\" cy=\"12\" r=\"4\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Feedback\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11zm7.318-19.539l-10.94 10.939\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n  ],\r\n  projects: [\r\n    {\r\n      name: \"Design Engineering\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M22 6H2m20 12H2M6 2v20M18 2v20\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Sales & Marketing\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z\" />\r\n            <path d=\"M21.21 15.89A10 10 0 1 1 8 2.83\" />\r\n          </g>\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Travel\",\r\n      url: \"#\",\r\n      icon: () => (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"size-4\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0zm.894.211v15M9 3.236v15\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n  ],\r\n}\r\n\r\nconst AppSidebar = (props: ComponentProps<typeof Sidebar>) => {\r\n  return (\r\n    <Sidebar variant=\"inset\" {...props}>\r\n      <SidebarHeader>\r\n        <SidebarMenu>\r\n          <SidebarMenuItem>\r\n            <SidebarMenuButton size=\"lg\" as=\"a\" href=\"#\">\r\n              <div class=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3\"\r\n                  />\r\n                </svg>\r\n              </div>\r\n              <div class=\"grid flex-1 text-left text-sm leading-tight\">\r\n                <span class=\"truncate font-semibold\">Acme Inc</span>\r\n                <span class=\"truncate text-xs\">Enterprise</span>\r\n              </div>\r\n            </SidebarMenuButton>\r\n          </SidebarMenuItem>\r\n        </SidebarMenu>\r\n      </SidebarHeader>\r\n      <SidebarContent>\r\n        <NavMain items={data.navMain} />\r\n        <NavProjects projects={data.projects} />\r\n        <NavSecondary items={data.navSecondary} class=\"mt-auto\" />\r\n      </SidebarContent>\r\n      <SidebarFooter>\r\n        <NavUser user={data.user} />\r\n      </SidebarFooter>\r\n    </Sidebar>\r\n  )\r\n}\r\n\r\nexport default AppSidebar\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/nav-main.tsx",
				type: "registry:component",
				target: "src/components/nav-main.tsx",
				content: "import { For, Show, type Accessor, type JSX } from \"solid-js\"\r\nimport type {\r\n  CollapsibleRootProps,\r\n  CollapsibleTriggerProps,\r\n} from \"@kobalte/core/collapsible\"\r\n\r\nimport {\r\n  Collapsible,\r\n  CollapsibleContent,\r\n  CollapsibleTrigger,\r\n} from \"@/components/ui/collapsible\"\r\nimport {\r\n  SidebarGroup,\r\n  SidebarGroupLabel,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst NavMain = (props: {\r\n  items: {\r\n    title: string\r\n    url: string\r\n    icon: Accessor<JSX.Element>\r\n    isActive?: boolean\r\n    items?: {\r\n      title: string\r\n      url: string\r\n    }[]\r\n  }[]\r\n}) => {\r\n  return (\r\n    <SidebarGroup>\r\n      <SidebarGroupLabel>Platform</SidebarGroupLabel>\r\n      <SidebarMenu>\r\n        <For each={props.items}>\r\n          {(item) => (\r\n            <Collapsible\r\n              defaultOpen={item.isActive}\r\n              as={(props: CollapsibleRootProps) => (\r\n                <SidebarMenuItem {...props}>\r\n                  <SidebarMenuButton\r\n                    tooltip={item.title}\r\n                    as=\"a\"\r\n                    href={item.url}\r\n                  >\r\n                    <item.icon />\r\n                    <span>{item.title}</span>\r\n                  </SidebarMenuButton>\r\n                  <Show when={item.items?.length}>\r\n                    <CollapsibleTrigger\r\n                      as={(props: CollapsibleTriggerProps) => (\r\n                        // @ts-expect-error\r\n                        <SidebarMenuAction\r\n                          {...props}\r\n                          class=\"data-[expanded]:rotate-90\"\r\n                        >\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            class=\"transition-transform duration-200\"\r\n                            viewBox=\"0 0 24 24\"\r\n                          >\r\n                            <path\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              stroke-linecap=\"round\"\r\n                              stroke-linejoin=\"round\"\r\n                              stroke-width=\"2\"\r\n                              d=\"m9 18l6-6l-6-6\"\r\n                            />\r\n                          </svg>\r\n                          <span class=\"sr-only\">Toggle</span>\r\n                        </SidebarMenuAction>\r\n                      )}\r\n                    />\r\n                    <CollapsibleContent>\r\n                      <SidebarMenuSub>\r\n                        {\r\n                          <For each={item.items}>\r\n                            {(subItem) => (\r\n                              <SidebarMenuSubItem>\r\n                                <SidebarMenuSubButton as=\"a\" href={subItem.url}>\r\n                                  <span>{subItem.title}</span>\r\n                                </SidebarMenuSubButton>\r\n                              </SidebarMenuSubItem>\r\n                            )}\r\n                          </For>\r\n                        }\r\n                      </SidebarMenuSub>\r\n                    </CollapsibleContent>\r\n                  </Show>\r\n                </SidebarMenuItem>\r\n              )}\r\n            />\r\n          )}\r\n        </For>\r\n      </SidebarMenu>\r\n    </SidebarGroup>\r\n  )\r\n}\r\n\r\nexport default NavMain\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/nav-projects.tsx",
				type: "registry:component",
				target: "src/components/nav-projects.tsx",
				content: "import { For, type Accessor, type JSX } from \"solid-js\"\r\nimport type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport {\r\n  SidebarGroup,\r\n  SidebarGroupLabel,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  useSideBar,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst NavProjects = (props: {\r\n  projects: {\r\n    name: string\r\n    url: string\r\n    icon: Accessor<JSX.Element>\r\n  }[]\r\n}) => {\r\n  const { isMobile } = useSideBar()\r\n\r\n  return (\r\n    <SidebarGroup class=\"group-data-[collapsible=icon]:hidden\">\r\n      <SidebarGroupLabel>Projects</SidebarGroupLabel>\r\n      <SidebarMenu>\r\n        <For each={props.projects}>\r\n          {(item) => (\r\n            <SidebarMenuItem>\r\n              <SidebarMenuButton as=\"a\" href={item.url}>\r\n                <item.icon />\r\n                <span>{item.name}</span>\r\n              </SidebarMenuButton>\r\n              <DropdownMenu\r\n                placement={isMobile() ? \"bottom-end\" : \"right-start\"}\r\n              >\r\n                <DropdownMenuTrigger\r\n                  as={(props: DropdownMenuTriggerProps) => (\r\n                    // @ts-expect-error\r\n                    <SidebarMenuAction showOnHover {...props}>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"size-4\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <g\r\n                          fill=\"none\"\r\n                          stroke=\"currentColor\"\r\n                          stroke-linecap=\"round\"\r\n                          stroke-linejoin=\"round\"\r\n                          stroke-width=\"2\"\r\n                        >\r\n                          <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n                          <circle cx=\"19\" cy=\"12\" r=\"1\" />\r\n                          <circle cx=\"5\" cy=\"12\" r=\"1\" />\r\n                        </g>\r\n                      </svg>\r\n                      <span class=\"sr-only\">More</span>\r\n                    </SidebarMenuAction>\r\n                  )}\r\n                />\r\n                <DropdownMenuContent class=\"w-48 rounded-lg\">\r\n                  <DropdownMenuItem>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      class=\"text-muted-foreground size-4\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                        stroke-width=\"2\"\r\n                        d=\"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z\"\r\n                      />\r\n                    </svg>\r\n                    <span>View Project</span>\r\n                  </DropdownMenuItem>\r\n                  <DropdownMenuItem>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      class=\"text-muted-foreground size-4\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <g\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                        stroke-width=\"2\"\r\n                      >\r\n                        <path d=\"m15 17l5-5l-5-5\" />\r\n                        <path d=\"M4 18v-2a4 4 0 0 1 4-4h12\" />\r\n                      </g>\r\n                    </svg>\r\n                    <span>Share Project</span>\r\n                  </DropdownMenuItem>\r\n                  <DropdownMenuSeparator />\r\n                  <DropdownMenuItem>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      class=\"text-muted-foreground size-4\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                        stroke-width=\"2\"\r\n                        d=\"M3 6h18m-2 0v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2m-6 5v6m4-6v6\"\r\n                      />\r\n                    </svg>\r\n                    <span>Delete Project</span>\r\n                  </DropdownMenuItem>\r\n                </DropdownMenuContent>\r\n              </DropdownMenu>\r\n            </SidebarMenuItem>\r\n          )}\r\n        </For>\r\n        <SidebarMenuItem>\r\n          <SidebarMenuButton class=\"text-sidebar-foreground/70\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              class=\"text-sidebar-foreground/70 size-4\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <g\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                stroke-width=\"2\"\r\n              >\r\n                <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n                <circle cx=\"19\" cy=\"12\" r=\"1\" />\r\n                <circle cx=\"5\" cy=\"12\" r=\"1\" />\r\n              </g>\r\n            </svg>\r\n            <span>More</span>\r\n          </SidebarMenuButton>\r\n        </SidebarMenuItem>\r\n      </SidebarMenu>\r\n    </SidebarGroup>\r\n  )\r\n}\r\n\r\nexport default NavProjects\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/nav-user.tsx",
				type: "registry:component",
				target: "src/components/nav-user.tsx",
				content: "import type { DropdownMenuTriggerProps } from \"@kobalte/core/dropdown-menu\"\r\nimport { Image } from \"@kobalte/core/image\"\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuGroupLabel,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport {\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  useSideBar,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst NavUser = (props: {\r\n  user: {\r\n    name: string\r\n    email: string\r\n    avatar: string\r\n  }\r\n}) => {\r\n  const { isMobile } = useSideBar()\r\n\r\n  return (\r\n    <SidebarMenu>\r\n      <SidebarMenuItem>\r\n        <DropdownMenu placement={isMobile() ? \"bottom-end\" : \"right-end\"}>\r\n          <DropdownMenuTrigger\r\n            as={(triggerProps: DropdownMenuTriggerProps) => (\r\n              // @ts-expect-error\r\n              <SidebarMenuButton\r\n                {...triggerProps}\r\n                size=\"lg\"\r\n                class=\"data-[expanded]:bg-sidebar-accent data-[expanded]:text-sidebar-accent-foreground\"\r\n              >\r\n                <Image class=\"relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg\">\r\n                  <Image.Img\r\n                    class=\"aspect-square h-full w-full\"\r\n                    src={props.user.avatar}\r\n                    alt={props.user.name}\r\n                  />\r\n                  <Image.Fallback class=\"bg-muted flex h-full w-full items-center justify-center rounded-lg\">\r\n                    CN\r\n                  </Image.Fallback>\r\n                </Image>\r\n                <div class=\"grid flex-1 text-left text-sm leading-tight\">\r\n                  <span class=\"truncate font-semibold\">{props.user.name}</span>\r\n                  <span class=\"truncate text-xs\">{props.user.email}</span>\r\n                </div>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"ml-auto size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"m7 15l5 5l5-5M7 9l5-5l5 5\"\r\n                  />\r\n                </svg>\r\n              </SidebarMenuButton>\r\n            )}\r\n          />\r\n          <DropdownMenuContent class=\"w-[--kb-popper-anchor-width] min-w-56 rounded-lg\">\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuGroupLabel class=\"p-0 font-normal\">\r\n                <div class=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\r\n                  <Image class=\"relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg\">\r\n                    <Image.Img\r\n                      class=\"aspect-square h-full w-full\"\r\n                      src={props.user.avatar}\r\n                      alt={props.user.name}\r\n                    />\r\n                    <Image.Fallback class=\"bg-muted flex h-full w-full items-center justify-center rounded-lg\">\r\n                      CN\r\n                    </Image.Fallback>\r\n                  </Image>\r\n                  <div class=\"grid flex-1 text-left text-sm leading-tight\">\r\n                    <span class=\"truncate font-semibold\">\r\n                      {props.user.name}\r\n                    </span>\r\n                    <span class=\"truncate text-xs\">{props.user.email}</span>\r\n                  </div>\r\n                </div>\r\n              </DropdownMenuGroupLabel>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuItem>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0zM20 3v4m2-2h-4M4 17v2m1-1H3\"\r\n                  />\r\n                </svg>\r\n                Upgrade to Pro\r\n              </DropdownMenuItem>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuItem>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <g\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                  >\r\n                    <path d=\"M3.85 8.62a4 4 0 0 1 4.78-4.77a4 4 0 0 1 6.74 0a4 4 0 0 1 4.78 4.78a4 4 0 0 1 0 6.74a4 4 0 0 1-4.77 4.78a4 4 0 0 1-6.75 0a4 4 0 0 1-4.78-4.77a4 4 0 0 1 0-6.76\" />\r\n                    <path d=\"m9 12l2 2l4-4\" />\r\n                  </g>\r\n                </svg>\r\n                Account\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <g\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                  >\r\n                    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\r\n                    <path d=\"M2 10h20\" />\r\n                  </g>\r\n                </svg>\r\n                Billing\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  class=\"size-4\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9m4.3 13a1.94 1.94 0 0 0 3.4 0\"\r\n                  />\r\n                </svg>\r\n                Notifications\r\n              </DropdownMenuItem>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                  d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4m7 14l5-5l-5-5m5 5H9\"\r\n                />\r\n              </svg>\r\n              Log out\r\n            </DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </SidebarMenuItem>\r\n    </SidebarMenu>\r\n  )\r\n}\r\n\r\nexport default NavUser\r\n"
			},{
				path: "src/registry/tailwindcss/blocks/sidebar-03/components/nav-secondary.tsx",
				type: "registry:component",
				target: "src/components/nav-secondary.tsx",
				content: "import {\r\n  For,\r\n  splitProps,\r\n  type Accessor,\r\n  type ComponentProps,\r\n  type JSXElement,\r\n} from \"solid-js\"\r\n\r\nimport {\r\n  SidebarGroup,\r\n  SidebarGroupContent,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n} from \"@/components/ui/sidebar\"\r\n\r\nconst NavSecondary = (\r\n  props: ComponentProps<typeof SidebarGroup> & {\r\n    items: {\r\n      title: string\r\n      url: string\r\n      icon: Accessor<JSXElement>\r\n    }[]\r\n  }\r\n) => {\r\n  const [local, rest] = splitProps(props, [\"items\"])\r\n\r\n  return (\r\n    <SidebarGroup {...rest}>\r\n      <SidebarGroupContent>\r\n        <SidebarMenu>\r\n          <For each={local.items}>\r\n            {(item) => (\r\n              <SidebarMenuItem>\r\n                <SidebarMenuButton as=\"a\" size=\"sm\" href={item.url}>\r\n                  <item.icon />\r\n                  <span>{item.title}</span>\r\n                </SidebarMenuButton>\r\n              </SidebarMenuItem>\r\n            )}\r\n          </For>\r\n        </SidebarMenu>\r\n      </SidebarGroupContent>\r\n    </SidebarGroup>\r\n  )\r\n}\r\n\r\nexport default NavSecondary\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/blocks/sidebar-03/index"), { lazy: true }),
			source: "src/__registry__/tailwindcss/blocks/sidebar-03/index.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart": {
			name: "area-chart",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { CurveType, Position } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186 },\r\n  { month: \"February\", desktop: 305 },\r\n  { month: \"March\", desktop: 237 },\r\n  { month: \"April\", desktop: 73 },\r\n  { month: \"May\", desktop: 209 },\r\n  { month: \"June\", desktop: 214 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst AreaChart = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Area Chart</CardTitle>\r\n        <CardDescription>\r\n          Showing total visitors for the last 6 months\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <VisArea<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            opacity={0.4}\r\n            curveType={CurveType.Natural}\r\n          />\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            curveType={CurveType.Natural}\r\n            lineWidth={1}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color=\"var(--color-desktop)\"\r\n            template={(props) => (\r\n              <ChartTooltipContent\r\n                labelKey=\"month\"\r\n                indicator=\"line\"\r\n                {...props}\r\n              />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              January - June 2024\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AreaChart\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-linear": {
			name: "area-chart-linear",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-linear.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { CurveType, Position } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186 },\r\n  { month: \"February\", desktop: 305 },\r\n  { month: \"March\", desktop: 237 },\r\n  { month: \"April\", desktop: 73 },\r\n  { month: \"May\", desktop: 209 },\r\n  { month: \"June\", desktop: 214 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst AreaChartLinear = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Area Chart - Linear</CardTitle>\r\n        <CardDescription>\r\n          Showing total visitors for the last 6 months\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <VisArea<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            opacity={0.4}\r\n            curveType={CurveType.Linear}\r\n          />\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            curveType={CurveType.Linear}\r\n            lineWidth={1}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color=\"var(--color-desktop)\"\r\n            template={(props) => (\r\n              <ChartTooltipContent\r\n                labelKey=\"month\"\r\n                indicator=\"dot\"\r\n                hideLabel\r\n                {...props}\r\n              />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              January - June 2024\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AreaChartLinear\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-linear"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-linear.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-step": {
			name: "area-chart-step",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-step.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { CurveType, Position } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186 },\r\n  { month: \"February\", desktop: 305 },\r\n  { month: \"March\", desktop: 237 },\r\n  { month: \"April\", desktop: 73 },\r\n  { month: \"May\", desktop: 209 },\r\n  { month: \"June\", desktop: 214 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n    icon: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n        <path\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n          d=\"M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst AreaChartStep = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Area Chart - Step</CardTitle>\r\n        <CardDescription>\r\n          Showing total visitors for the last 6 months\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <VisArea<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            opacity={0.4}\r\n            curveType={CurveType.Step}\r\n          />\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            curveType={CurveType.Step}\r\n            lineWidth={1}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color=\"var(--color-desktop)\"\r\n            template={(props) => (\r\n              <ChartTooltipContent labelKey=\"month\" hideLabel {...props} />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              January - June 2024\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AreaChartStep\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-step"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-step.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-stacked": {
			name: "area-chart-stacked",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-stacked.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { CurveType, Position } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n  mobile: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186, mobile: 80 },\r\n  { month: \"February\", desktop: 305, mobile: 200 },\r\n  { month: \"March\", desktop: 237, mobile: 120 },\r\n  { month: \"April\", desktop: 73, mobile: 190 },\r\n  { month: \"May\", desktop: 209, mobile: 130 },\r\n  { month: \"June\", desktop: 214, mobile: 140 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst AreaChartStacked = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Area Chart - Stacked</CardTitle>\r\n        <CardDescription>\r\n          Showing total visitors for the last 6 months\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 620]}\r\n        >\r\n          <VisArea<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.desktop]}\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            opacity={0.4}\r\n            curveType={CurveType.Natural}\r\n          />\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            curveType={CurveType.Natural}\r\n            lineWidth={1}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            template={(props) => (\r\n              <ChartTooltipContent labelKey=\"month\" {...props} />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              January - June 2024\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AreaChartStacked\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-stacked"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-stacked.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-legend": {
			name: "area-chart-legend",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-legend.tsx",
				type: "registry:block",
				target: "",
				content: "import {\r\n  VisArea,\r\n  VisAxis,\r\n  VisBulletLegend,\r\n  VisLine,\r\n  VisTooltip,\r\n} from \"@unovis/solid\"\r\nimport { CurveType, Position, type BulletLegendItemInterface } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n  mobile: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186, mobile: 80 },\r\n  { month: \"February\", desktop: 305, mobile: 200 },\r\n  { month: \"March\", desktop: 237, mobile: 120 },\r\n  { month: \"April\", desktop: 73, mobile: 190 },\r\n  { month: \"May\", desktop: 209, mobile: 130 },\r\n  { month: \"June\", desktop: 214, mobile: 140 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst AreaChartLegend = () => {\r\n  const items = (): BulletLegendItemInterface[] => {\r\n    return Object.entries(chartConfig).map(([_, config]) => ({\r\n      name: config.label,\r\n      color: config.color,\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Area Chart - Legend</CardTitle>\r\n        <CardDescription>\r\n          Showing total visitors for the last 6 months\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 620]}\r\n        >\r\n          <VisArea<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.desktop]}\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            opacity={0.4}\r\n            curveType={CurveType.Natural}\r\n          />\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            curveType={CurveType.Natural}\r\n            lineWidth={1}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            template={(props) => (\r\n              <ChartTooltipContent\r\n                labelKey=\"month\"\r\n                indicator=\"line\"\r\n                {...props}\r\n              />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n        <div class=\"flex items-center justify-center gap-4 pt-3\">\r\n          <VisBulletLegend items={items()} />\r\n        </div>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              January - June 2024\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AreaChartLegend\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-legend"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-legend.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-gradient": {
			name: "area-chart-gradient",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-gradient.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisArea, VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { Area, CurveType, Position } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n  mobile: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186, mobile: 80 },\r\n  { month: \"February\", desktop: 305, mobile: 200 },\r\n  { month: \"March\", desktop: 237, mobile: 120 },\r\n  { month: \"April\", desktop: 73, mobile: 190 },\r\n  { month: \"May\", desktop: 209, mobile: 130 },\r\n  { month: \"June\", desktop: 214, mobile: 140 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst AreaChartGradient = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Area Chart - Gradient</CardTitle>\r\n        <CardDescription>\r\n          Showing total visitors for the last 6 months\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 620]}\r\n        >\r\n          <svg height={0} width={0}>\r\n            <defs>\r\n              <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stop-color=\"var(--color-desktop)\"\r\n                  stop-opacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stop-color=\"var(--color-desktop)\"\r\n                  stop-opacity={0.1}\r\n                />\r\n              </linearGradient>\r\n              <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stop-color=\"var(--color-mobile)\"\r\n                  stop-opacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stop-color=\"var(--color-mobile)\"\r\n                  stop-opacity={0.1}\r\n                />\r\n              </linearGradient>\r\n            </defs>\r\n          </svg>\r\n          <VisArea<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.desktop]}\r\n            color=\"auto\"\r\n            opacity={0.4}\r\n            curveType={CurveType.Natural}\r\n            attributes={{\r\n              [`${Area.selectors.area}:nth-child(1)`]: {\r\n                fill: \"url(#fillDesktop)\",\r\n              },\r\n              [`${Area.selectors.area}:nth-child(2)`]: {\r\n                fill: \"url(#fillMobile)\",\r\n              },\r\n            }}\r\n          />\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            curveType={CurveType.Natural}\r\n            lineWidth={1}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            template={(props) => (\r\n              <ChartTooltipContent labelKey=\"month\" {...props} />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              January - June 2024\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AreaChartGradient\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-gradient"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-gradient.tsx",
			category: "",
			subcategory: ""
		}, 
		"area-chart-interactive": {
			name: "area-chart-interactive",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart","use-mobile"],
			files: [{
				path: "src/registry/tailwindcss/charts/area-chart-interactive.tsx",
				type: "registry:block",
				target: "",
				content: "import { batch, createSignal } from \"solid-js\"\r\nimport {\r\n  VisArea,\r\n  VisAxis,\r\n  VisBrush,\r\n  VisBulletLegend,\r\n  VisLine,\r\n  VisTooltip,\r\n} from \"@unovis/solid\"\r\nimport {\r\n  Area,\r\n  CurveType,\r\n  Position,\r\n  type BulletLegendItemInterface,\r\n} from \"@unovis/ts\"\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\"\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  desktop: number\r\n  mobile: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-04-01\", desktop: 222, mobile: 150 },\r\n  { date: \"2024-04-02\", desktop: 97, mobile: 180 },\r\n  { date: \"2024-04-03\", desktop: 167, mobile: 120 },\r\n  { date: \"2024-04-04\", desktop: 242, mobile: 260 },\r\n  { date: \"2024-04-05\", desktop: 373, mobile: 290 },\r\n  { date: \"2024-04-06\", desktop: 301, mobile: 340 },\r\n  { date: \"2024-04-07\", desktop: 245, mobile: 180 },\r\n  { date: \"2024-04-08\", desktop: 409, mobile: 320 },\r\n  { date: \"2024-04-09\", desktop: 59, mobile: 110 },\r\n  { date: \"2024-04-10\", desktop: 261, mobile: 190 },\r\n  { date: \"2024-04-11\", desktop: 327, mobile: 350 },\r\n  { date: \"2024-04-12\", desktop: 292, mobile: 210 },\r\n  { date: \"2024-04-13\", desktop: 342, mobile: 380 },\r\n  { date: \"2024-04-14\", desktop: 137, mobile: 220 },\r\n  { date: \"2024-04-15\", desktop: 120, mobile: 170 },\r\n  { date: \"2024-04-16\", desktop: 138, mobile: 190 },\r\n  { date: \"2024-04-17\", desktop: 446, mobile: 360 },\r\n  { date: \"2024-04-18\", desktop: 364, mobile: 410 },\r\n  { date: \"2024-04-19\", desktop: 243, mobile: 180 },\r\n  { date: \"2024-04-20\", desktop: 89, mobile: 150 },\r\n  { date: \"2024-04-21\", desktop: 137, mobile: 200 },\r\n  { date: \"2024-04-22\", desktop: 224, mobile: 170 },\r\n  { date: \"2024-04-23\", desktop: 138, mobile: 230 },\r\n  { date: \"2024-04-24\", desktop: 387, mobile: 290 },\r\n  { date: \"2024-04-25\", desktop: 215, mobile: 250 },\r\n  { date: \"2024-04-26\", desktop: 75, mobile: 130 },\r\n  { date: \"2024-04-27\", desktop: 383, mobile: 420 },\r\n  { date: \"2024-04-28\", desktop: 122, mobile: 180 },\r\n  { date: \"2024-04-29\", desktop: 315, mobile: 240 },\r\n  { date: \"2024-04-30\", desktop: 454, mobile: 380 },\r\n  { date: \"2024-05-01\", desktop: 165, mobile: 220 },\r\n  { date: \"2024-05-02\", desktop: 293, mobile: 310 },\r\n  { date: \"2024-05-03\", desktop: 247, mobile: 190 },\r\n  { date: \"2024-05-04\", desktop: 385, mobile: 420 },\r\n  { date: \"2024-05-05\", desktop: 481, mobile: 390 },\r\n  { date: \"2024-05-06\", desktop: 498, mobile: 520 },\r\n  { date: \"2024-05-07\", desktop: 388, mobile: 300 },\r\n  { date: \"2024-05-08\", desktop: 149, mobile: 210 },\r\n  { date: \"2024-05-09\", desktop: 227, mobile: 180 },\r\n  { date: \"2024-05-10\", desktop: 293, mobile: 330 },\r\n  { date: \"2024-05-11\", desktop: 335, mobile: 270 },\r\n  { date: \"2024-05-12\", desktop: 197, mobile: 240 },\r\n  { date: \"2024-05-13\", desktop: 197, mobile: 160 },\r\n  { date: \"2024-05-14\", desktop: 448, mobile: 490 },\r\n  { date: \"2024-05-15\", desktop: 473, mobile: 380 },\r\n  { date: \"2024-05-16\", desktop: 338, mobile: 400 },\r\n  { date: \"2024-05-17\", desktop: 499, mobile: 420 },\r\n  { date: \"2024-05-18\", desktop: 315, mobile: 350 },\r\n  { date: \"2024-05-19\", desktop: 235, mobile: 180 },\r\n  { date: \"2024-05-20\", desktop: 177, mobile: 230 },\r\n  { date: \"2024-05-21\", desktop: 82, mobile: 140 },\r\n  { date: \"2024-05-22\", desktop: 81, mobile: 120 },\r\n  { date: \"2024-05-23\", desktop: 252, mobile: 290 },\r\n  { date: \"2024-05-24\", desktop: 294, mobile: 220 },\r\n  { date: \"2024-05-25\", desktop: 201, mobile: 250 },\r\n  { date: \"2024-05-26\", desktop: 213, mobile: 170 },\r\n  { date: \"2024-05-27\", desktop: 420, mobile: 460 },\r\n  { date: \"2024-05-28\", desktop: 233, mobile: 190 },\r\n  { date: \"2024-05-29\", desktop: 78, mobile: 130 },\r\n  { date: \"2024-05-30\", desktop: 340, mobile: 280 },\r\n  { date: \"2024-05-31\", desktop: 178, mobile: 230 },\r\n  { date: \"2024-06-01\", desktop: 178, mobile: 200 },\r\n  { date: \"2024-06-02\", desktop: 470, mobile: 410 },\r\n  { date: \"2024-06-03\", desktop: 103, mobile: 160 },\r\n  { date: \"2024-06-04\", desktop: 439, mobile: 380 },\r\n  { date: \"2024-06-05\", desktop: 88, mobile: 140 },\r\n  { date: \"2024-06-06\", desktop: 294, mobile: 250 },\r\n  { date: \"2024-06-07\", desktop: 323, mobile: 370 },\r\n  { date: \"2024-06-08\", desktop: 385, mobile: 320 },\r\n  { date: \"2024-06-09\", desktop: 438, mobile: 480 },\r\n  { date: \"2024-06-10\", desktop: 155, mobile: 200 },\r\n  { date: \"2024-06-11\", desktop: 92, mobile: 150 },\r\n  { date: \"2024-06-12\", desktop: 492, mobile: 420 },\r\n  { date: \"2024-06-13\", desktop: 81, mobile: 130 },\r\n  { date: \"2024-06-14\", desktop: 426, mobile: 380 },\r\n  { date: \"2024-06-15\", desktop: 307, mobile: 350 },\r\n  { date: \"2024-06-16\", desktop: 371, mobile: 310 },\r\n  { date: \"2024-06-17\", desktop: 475, mobile: 520 },\r\n  { date: \"2024-06-18\", desktop: 107, mobile: 170 },\r\n  { date: \"2024-06-19\", desktop: 341, mobile: 290 },\r\n  { date: \"2024-06-20\", desktop: 408, mobile: 450 },\r\n  { date: \"2024-06-21\", desktop: 169, mobile: 210 },\r\n  { date: \"2024-06-22\", desktop: 317, mobile: 270 },\r\n  { date: \"2024-06-23\", desktop: 480, mobile: 530 },\r\n  { date: \"2024-06-24\", desktop: 132, mobile: 180 },\r\n  { date: \"2024-06-25\", desktop: 141, mobile: 190 },\r\n  { date: \"2024-06-26\", desktop: 434, mobile: 380 },\r\n  { date: \"2024-06-27\", desktop: 448, mobile: 490 },\r\n  { date: \"2024-06-28\", desktop: 149, mobile: 200 },\r\n  { date: \"2024-06-29\", desktop: 103, mobile: 160 },\r\n  { date: \"2024-06-30\", desktop: 446, mobile: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst AreaChartInteractive = () => {\r\n  const items = (): BulletLegendItemInterface[] => {\r\n    return Object.entries(chartConfig).map(([_, config]) => ({\r\n      name: config.label,\r\n      color: config.color,\r\n    }))\r\n  }\r\n\r\n  const [duration, setDuration] = createSignal<number | undefined>(0)\r\n  const [domain, setDomain] = createSignal<[number, number]>([\r\n    data.findIndex((d) => d.date === \"2024-04-30\"),\r\n    data.findIndex((d) => d.date === \"2024-06-01\"),\r\n  ])\r\n\r\n  const isMobile = useIsMobile()\r\n\r\n  const numTicks = () => {\r\n    if (isMobile()) {\r\n      return 4\r\n    }\r\n    return 15\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Area Chart - Interactive</CardTitle>\r\n        <CardDescription>\r\n          Showing total visitors for the last 3 months\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 1600]}\r\n          xDomain={domain()}\r\n          duration={duration()}\r\n          class=\"aspect-auto\"\r\n        >\r\n          <svg height={0} width={0}>\r\n            <defs>\r\n              <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stop-color=\"var(--color-desktop)\"\r\n                  stop-opacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stop-color=\"var(--color-desktop)\"\r\n                  stop-opacity={0.1}\r\n                />\r\n              </linearGradient>\r\n              <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stop-color=\"var(--color-mobile)\"\r\n                  stop-opacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stop-color=\"var(--color-mobile)\"\r\n                  stop-opacity={0.1}\r\n                />\r\n              </linearGradient>\r\n            </defs>\r\n          </svg>\r\n          <VisArea<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.desktop]}\r\n            color=\"auto\"\r\n            opacity={0.4}\r\n            curveType={CurveType.Natural}\r\n            attributes={{\r\n              [`${Area.selectors.area}:nth-child(1)`]: {\r\n                fill: \"url(#fillDesktop)\",\r\n              },\r\n              [`${Area.selectors.area}:nth-child(2)`]: {\r\n                fill: \"url(#fillMobile)\",\r\n              },\r\n            }}\r\n          />\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            curveType={CurveType.Natural}\r\n            lineWidth={1}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => {\r\n              const date = new Date(data[d as number].date)\r\n              return date.toLocaleDateString(\"en-US\", {\r\n                month: \"short\",\r\n                day: \"numeric\",\r\n              })\r\n            }}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={Math.min(numTicks(), domain()[1] - domain()[0])}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            template={(props) => (\r\n              <ChartTooltipContent\r\n                labelKey=\"date\"\r\n                labelFormatter={(d) => {\r\n                  const date = new Date(data[d as number].date)\r\n                  return date.toLocaleDateString(\"en-US\", {\r\n                    month: \"short\",\r\n                    day: \"numeric\",\r\n                  })\r\n                }}\r\n                {...props}\r\n              />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n        <div class=\"flex items-center justify-center gap-4 pt-3\">\r\n          <VisBulletLegend items={items()} />\r\n        </div>\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          height={75}\r\n          padding={{\r\n            top: 12,\r\n          }}\r\n          class=\"aspect-auto\"\r\n        >\r\n          <svg height={0} width={0}>\r\n            <defs>\r\n              <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stop-color=\"var(--color-desktop)\"\r\n                  stop-opacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stop-color=\"var(--color-desktop)\"\r\n                  stop-opacity={0.1}\r\n                />\r\n              </linearGradient>\r\n              <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stop-color=\"var(--color-mobile)\"\r\n                  stop-opacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stop-color=\"var(--color-mobile)\"\r\n                  stop-opacity={0.1}\r\n                />\r\n              </linearGradient>\r\n            </defs>\r\n          </svg>\r\n          <VisArea<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.desktop]}\r\n            color=\"auto\"\r\n            opacity={0.4}\r\n            curveType={CurveType.Natural}\r\n            attributes={{\r\n              [`${Area.selectors.area}:nth-child(1)`]: {\r\n                fill: \"url(#fillDesktop)\",\r\n              },\r\n              [`${Area.selectors.area}:nth-child(2)`]: {\r\n                fill: \"url(#fillMobile)\",\r\n              },\r\n            }}\r\n          />\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.mobile, (d) => d.mobile + d.desktop]}\r\n            color={[\"var(--color-mobile)\", \"var(--color-desktop)\"]}\r\n            curveType={CurveType.Natural}\r\n            lineWidth={1}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => {\r\n              const date = new Date(data[d as number].date)\r\n              return date.toLocaleDateString(\"en-US\", {\r\n                month: \"short\",\r\n                day: \"numeric\",\r\n              })\r\n            }}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={numTicks()}\r\n          />\r\n          <VisBrush\r\n            selection={domain()}\r\n            onBrush={(selection, _, userDriven) => {\r\n              if (userDriven)\r\n                batch(() => {\r\n                  setDuration(0)\r\n                  setDomain(selection!)\r\n                })\r\n            }}\r\n            draggable\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AreaChartInteractive\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/area-chart-interactive"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/area-chart-interactive.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart": {
			name: "bar-chart",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186 },\r\n  { month: \"February\", desktop: 305 },\r\n  { month: \"March\", desktop: 237 },\r\n  { month: \"April\", desktop: 73 },\r\n  { month: \"May\", desktop: 209 },\r\n  { month: \"June\", desktop: 214 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst BarChart = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Bar Chart</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            roundedCorners={8}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"month\"\r\n                    hideLabel\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BarChart\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-horizontal": {
			name: "bar-chart-horizontal",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-horizontal.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { Direction, Orientation, StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186 },\r\n  { month: \"February\", desktop: 305 },\r\n  { month: \"March\", desktop: 237 },\r\n  { month: \"April\", desktop: 73 },\r\n  { month: \"May\", desktop: 209 },\r\n  { month: \"June\", desktop: 214 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst BarChartHorizontal = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Bar Chart- Horizontal</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDirection={Direction.South}\r\n        >\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            roundedCorners={5}\r\n            orientation={Orientation.Horizontal}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"y\"\r\n            tickFormat={(_, i) => data[i].month}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"month\"\r\n                    hideLabel\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BarChartHorizontal\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-horizontal"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-horizontal.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-multiple": {
			name: "bar-chart-multiple",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-multiple.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisGroupedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { GroupedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n  mobile: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186, mobile: 80 },\r\n  { month: \"February\", desktop: 305, mobile: 200 },\r\n  { month: \"March\", desktop: 237, mobile: 120 },\r\n  { month: \"April\", desktop: 73, mobile: 190 },\r\n  { month: \"May\", desktop: 209, mobile: 130 },\r\n  { month: \"June\", desktop: 214, mobile: 140 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst BarChartMultiple = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Bar Chart - Multiple</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <VisGroupedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.desktop, (d) => d.mobile]}\r\n            color={[\"var(--color-desktop)\", \"var(--color-mobile)\"]}\r\n            roundedCorners={4}\r\n            barPadding={0.2}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [GroupedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"month\"\r\n                    indicator=\"dashed\"\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BarChartMultiple\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-multiple"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-multiple.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-stacked": {
			name: "bar-chart-stacked",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-stacked.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport {\r\n  VisAxis,\r\n  VisBulletLegend,\r\n  VisStackedBar,\r\n  VisTooltip,\r\n} from \"@unovis/solid\"\r\nimport { StackedBar, type BulletLegendItemInterface } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n  mobile: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186, mobile: 80 },\r\n  { month: \"February\", desktop: 305, mobile: 200 },\r\n  { month: \"March\", desktop: 237, mobile: 120 },\r\n  { month: \"April\", desktop: 73, mobile: 190 },\r\n  { month: \"May\", desktop: 209, mobile: 130 },\r\n  { month: \"June\", desktop: 214, mobile: 140 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst BarChartStacked = () => {\r\n  const items = (): BulletLegendItemInterface[] => {\r\n    return Object.entries(chartConfig).map(([_, config]) => ({\r\n      name: config.label,\r\n      color: config.color,\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Bar Chart - Stacked</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 620]}\r\n        >\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.desktop, (d) => d.mobile]}\r\n            color={[\"var(--color-desktop)\", \"var(--color-mobile)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"month\"\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n        <div class=\"flex items-center justify-center gap-4 pt-3\">\r\n          <VisBulletLegend items={items()} />\r\n        </div>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BarChartStacked\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-stacked"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-stacked.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-mixed": {
			name: "bar-chart-mixed",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-mixed.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { Direction, Orientation, StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  browser: string\r\n  visitors: number\r\n  fill: string\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\r\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\r\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\r\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\r\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\r\n]\r\n\r\nconst chartConfig = {\r\n  visitors: {\r\n    label: \"Visitors\",\r\n  },\r\n  chrome: {\r\n    label: \"Chrome\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  safari: {\r\n    label: \"Safari\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n  firefox: {\r\n    label: \"Firefox\",\r\n    color: \"hsl(var(--chart-3))\",\r\n  },\r\n  edge: {\r\n    label: \"Edge\",\r\n    color: \"hsl(var(--chart-4))\",\r\n  },\r\n  other: {\r\n    label: \"Other\",\r\n    color: \"hsl(var(--chart-5))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst BarChartMixed = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Bar Chart- Mixed</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDirection={Direction.South}\r\n        >\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.visitors}\r\n            color={(d) => d.fill}\r\n            roundedCorners={5}\r\n            orientation={Orientation.Horizontal}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"y\"\r\n            tickFormat={(_, i) =>\r\n              chartConfig[data[i].browser as keyof typeof chartConfig].label\r\n            }\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"browser\"\r\n                    hideLabel\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BarChartMixed\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-mixed"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-mixed.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-active": {
			name: "bar-chart-active",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-active.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  browser: string\r\n  visitors: number\r\n  fill: string\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { browser: \"chrome\", visitors: 187, fill: \"var(--color-chrome)\" },\r\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\r\n  { browser: \"firefox\", visitors: 275, fill: \"var(--color-firefox)\" },\r\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\r\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\r\n]\r\n\r\nconst chartConfig = {\r\n  visitors: {\r\n    label: \"Visitors\",\r\n  },\r\n  chrome: {\r\n    label: \"Chrome\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  safari: {\r\n    label: \"Safari\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n  firefox: {\r\n    label: \"Firefox\",\r\n    color: \"hsl(var(--chart-3))\",\r\n  },\r\n  edge: {\r\n    label: \"Edge\",\r\n    color: \"hsl(var(--chart-4))\",\r\n  },\r\n  other: {\r\n    label: \"Other\",\r\n    color: \"hsl(var(--chart-5))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst BarChartActive = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Bar Chart- Active</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <style\r\n            innerText={`path[data-stacked-bar-active=true] {\r\n\t\t\t\t\t--vis-stacked-bar-stroke-color: ${data.find((d) => d.browser === \"firefox\")?.fill};\r\n\t\t\t\t\t--vis-stacked-bar-stroke-width: 2;\r\n\t\t\t\t\t--vis-stacked-bar-hover-stroke-color: var(--vis-stacked-bar-stroke-color);\r\n\t\t\t\t\t--vis-stacked-bar-hover-stroke-width: var(--vis-stacked-bar-stroke-width);\r\n\t\t\t\t\t}`}\r\n          />\r\n          <VisStackedBar<DataRecord>\r\n            id={(d) => `stacked-bar-${d.browser}`}\r\n            x={(_, i) => i}\r\n            y={(d) => d.visitors}\r\n            color={(d) => d.fill}\r\n            roundedCorners={8}\r\n            attributes={{\r\n              [StackedBar.selectors.bar]: {\r\n                \"stroke-width\": 2,\r\n                \"stroke-dasharray\": 4,\r\n                \"stroke-dashoffset\": 4,\r\n                \"fill-opacity\": 0.8,\r\n                \"data-stacked-bar-active\": (d) => d.browser === \"firefox\",\r\n              },\r\n            }}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(_, i) =>\r\n              chartConfig[data[i].browser as keyof typeof chartConfig].label\r\n            }\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"browser\"\r\n                    hideLabel\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BarChartActive\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-active"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-active.tsx",
			category: "",
			subcategory: ""
		}, 
		"bar-chart-interactive": {
			name: "bar-chart-interactive",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart","use-mobile"],
			files: [{
				path: "src/registry/tailwindcss/charts/bar-chart-interactive.tsx",
				type: "registry:block",
				target: "",
				content: "import { For, createMemo, createSignal } from \"solid-js\"\r\nimport { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\"\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  desktop: { view: number }\r\n  mobile: { view: number }\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-04-01\", desktop: { view: 222 }, mobile: { view: 150 } },\r\n  { date: \"2024-04-02\", desktop: { view: 97 }, mobile: { view: 180 } },\r\n  { date: \"2024-04-03\", desktop: { view: 167 }, mobile: { view: 120 } },\r\n  { date: \"2024-04-04\", desktop: { view: 242 }, mobile: { view: 260 } },\r\n  { date: \"2024-04-05\", desktop: { view: 373 }, mobile: { view: 290 } },\r\n  { date: \"2024-04-06\", desktop: { view: 301 }, mobile: { view: 340 } },\r\n  { date: \"2024-04-07\", desktop: { view: 245 }, mobile: { view: 180 } },\r\n  { date: \"2024-04-08\", desktop: { view: 409 }, mobile: { view: 320 } },\r\n  { date: \"2024-04-09\", desktop: { view: 59 }, mobile: { view: 110 } },\r\n  { date: \"2024-04-10\", desktop: { view: 261 }, mobile: { view: 190 } },\r\n  { date: \"2024-04-11\", desktop: { view: 327 }, mobile: { view: 350 } },\r\n  { date: \"2024-04-12\", desktop: { view: 292 }, mobile: { view: 210 } },\r\n  { date: \"2024-04-13\", desktop: { view: 342 }, mobile: { view: 380 } },\r\n  { date: \"2024-04-14\", desktop: { view: 137 }, mobile: { view: 220 } },\r\n  { date: \"2024-04-15\", desktop: { view: 120 }, mobile: { view: 170 } },\r\n  { date: \"2024-04-16\", desktop: { view: 138 }, mobile: { view: 190 } },\r\n  { date: \"2024-04-17\", desktop: { view: 446 }, mobile: { view: 360 } },\r\n  { date: \"2024-04-18\", desktop: { view: 364 }, mobile: { view: 410 } },\r\n  { date: \"2024-04-19\", desktop: { view: 243 }, mobile: { view: 180 } },\r\n  { date: \"2024-04-20\", desktop: { view: 89 }, mobile: { view: 150 } },\r\n  { date: \"2024-04-21\", desktop: { view: 137 }, mobile: { view: 200 } },\r\n  { date: \"2024-04-22\", desktop: { view: 224 }, mobile: { view: 170 } },\r\n  { date: \"2024-04-23\", desktop: { view: 138 }, mobile: { view: 230 } },\r\n  { date: \"2024-04-24\", desktop: { view: 387 }, mobile: { view: 290 } },\r\n  { date: \"2024-04-25\", desktop: { view: 215 }, mobile: { view: 250 } },\r\n  { date: \"2024-04-26\", desktop: { view: 75 }, mobile: { view: 130 } },\r\n  { date: \"2024-04-27\", desktop: { view: 383 }, mobile: { view: 420 } },\r\n  { date: \"2024-04-28\", desktop: { view: 122 }, mobile: { view: 180 } },\r\n  { date: \"2024-04-29\", desktop: { view: 315 }, mobile: { view: 240 } },\r\n  { date: \"2024-04-30\", desktop: { view: 454 }, mobile: { view: 380 } },\r\n  { date: \"2024-05-01\", desktop: { view: 165 }, mobile: { view: 220 } },\r\n  { date: \"2024-05-02\", desktop: { view: 293 }, mobile: { view: 310 } },\r\n  { date: \"2024-05-03\", desktop: { view: 247 }, mobile: { view: 190 } },\r\n  { date: \"2024-05-04\", desktop: { view: 385 }, mobile: { view: 420 } },\r\n  { date: \"2024-05-05\", desktop: { view: 481 }, mobile: { view: 390 } },\r\n  { date: \"2024-05-06\", desktop: { view: 498 }, mobile: { view: 520 } },\r\n  { date: \"2024-05-07\", desktop: { view: 388 }, mobile: { view: 300 } },\r\n  { date: \"2024-05-08\", desktop: { view: 149 }, mobile: { view: 210 } },\r\n  { date: \"2024-05-09\", desktop: { view: 227 }, mobile: { view: 180 } },\r\n  { date: \"2024-05-10\", desktop: { view: 293 }, mobile: { view: 330 } },\r\n  { date: \"2024-05-11\", desktop: { view: 335 }, mobile: { view: 270 } },\r\n  { date: \"2024-05-12\", desktop: { view: 197 }, mobile: { view: 240 } },\r\n  { date: \"2024-05-13\", desktop: { view: 197 }, mobile: { view: 160 } },\r\n  { date: \"2024-05-14\", desktop: { view: 448 }, mobile: { view: 490 } },\r\n  { date: \"2024-05-15\", desktop: { view: 473 }, mobile: { view: 380 } },\r\n  { date: \"2024-05-16\", desktop: { view: 338 }, mobile: { view: 400 } },\r\n  { date: \"2024-05-17\", desktop: { view: 499 }, mobile: { view: 420 } },\r\n  { date: \"2024-05-18\", desktop: { view: 315 }, mobile: { view: 350 } },\r\n  { date: \"2024-05-19\", desktop: { view: 235 }, mobile: { view: 180 } },\r\n  { date: \"2024-05-20\", desktop: { view: 177 }, mobile: { view: 230 } },\r\n  { date: \"2024-05-21\", desktop: { view: 82 }, mobile: { view: 140 } },\r\n  { date: \"2024-05-22\", desktop: { view: 81 }, mobile: { view: 120 } },\r\n  { date: \"2024-05-23\", desktop: { view: 252 }, mobile: { view: 290 } },\r\n  { date: \"2024-05-24\", desktop: { view: 294 }, mobile: { view: 220 } },\r\n  { date: \"2024-05-25\", desktop: { view: 201 }, mobile: { view: 250 } },\r\n  { date: \"2024-05-26\", desktop: { view: 213 }, mobile: { view: 170 } },\r\n  { date: \"2024-05-27\", desktop: { view: 420 }, mobile: { view: 460 } },\r\n  { date: \"2024-05-28\", desktop: { view: 233 }, mobile: { view: 190 } },\r\n  { date: \"2024-05-29\", desktop: { view: 78 }, mobile: { view: 130 } },\r\n  { date: \"2024-05-30\", desktop: { view: 340 }, mobile: { view: 280 } },\r\n  { date: \"2024-05-31\", desktop: { view: 178 }, mobile: { view: 230 } },\r\n  { date: \"2024-06-01\", desktop: { view: 178 }, mobile: { view: 200 } },\r\n  { date: \"2024-06-02\", desktop: { view: 470 }, mobile: { view: 410 } },\r\n  { date: \"2024-06-03\", desktop: { view: 103 }, mobile: { view: 160 } },\r\n  { date: \"2024-06-04\", desktop: { view: 439 }, mobile: { view: 380 } },\r\n  { date: \"2024-06-05\", desktop: { view: 88 }, mobile: { view: 140 } },\r\n  { date: \"2024-06-06\", desktop: { view: 294 }, mobile: { view: 250 } },\r\n  { date: \"2024-06-07\", desktop: { view: 323 }, mobile: { view: 370 } },\r\n  { date: \"2024-06-08\", desktop: { view: 385 }, mobile: { view: 320 } },\r\n  { date: \"2024-06-09\", desktop: { view: 438 }, mobile: { view: 480 } },\r\n  { date: \"2024-06-10\", desktop: { view: 155 }, mobile: { view: 200 } },\r\n  { date: \"2024-06-11\", desktop: { view: 92 }, mobile: { view: 150 } },\r\n  { date: \"2024-06-12\", desktop: { view: 492 }, mobile: { view: 420 } },\r\n  { date: \"2024-06-13\", desktop: { view: 81 }, mobile: { view: 130 } },\r\n  { date: \"2024-06-14\", desktop: { view: 426 }, mobile: { view: 380 } },\r\n  { date: \"2024-06-15\", desktop: { view: 307 }, mobile: { view: 350 } },\r\n  { date: \"2024-06-16\", desktop: { view: 371 }, mobile: { view: 310 } },\r\n  { date: \"2024-06-17\", desktop: { view: 475 }, mobile: { view: 520 } },\r\n  { date: \"2024-06-18\", desktop: { view: 107 }, mobile: { view: 170 } },\r\n  { date: \"2024-06-19\", desktop: { view: 341 }, mobile: { view: 290 } },\r\n  { date: \"2024-06-20\", desktop: { view: 408 }, mobile: { view: 450 } },\r\n  { date: \"2024-06-21\", desktop: { view: 169 }, mobile: { view: 210 } },\r\n  { date: \"2024-06-22\", desktop: { view: 317 }, mobile: { view: 270 } },\r\n  { date: \"2024-06-23\", desktop: { view: 480 }, mobile: { view: 530 } },\r\n  { date: \"2024-06-24\", desktop: { view: 132 }, mobile: { view: 180 } },\r\n  { date: \"2024-06-25\", desktop: { view: 141 }, mobile: { view: 190 } },\r\n  { date: \"2024-06-26\", desktop: { view: 434 }, mobile: { view: 380 } },\r\n  { date: \"2024-06-27\", desktop: { view: 448 }, mobile: { view: 490 } },\r\n  { date: \"2024-06-28\", desktop: { view: 149 }, mobile: { view: 200 } },\r\n  { date: \"2024-06-29\", desktop: { view: 103 }, mobile: { view: 160 } },\r\n  { date: \"2024-06-30\", desktop: { view: 446 }, mobile: { view: 400 } },\r\n]\r\n\r\nconst chartConfig = {\r\n  view: {\r\n    label: \"Page Views\",\r\n  },\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst BarChartInteractive = () => {\r\n  const isMobile = useIsMobile()\r\n\r\n  const numTicks = () => {\r\n    if (isMobile()) {\r\n      return 4\r\n    }\r\n    return 9\r\n  }\r\n\r\n  const [activeChart, setActiveChart] =\r\n    createSignal<keyof typeof chartConfig>(\"desktop\")\r\n\r\n  const keys = createMemo(() =>\r\n    // @ts-expect-error\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    Object.keys(data[0][activeChart()]).map((i) => ({ view: i }))\r\n  )\r\n\r\n  const y = createMemo(() =>\r\n    // @ts-expect-error\r\n    // eslint-disable-next-line solid/reactivity\r\n    keys().map((i) => (d: DataRecord) => d[activeChart()][i.view])\r\n  )\r\n\r\n  const total = createMemo(() => ({\r\n    desktop: data.reduce((acc, curr) => acc + curr.desktop.view, 0),\r\n    mobile: data.reduce((acc, curr) => acc + curr.mobile.view, 0),\r\n  }))\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader class=\"flex flex-col items-stretch space-y-0 border-b p-0 sm:flex-row\">\r\n        <div class=\"flex flex-1 flex-col justify-center gap-1 px-6 py-5 sm:py-6\">\r\n          <CardTitle>Bar Chart - Interactive</CardTitle>\r\n          <CardDescription>\r\n            Showing total visitors for the last 3 months\r\n          </CardDescription>\r\n        </div>\r\n        <div class=\"flex\">\r\n          <For each={[\"desktop\", \"mobile\"]}>\r\n            {(key) => {\r\n              const chart = key as keyof typeof chartConfig\r\n              return (\r\n                <button\r\n                  data-active={activeChart() === chart}\r\n                  class=\"data-[active=true]:bg-muted/50 relative z-30 flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l sm:border-l sm:border-t-0 sm:px-8 sm:py-6\"\r\n                  onClick={() => setActiveChart(chart)}\r\n                >\r\n                  <span class=\"text-muted-foreground text-xs\">\r\n                    {chartConfig[chart].label}\r\n                  </span>\r\n                  <span class=\"text-lg font-bold leading-none sm:text-3xl\">\r\n                    {total()[key as keyof typeof total]}\r\n                  </span>\r\n                </button>\r\n              )\r\n            }}\r\n          </For>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          class=\"aspect-auto\"\r\n          yDomain={[0, Math.max(...data.map((d) => d.mobile.view + 50))]}\r\n        >\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={y()}\r\n            color={`var(--color-${activeChart()})`}\r\n            barPadding={0.2}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => {\r\n              const date = new Date(data[d as number].date)\r\n              return date.toLocaleDateString(\"en-US\", {\r\n                month: \"short\",\r\n                day: \"numeric\",\r\n              })\r\n            }}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={numTicks()}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent<Partial<DataRecord>, typeof chartConfig>\r\n                    data={{\r\n                      date: d.date,\r\n                      // @ts-expect-error\r\n                      [activeChart()]: d[activeChart()],\r\n                    }}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                    nameKey=\"view\"\r\n                    labelFormatter={() =>\r\n                      new Date(d.date).toLocaleDateString(\"en-US\", {\r\n                        month: \"short\",\r\n                        day: \"numeric\",\r\n                        year: \"numeric\",\r\n                      })\r\n                    }\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BarChartInteractive\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/bar-chart-interactive"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/bar-chart-interactive.tsx",
			category: "",
			subcategory: ""
		}, 
		"line-chart": {
			name: "line-chart",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/line-chart.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { CurveType, Position } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186 },\r\n  { month: \"February\", desktop: 305 },\r\n  { month: \"March\", desktop: 237 },\r\n  { month: \"April\", desktop: 73 },\r\n  { month: \"May\", desktop: 209 },\r\n  { month: \"June\", desktop: 214 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst LineChart = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Line Chart</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            curveType={CurveType.Natural}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color=\"var(--color-desktop)\"\r\n            template={(props) => (\r\n              <ChartTooltipContent labelKey=\"month\" hideLabel {...props} />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default LineChart\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/line-chart"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/line-chart.tsx",
			category: "",
			subcategory: ""
		}, 
		"line-chart-linear": {
			name: "line-chart-linear",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/line-chart-linear.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { CurveType, Position } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186 },\r\n  { month: \"February\", desktop: 305 },\r\n  { month: \"March\", desktop: 237 },\r\n  { month: \"April\", desktop: 73 },\r\n  { month: \"May\", desktop: 209 },\r\n  { month: \"June\", desktop: 214 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst LineChartLinear = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Line Chart - Linear</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            curveType={CurveType.Linear}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color=\"var(--color-desktop)\"\r\n            template={(props) => (\r\n              <ChartTooltipContent labelKey=\"month\" hideLabel {...props} />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default LineChartLinear\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/line-chart-linear"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/line-chart-linear.tsx",
			category: "",
			subcategory: ""
		}, 
		"line-chart-multiple": {
			name: "line-chart-multiple",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/line-chart-multiple.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { CurveType, Position } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  month: string\r\n  desktop: number\r\n  mobile: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { month: \"January\", desktop: 186, mobile: 80 },\r\n  { month: \"February\", desktop: 305, mobile: 200 },\r\n  { month: \"March\", desktop: 237, mobile: 120 },\r\n  { month: \"April\", desktop: 73, mobile: 190 },\r\n  { month: \"May\", desktop: 209, mobile: 130 },\r\n  { month: \"June\", desktop: 214, mobile: 140 },\r\n]\r\n\r\nconst chartConfig = {\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst LineChartMultiple = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Line Chart - Multiple</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          yDomain={[0, 310]}\r\n        >\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.desktop}\r\n            color=\"var(--color-desktop)\"\r\n            curveType={CurveType.Natural}\r\n          />{\" \"}\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={(d) => d.mobile}\r\n            color=\"var(--color-mobile)\"\r\n            curveType={CurveType.Natural}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => data[d as number].month.slice(0, 3)}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color=\"var(--color-desktop)\"\r\n            template={(props) => (\r\n              <ChartTooltipContent labelKey=\"month\" hideLabel {...props} />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <div class=\"flex w-full items-start gap-2 text-sm\">\r\n          <div class=\"grid gap-2\">\r\n            <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n              Trending up by 5.2% this month{\" \"}\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                class=\"size-4\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <g\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                >\r\n                  <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n                  <path d=\"M16 7h6v6\" />\r\n                </g>\r\n              </svg>\r\n            </div>\r\n            <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n              Showing total visitors for the last 6 months\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default LineChartMultiple\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/line-chart-multiple"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/line-chart-multiple.tsx",
			category: "",
			subcategory: ""
		}, 
		"line-chart-interactive": {
			name: "line-chart-interactive",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/line-chart-interactive.tsx",
				type: "registry:block",
				target: "",
				content: "import { For, createMemo, createSignal } from \"solid-js\"\r\nimport { VisAxis, VisLine, VisTooltip } from \"@unovis/solid\"\r\nimport { Position } from \"@unovis/ts\"\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\"\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartCrosshair,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  desktop: { view: number }\r\n  mobile: { view: number }\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-04-01\", desktop: { view: 222 }, mobile: { view: 150 } },\r\n  { date: \"2024-04-02\", desktop: { view: 97 }, mobile: { view: 180 } },\r\n  { date: \"2024-04-03\", desktop: { view: 167 }, mobile: { view: 120 } },\r\n  { date: \"2024-04-04\", desktop: { view: 242 }, mobile: { view: 260 } },\r\n  { date: \"2024-04-05\", desktop: { view: 373 }, mobile: { view: 290 } },\r\n  { date: \"2024-04-06\", desktop: { view: 301 }, mobile: { view: 340 } },\r\n  { date: \"2024-04-07\", desktop: { view: 245 }, mobile: { view: 180 } },\r\n  { date: \"2024-04-08\", desktop: { view: 409 }, mobile: { view: 320 } },\r\n  { date: \"2024-04-09\", desktop: { view: 59 }, mobile: { view: 110 } },\r\n  { date: \"2024-04-10\", desktop: { view: 261 }, mobile: { view: 190 } },\r\n  { date: \"2024-04-11\", desktop: { view: 327 }, mobile: { view: 350 } },\r\n  { date: \"2024-04-12\", desktop: { view: 292 }, mobile: { view: 210 } },\r\n  { date: \"2024-04-13\", desktop: { view: 342 }, mobile: { view: 380 } },\r\n  { date: \"2024-04-14\", desktop: { view: 137 }, mobile: { view: 220 } },\r\n  { date: \"2024-04-15\", desktop: { view: 120 }, mobile: { view: 170 } },\r\n  { date: \"2024-04-16\", desktop: { view: 138 }, mobile: { view: 190 } },\r\n  { date: \"2024-04-17\", desktop: { view: 446 }, mobile: { view: 360 } },\r\n  { date: \"2024-04-18\", desktop: { view: 364 }, mobile: { view: 410 } },\r\n  { date: \"2024-04-19\", desktop: { view: 243 }, mobile: { view: 180 } },\r\n  { date: \"2024-04-20\", desktop: { view: 89 }, mobile: { view: 150 } },\r\n  { date: \"2024-04-21\", desktop: { view: 137 }, mobile: { view: 200 } },\r\n  { date: \"2024-04-22\", desktop: { view: 224 }, mobile: { view: 170 } },\r\n  { date: \"2024-04-23\", desktop: { view: 138 }, mobile: { view: 230 } },\r\n  { date: \"2024-04-24\", desktop: { view: 387 }, mobile: { view: 290 } },\r\n  { date: \"2024-04-25\", desktop: { view: 215 }, mobile: { view: 250 } },\r\n  { date: \"2024-04-26\", desktop: { view: 75 }, mobile: { view: 130 } },\r\n  { date: \"2024-04-27\", desktop: { view: 383 }, mobile: { view: 420 } },\r\n  { date: \"2024-04-28\", desktop: { view: 122 }, mobile: { view: 180 } },\r\n  { date: \"2024-04-29\", desktop: { view: 315 }, mobile: { view: 240 } },\r\n  { date: \"2024-04-30\", desktop: { view: 454 }, mobile: { view: 380 } },\r\n  { date: \"2024-05-01\", desktop: { view: 165 }, mobile: { view: 220 } },\r\n  { date: \"2024-05-02\", desktop: { view: 293 }, mobile: { view: 310 } },\r\n  { date: \"2024-05-03\", desktop: { view: 247 }, mobile: { view: 190 } },\r\n  { date: \"2024-05-04\", desktop: { view: 385 }, mobile: { view: 420 } },\r\n  { date: \"2024-05-05\", desktop: { view: 481 }, mobile: { view: 390 } },\r\n  { date: \"2024-05-06\", desktop: { view: 498 }, mobile: { view: 520 } },\r\n  { date: \"2024-05-07\", desktop: { view: 388 }, mobile: { view: 300 } },\r\n  { date: \"2024-05-08\", desktop: { view: 149 }, mobile: { view: 210 } },\r\n  { date: \"2024-05-09\", desktop: { view: 227 }, mobile: { view: 180 } },\r\n  { date: \"2024-05-10\", desktop: { view: 293 }, mobile: { view: 330 } },\r\n  { date: \"2024-05-11\", desktop: { view: 335 }, mobile: { view: 270 } },\r\n  { date: \"2024-05-12\", desktop: { view: 197 }, mobile: { view: 240 } },\r\n  { date: \"2024-05-13\", desktop: { view: 197 }, mobile: { view: 160 } },\r\n  { date: \"2024-05-14\", desktop: { view: 448 }, mobile: { view: 490 } },\r\n  { date: \"2024-05-15\", desktop: { view: 473 }, mobile: { view: 380 } },\r\n  { date: \"2024-05-16\", desktop: { view: 338 }, mobile: { view: 400 } },\r\n  { date: \"2024-05-17\", desktop: { view: 499 }, mobile: { view: 420 } },\r\n  { date: \"2024-05-18\", desktop: { view: 315 }, mobile: { view: 350 } },\r\n  { date: \"2024-05-19\", desktop: { view: 235 }, mobile: { view: 180 } },\r\n  { date: \"2024-05-20\", desktop: { view: 177 }, mobile: { view: 230 } },\r\n  { date: \"2024-05-21\", desktop: { view: 82 }, mobile: { view: 140 } },\r\n  { date: \"2024-05-22\", desktop: { view: 81 }, mobile: { view: 120 } },\r\n  { date: \"2024-05-23\", desktop: { view: 252 }, mobile: { view: 290 } },\r\n  { date: \"2024-05-24\", desktop: { view: 294 }, mobile: { view: 220 } },\r\n  { date: \"2024-05-25\", desktop: { view: 201 }, mobile: { view: 250 } },\r\n  { date: \"2024-05-26\", desktop: { view: 213 }, mobile: { view: 170 } },\r\n  { date: \"2024-05-27\", desktop: { view: 420 }, mobile: { view: 460 } },\r\n  { date: \"2024-05-28\", desktop: { view: 233 }, mobile: { view: 190 } },\r\n  { date: \"2024-05-29\", desktop: { view: 78 }, mobile: { view: 130 } },\r\n  { date: \"2024-05-30\", desktop: { view: 340 }, mobile: { view: 280 } },\r\n  { date: \"2024-05-31\", desktop: { view: 178 }, mobile: { view: 230 } },\r\n  { date: \"2024-06-01\", desktop: { view: 178 }, mobile: { view: 200 } },\r\n  { date: \"2024-06-02\", desktop: { view: 470 }, mobile: { view: 410 } },\r\n  { date: \"2024-06-03\", desktop: { view: 103 }, mobile: { view: 160 } },\r\n  { date: \"2024-06-04\", desktop: { view: 439 }, mobile: { view: 380 } },\r\n  { date: \"2024-06-05\", desktop: { view: 88 }, mobile: { view: 140 } },\r\n  { date: \"2024-06-06\", desktop: { view: 294 }, mobile: { view: 250 } },\r\n  { date: \"2024-06-07\", desktop: { view: 323 }, mobile: { view: 370 } },\r\n  { date: \"2024-06-08\", desktop: { view: 385 }, mobile: { view: 320 } },\r\n  { date: \"2024-06-09\", desktop: { view: 438 }, mobile: { view: 480 } },\r\n  { date: \"2024-06-10\", desktop: { view: 155 }, mobile: { view: 200 } },\r\n  { date: \"2024-06-11\", desktop: { view: 92 }, mobile: { view: 150 } },\r\n  { date: \"2024-06-12\", desktop: { view: 492 }, mobile: { view: 420 } },\r\n  { date: \"2024-06-13\", desktop: { view: 81 }, mobile: { view: 130 } },\r\n  { date: \"2024-06-14\", desktop: { view: 426 }, mobile: { view: 380 } },\r\n  { date: \"2024-06-15\", desktop: { view: 307 }, mobile: { view: 350 } },\r\n  { date: \"2024-06-16\", desktop: { view: 371 }, mobile: { view: 310 } },\r\n  { date: \"2024-06-17\", desktop: { view: 475 }, mobile: { view: 520 } },\r\n  { date: \"2024-06-18\", desktop: { view: 107 }, mobile: { view: 170 } },\r\n  { date: \"2024-06-19\", desktop: { view: 341 }, mobile: { view: 290 } },\r\n  { date: \"2024-06-20\", desktop: { view: 408 }, mobile: { view: 450 } },\r\n  { date: \"2024-06-21\", desktop: { view: 169 }, mobile: { view: 210 } },\r\n  { date: \"2024-06-22\", desktop: { view: 317 }, mobile: { view: 270 } },\r\n  { date: \"2024-06-23\", desktop: { view: 480 }, mobile: { view: 530 } },\r\n  { date: \"2024-06-24\", desktop: { view: 132 }, mobile: { view: 180 } },\r\n  { date: \"2024-06-25\", desktop: { view: 141 }, mobile: { view: 190 } },\r\n  { date: \"2024-06-26\", desktop: { view: 434 }, mobile: { view: 380 } },\r\n  { date: \"2024-06-27\", desktop: { view: 448 }, mobile: { view: 490 } },\r\n  { date: \"2024-06-28\", desktop: { view: 149 }, mobile: { view: 200 } },\r\n  { date: \"2024-06-29\", desktop: { view: 103 }, mobile: { view: 160 } },\r\n  { date: \"2024-06-30\", desktop: { view: 446 }, mobile: { view: 400 } },\r\n]\r\n\r\nconst chartConfig = {\r\n  view: {\r\n    label: \"Page Views\",\r\n  },\r\n  desktop: {\r\n    label: \"Desktop\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  mobile: {\r\n    label: \"Mobile\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst LineChartInteractive = () => {\r\n  const isMobile = useIsMobile()\r\n\r\n  const numTicks = () => {\r\n    if (isMobile()) {\r\n      return 4\r\n    }\r\n    return 9\r\n  }\r\n\r\n  const [activeChart, setActiveChart] =\r\n    createSignal<keyof typeof chartConfig>(\"desktop\")\r\n\r\n  const keys = createMemo(() =>\r\n    // @ts-expect-error\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    Object.keys(data[0][activeChart()]).map((i) => ({ view: i }))\r\n  )\r\n\r\n  const y = createMemo(() =>\r\n    // @ts-expect-error\r\n    // eslint-disable-next-line solid/reactivity\r\n    keys().map((i) => (d: DataRecord) => d[activeChart()][i.view])\r\n  )\r\n\r\n  const total = createMemo(() => ({\r\n    desktop: data.reduce((acc, curr) => acc + curr.desktop.view, 0),\r\n    mobile: data.reduce((acc, curr) => acc + curr.mobile.view, 0),\r\n  }))\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader class=\"flex flex-col items-stretch space-y-0 border-b p-0 sm:flex-row\">\r\n        <div class=\"flex flex-1 flex-col justify-center gap-1 px-6 py-5 sm:py-6\">\r\n          <CardTitle>Line Chart - Interactive</CardTitle>\r\n          <CardDescription>\r\n            Showing total visitors for the last 3 months\r\n          </CardDescription>\r\n        </div>\r\n        <div class=\"flex\">\r\n          <For each={[\"desktop\", \"mobile\"]}>\r\n            {(key) => {\r\n              const chart = key as keyof typeof chartConfig\r\n              return (\r\n                <button\r\n                  data-active={activeChart() === chart}\r\n                  class=\"data-[active=true]:bg-muted/50 relative z-30 flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l sm:border-l sm:border-t-0 sm:px-8 sm:py-6\"\r\n                  onClick={() => setActiveChart(chart)}\r\n                >\r\n                  <span class=\"text-muted-foreground text-xs\">\r\n                    {chartConfig[chart].label}\r\n                  </span>\r\n                  <span class=\"text-lg font-bold leading-none sm:text-3xl\">\r\n                    {total()[key as keyof typeof total]}\r\n                  </span>\r\n                </button>\r\n              )\r\n            }}\r\n          </For>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          type=\"xy\"\r\n          data={data}\r\n          class=\"aspect-auto\"\r\n          yDomain={[0, Math.max(...data.map((d) => d.mobile.view + 50))]}\r\n        >\r\n          <VisLine<DataRecord>\r\n            x={(_, i) => i}\r\n            y={y()}\r\n            color={`var(--color-${activeChart()})`}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            tickFormat={(d) => {\r\n              const date = new Date(data[d as number].date)\r\n              return date.toLocaleDateString(\"en-US\", {\r\n                month: \"short\",\r\n                day: \"numeric\",\r\n              })\r\n            }}\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={numTicks()}\r\n          />\r\n          <ChartCrosshair<DataRecord>\r\n            color={`var(--color-${activeChart()})`}\r\n            template={(props) => (\r\n              <ChartTooltipContent\r\n                labelKey=\"date\"\r\n                nameKey=\"view\"\r\n                labelFormatter={() =>\r\n                  new Date(props.data.date).toLocaleDateString(\"en-US\", {\r\n                    month: \"short\",\r\n                    day: \"numeric\",\r\n                    year: \"numeric\",\r\n                  })\r\n                }\r\n                {...props}\r\n                data={{\r\n                  date: props.data.date,\r\n                  // @ts-expect-error\r\n                  [activeChart()]: props.data[activeChart()],\r\n                }}\r\n              />\r\n            )}\r\n          />\r\n          <VisTooltip horizontalPlacement={Position.Center} />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default LineChartInteractive\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/line-chart-interactive"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/line-chart-interactive.tsx",
			category: "",
			subcategory: ""
		}, 
		"donut-chart": {
			name: "donut-chart",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/donut-chart.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisDonut, VisTooltip } from \"@unovis/solid\"\r\nimport { Donut } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  browser: string\r\n  visitors: number\r\n  fill: string\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\r\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\r\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\r\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\r\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\r\n]\r\n\r\nconst chartConfig = {\r\n  visitors: {\r\n    label: \"Visitors\",\r\n  },\r\n  chrome: {\r\n    label: \"Chrome\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  safari: {\r\n    label: \"Safari\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n  firefox: {\r\n    label: \"Firefox\",\r\n    color: \"hsl(var(--chart-3))\",\r\n  },\r\n  edge: {\r\n    label: \"Edge\",\r\n    color: \"hsl(var(--chart-4))\",\r\n  },\r\n  other: {\r\n    label: \"Other\",\r\n    color: \"hsl(var(--chart-5))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst DonutChart = () => {\r\n  return (\r\n    <Card class=\"flex flex-col\">\r\n      <CardHeader class=\"items-center\">\r\n        <CardTitle>Donut Chart</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"flex-1\">\r\n        <ChartContainer config={chartConfig} type=\"single\">\r\n          <VisDonut<DataRecord>\r\n            data={data}\r\n            value={(d) => d.visitors}\r\n            color={(d) => d.fill}\r\n            arcWidth={40}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [Donut.selectors.segment]: (d: { data: DataRecord }, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d.data}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"browser\"\r\n                    hideLabel\r\n                    labelAsKey\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter class=\"flex-col gap-2 text-sm\">\r\n        <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n          Trending up by 5.2% this month{\" \"}\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            class=\"size-4\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <g\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              stroke-width=\"2\"\r\n            >\r\n              <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n              <path d=\"M16 7h6v6\" />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n        <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n          Showing total visitors for the last 6 months\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default DonutChart\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/donut-chart"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/donut-chart.tsx",
			category: "",
			subcategory: ""
		}, 
		"donut-chart-pie": {
			name: "donut-chart-pie",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/donut-chart-pie.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisDonut, VisTooltip } from \"@unovis/solid\"\r\nimport { Donut } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  browser: string\r\n  visitors: number\r\n  fill: string\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\r\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\r\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\r\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\r\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\r\n]\r\n\r\nconst chartConfig = {\r\n  visitors: {\r\n    label: \"Visitors\",\r\n  },\r\n  chrome: {\r\n    label: \"Chrome\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  safari: {\r\n    label: \"Safari\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n  firefox: {\r\n    label: \"Firefox\",\r\n    color: \"hsl(var(--chart-3))\",\r\n  },\r\n  edge: {\r\n    label: \"Edge\",\r\n    color: \"hsl(var(--chart-4))\",\r\n  },\r\n  other: {\r\n    label: \"Other\",\r\n    color: \"hsl(var(--chart-5))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst DonutChartPie = () => {\r\n  return (\r\n    <Card class=\"flex flex-col\">\r\n      <CardHeader class=\"items-center\">\r\n        <CardTitle>Donut Chart - Pie</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"flex-1\">\r\n        <ChartContainer config={chartConfig} type=\"single\">\r\n          <VisDonut<DataRecord>\r\n            data={data}\r\n            value={(d) => d.visitors}\r\n            color={(d) => d.fill}\r\n            arcWidth={0}\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [Donut.selectors.segment]: (d: { data: DataRecord }, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d.data}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"browser\"\r\n                    hideLabel\r\n                    labelAsKey\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter class=\"flex-col gap-2 text-sm\">\r\n        <div class=\"flex items-center gap-2 font-medium leading-none\">\r\n          Trending up by 5.2% this month{\" \"}\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            class=\"size-4\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <g\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              stroke-width=\"2\"\r\n            >\r\n              <path d=\"m22 7l-8.5 8.5l-5-5L2 17\" />\r\n              <path d=\"M16 7h6v6\" />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n        <div class=\"text-muted-foreground flex items-center gap-2 leading-none\">\r\n          Showing total visitors for the last 6 months\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default DonutChartPie\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/donut-chart-pie"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/donut-chart-pie.tsx",
			category: "",
			subcategory: ""
		}, 
		"donut-chart-legend": {
			name: "donut-chart-legend",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/donut-chart-legend.tsx",
				type: "registry:block",
				target: "",
				content: "import { VisBulletLegend, VisDonut } from \"@unovis/solid\"\r\nimport type { BulletLegendItemInterface } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  browser: string\r\n  visitors: number\r\n  fill: string\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\r\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\r\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\r\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\r\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\r\n]\r\n\r\nconst chartConfig = {\r\n  visitors: {\r\n    label: \"Visitors\",\r\n  },\r\n  chrome: {\r\n    label: \"Chrome\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  safari: {\r\n    label: \"Safari\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n  firefox: {\r\n    label: \"Firefox\",\r\n    color: \"hsl(var(--chart-3))\",\r\n  },\r\n  edge: {\r\n    label: \"Edge\",\r\n    color: \"hsl(var(--chart-4))\",\r\n  },\r\n  other: {\r\n    label: \"Other\",\r\n    color: \"hsl(var(--chart-5))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst DonutChartLegend = () => {\r\n  const items = (): BulletLegendItemInterface[] => {\r\n    return Object.entries(chartConfig)\r\n      .filter(([key]) => key !== \"visitors\")\r\n      .map(([_, config]) => ({\r\n        name: config.label,\r\n        // @ts-expect-error\r\n        color: config.color,\r\n      }))\r\n  }\r\n\r\n  return (\r\n    <Card class=\"flex flex-col\">\r\n      <CardHeader class=\"items-center\">\r\n        <CardTitle>Donut Chart - Legend</CardTitle>\r\n        <CardDescription>January - June 2024</CardDescription>\r\n      </CardHeader>\r\n      <CardContent class=\"flex-1 pb-0\">\r\n        <ChartContainer config={chartConfig} type=\"single\">\r\n          <VisDonut<DataRecord>\r\n            data={data}\r\n            value={(d) => d.visitors}\r\n            color={(d) => d.fill}\r\n            arcWidth={40}\r\n          />\r\n        </ChartContainer>\r\n        <div class=\"flex items-center justify-center py-3 pt-6\">\r\n          <div class=\"w-2/3 [&>div>*]:flex [&>div>*]:basis-1/4 [&>div>*]:justify-center [&>div]:!flex [&>div]:flex-wrap [&>div]:justify-center [&>div]:gap-2\">\r\n            <VisBulletLegend items={items()} />\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default DonutChartLegend\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/donut-chart-legend"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/donut-chart-legend.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-default": {
			name: "chart-tooltip-default",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-default.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipDefault = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - Default</CardTitle>\r\n        <CardDescription>\r\n          Default tooltip with ChartTooltipContent.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipDefault\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-default"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-default.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-line": {
			name: "chart-tooltip-line",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-line.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipLine = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - Line Indicator</CardTitle>\r\n        <CardDescription>Tooltip with line indicator.</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                    indicator=\"line\"\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipLine\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-line"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-line.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-no-indicator": {
			name: "chart-tooltip-no-indicator",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-no-indicator.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipNoIndicator = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - No Indicator</CardTitle>\r\n        <CardDescription>Tooltip with no indicator.</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                    hideIndicator\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipNoIndicator\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-no-indicator"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-no-indicator.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-custom-label": {
			name: "chart-tooltip-custom-label",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-custom-label.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  activities: {\r\n    label: \"Activities\",\r\n  },\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipCustomLabel = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - Custom label</CardTitle>\r\n        <CardDescription>\r\n          Tooltip with custom label from chartConfig.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent<DataRecord, typeof chartConfig>\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"activities\"\r\n                    indicator=\"line\"\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipCustomLabel\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-custom-label"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-custom-label.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-label-formatter": {
			name: "chart-tooltip-label-formatter",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-label-formatter.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipLabelFormatter = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - Label Formatter</CardTitle>\r\n        <CardDescription>Tooltip with label formatter.</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                    labelFormatter={() =>\r\n                      new Date(d.date).toLocaleDateString(\"en-US\", {\r\n                        day: \"numeric\",\r\n                        month: \"long\",\r\n                        year: \"numeric\",\r\n                      })\r\n                    }\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipLabelFormatter\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-label-formatter"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-label-formatter.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-no-label": {
			name: "chart-tooltip-no-label",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-no-label.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipNoLabel = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - No Label</CardTitle>\r\n        <CardDescription>Tooltip with no label.</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                    hideLabel\r\n                    hideIndicator\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipNoLabel\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-no-label"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-no-label.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-formatter": {
			name: "chart-tooltip-formatter",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-formatter.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipFormatter = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - Formatter</CardTitle>\r\n        <CardDescription>Tooltip with custom formatter .</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                    hideLabel\r\n                    formatter={(value, name) => (\r\n                      <div class=\"text-muted-foreground flex min-w-[130px] items-center text-xs\">\r\n                        {name}\r\n                        <div class=\"text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums\">\r\n                          {value}\r\n                          <span class=\"text-muted-foreground font-normal\">\r\n                            kcal\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipFormatter\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-formatter"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-formatter.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-icon": {
			name: "chart-tooltip-icon",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-icon.tsx",
				type: "registry:block",
				target: "",
				content: "import { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n    icon: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n        <path\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n          d=\"M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0m16 4v-2.38c0-2.12 1.03-3.12 1-5.62c-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0m-4-3h4M4 13h4\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n    icon: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n        <path\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n          d=\"M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1M2 12c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1M2 18c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipIcon = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - Icon</CardTitle>\r\n        <CardDescription>Tooltip with icons.</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                    hideLabel\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipIcon\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-icon"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-icon.tsx",
			category: "",
			subcategory: ""
		}, 
		"chart-tooltip-advanced": {
			name: "chart-tooltip-advanced",
			description: "",
			type: "registry:block",
			registryDependencies: ["card","chart"],
			files: [{
				path: "src/registry/tailwindcss/charts/chart-tooltip-advanced.tsx",
				type: "registry:block",
				target: "",
				content: "import { Show } from \"solid-js\"\r\nimport { render } from \"solid-js/web\"\r\nimport { VisAxis, VisStackedBar, VisTooltip } from \"@unovis/solid\"\r\nimport { StackedBar } from \"@unovis/ts\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltipContent,\r\n  type ChartConfig,\r\n} from \"@/components/ui/chart\"\r\n\r\ntype DataRecord = {\r\n  date: string\r\n  running: number\r\n  swimming: number\r\n}\r\n\r\nconst data: DataRecord[] = [\r\n  { date: \"2024-07-15\", running: 450, swimming: 300 },\r\n  { date: \"2024-07-16\", running: 380, swimming: 420 },\r\n  { date: \"2024-07-17\", running: 520, swimming: 120 },\r\n  { date: \"2024-07-18\", running: 140, swimming: 550 },\r\n  { date: \"2024-07-19\", running: 600, swimming: 350 },\r\n  { date: \"2024-07-20\", running: 480, swimming: 400 },\r\n]\r\n\r\nconst chartConfig = {\r\n  running: {\r\n    label: \"Running\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  swimming: {\r\n    label: \"Swimming\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n} satisfies ChartConfig\r\n\r\nconst ChartTooltipAdvanced = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Tooltip - Advanced</CardTitle>\r\n        <CardDescription>\r\n          Tooltip with custom formatter and total.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig} type=\"xy\" data={data}>\r\n          <VisStackedBar<DataRecord>\r\n            x={(_, i) => i}\r\n            y={[(d) => d.running, (d) => d.swimming]}\r\n            color={[\"var(--color-running)\", \"var(--color-swimming)\"]}\r\n            roundedCorners={4}\r\n          />\r\n          <VisAxis<DataRecord>\r\n            type=\"x\"\r\n            gridLine={false}\r\n            tickLine={false}\r\n            domainLine={false}\r\n            numTicks={data.length}\r\n            tickFormat={(d) =>\r\n              new Date(data[d as number].date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"short\",\r\n              })\r\n            }\r\n          />\r\n          <VisTooltip\r\n            triggers={{\r\n              [StackedBar.selectors.bar]: (d: DataRecord, x) => {\r\n                const container = document.createElement(\"div\")\r\n                const Component = () => (\r\n                  <ChartTooltipContent\r\n                    data={d}\r\n                    x={x}\r\n                    config={chartConfig}\r\n                    labelKey=\"date\"\r\n                    hideLabel\r\n                    formatter={(value, name, item, index) => (\r\n                      <>\r\n                        <div\r\n                          class=\"h-2.5 w-2.5 shrink-0 rounded-[2px] bg-[--color-bg]\"\r\n                          style={{\r\n                            \"--color-bg\": `var(--color-${(name as string).toLowerCase()})`,\r\n                          }}\r\n                        />\r\n                        {name}\r\n                        <div class=\"text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums\">\r\n                          {value}\r\n                          <span class=\"text-muted-foreground font-normal\">\r\n                            kcal\r\n                          </span>\r\n                        </div>\r\n                        {/* Add this after the last item */}\r\n                        <Show when={index === 1}>\r\n                          <div class=\"text-foreground mt-1.5 flex basis-full items-center border-t pt-1.5 text-xs font-medium\">\r\n                            Total\r\n                            <div class=\"text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums\">\r\n                              {item.running + item.swimming}\r\n                              <span class=\"text-muted-foreground font-normal\">\r\n                                kcal\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </Show>\r\n                      </>\r\n                    )}\r\n                  />\r\n                )\r\n                render(() => <Component />, container)\r\n                return container.innerHTML\r\n              },\r\n            }}\r\n          />\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartTooltipAdvanced\r\n"
			}],
			component: clientOnly(() => import("@/registry/tailwindcss/charts/chart-tooltip-advanced"), { lazy: true }),
			source: "src/__registry__/tailwindcss/charts/chart-tooltip-advanced.tsx",
			category: "",
			subcategory: ""
		},
	},
  }
  