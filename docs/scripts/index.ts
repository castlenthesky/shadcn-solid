import fs, { existsSync, mkdirSync } from "node:fs"
import { tmpdir } from "node:os"
import path from "node:path"
import { registry } from "@/registry"
import { rimraf } from "rimraf"
import { Project, ScriptKind } from "ts-morph"
import * as v from "valibot"

import { frameworks } from "@/registry/frameworks"
import { registrySchema, type Registry } from "@/registry/schema"

const REGISTRY_PATH = path.join(process.cwd(), "public/registry")

const project = new Project({
  compilerOptions: {},
})

function createTempSourceFile(filename: string) {
  const dir = fs.mkdtempSync(path.join(tmpdir(), "shadcn-"))
  return path.join(dir, filename)
}

const fixImport = (content: string) => {
  const regex = /@\/(.+?)\/((?:.*?\/)?(?:components|ui|hooks|lib))\/([\w-]+)/g

  const replacement = (
    match: string,
    path: string,
    type: string,
    component: string
  ) => {
    if (type.endsWith("components")) {
      return `@/components/${component}`
    }
    if (type.endsWith("ui")) {
      return `@/components/ui/${component}`
    }
    if (type.endsWith("hooks")) {
      return `@/hooks/${component}`
    }
    if (type.endsWith("lib")) {
      return `@/lib/${component}`
    }

    return match
  }

  return content.replace(regex, replacement)
}

const getFileContent = (filePath: string) => {
  const raw = fs.readFileSync(filePath, "utf-8")

  const project = new Project({
    compilerOptions: {},
  })

  const tempFile = createTempSourceFile(filePath)
  const sourceFile = project.createSourceFile(tempFile, raw, {
    scriptKind: ScriptKind.TSX,
  })

  let code = sourceFile.getFullText()

  // Fix imports.
  code = fixImport(code)

  return JSON.stringify(code, null, 4)
}

// ----------------------------------------------------------------------------
// Build __registry__/index.tsx.
// ----------------------------------------------------------------------------
function buildRegistry(registry: Registry) {
  let index = `// @ts-nocheck
// This file is autogenerated by scripts/index.ts
// Do not edit this file directly.
import { clientOnly } from "@solidjs/start"
  
export const Index: Record<string, any> = {
  `

  for (const framework of frameworks) {
    // we don't render any of component or example of `unocss`
    if (framework.name === "unocss") {
      break
    }

    index += ` "${framework.name}": {`

    // Build style index.
    for (const item of registry) {
      // we only need `example` and `block`
      if (item.type === "registry:example" || item.type === "registry:block") {
        const resolveFiles = item.files?.map(
          (file) =>
            `src/registry/${framework.name}/${
              typeof file === "string" ? file : file.path
            }`
        )
        if (!resolveFiles) {
          continue
        }

        const type = item.type.split(":")[1]
        let sourceFilename = ""

        let componentPath = `@/registry/${framework.name}/${type}/${item.name}`

        if (item.type === "registry:block") {
          const file = resolveFiles[0]
          const filename = path.basename(file)

          let raw: string
          try {
            raw = fs.readFileSync(file, "utf8")
          } catch {
            continue
          }

          const tempFile = createTempSourceFile(filename)
          const sourceFile = project.createSourceFile(tempFile, raw, {
            scriptKind: ScriptKind.TSX,
          })

          // Find all imports.
          const imports = new Map<
            string,
            {
              module: string
              text: string
              isDefault?: boolean
            }
          >()
          for (const node of sourceFile.getImportDeclarations()) {
            const module = node.getModuleSpecifier().getLiteralValue()
            for (const item of node.getNamedImports()) {
              imports.set(item.getText(), {
                module,
                text: node.getText(),
              })
            }

            const defaultImport = node.getDefaultImport()
            if (defaultImport) {
              imports.set(defaultImport.getText(), {
                module,
                text: defaultImport.getText(),
                isDefault: true,
              })
            }
          }

          // // Write the source file for blocks only.
          sourceFilename = `__registry__/${framework.name}/${type}/${item.name}.tsx`

          if (item.files) {
            const files = item.files.map((file) =>
              typeof file === "string"
                ? { type: "registry:page", path: file }
                : file
            )
            if (files.length) {
              sourceFilename = `src/__registry__/${framework.name}/${files[0].path}`
            }
          }

          const sourcePath = path.join(process.cwd(), sourceFilename)
          if (!existsSync(sourcePath)) {
            fs.mkdirSync(sourcePath, { recursive: true })
          }

          rimraf.sync(sourcePath)
          fs.writeFileSync(sourcePath, sourceFile.getText())
        }

        if (item.files) {
          const files = item.files.map((file) =>
            typeof file === "string"
              ? { type: "registry:page", path: file }
              : file
          )
          if (files.length) {
            componentPath = `@/registry/${framework.name}/${files[0].path.slice(0, -4)}`
          }
        }

        index += ` 
		"${item.name}": {
			name: "${item.name}",
			description: "${item.description ?? ""}",
			type: "${item.type}",
			registryDependencies: ${JSON.stringify(item.registryDependencies)},
			files: [${item.files?.map((file) => {
        const filePath = `src/registry/${framework.name}/${
          typeof file === "string" ? file : file.path
        }`
        const resolvedFilePath = path.resolve(filePath)
        const content = getFileContent(filePath)

        return typeof file === "string"
          ? `"${resolvedFilePath}"`
          : `{
				path: "${filePath}",
				type: "${file.type}",
				target: "${file.target ?? ""}",
				content: ${item.type === "registry:block" ? content : '""'}
			}`
      })}],
			component: clientOnly(() => import("${componentPath}"), { lazy: true }),
			source: "${sourceFilename}",
			category: "${item.category ?? ""}",
			subcategory: "${item.subcategory ?? ""}"
		},`
      }
    }

    index += `
	},`
  }

  index += `
  }
  `

  // ----------------------------------------------------------------------------
  // Build registry/index.json.
  // ----------------------------------------------------------------------------
  const items = registry
    .filter((item) => ["registry:ui"].includes(item.type))
    .map((item) => {
      return {
        ...item,
        files: item.files?.map((_file) => {
          const file =
            typeof _file === "string"
              ? {
                  path: _file,
                  type: item.type,
                }
              : _file

          return file
        }),
      }
    })
  const registryJson = JSON.stringify(items, null, 2)
  if (!existsSync(path.join(REGISTRY_PATH))) {
    mkdirSync(path.join(REGISTRY_PATH), { recursive: true })
  }
  rimraf.sync(path.join(REGISTRY_PATH, "index.json"))
  fs.writeFileSync(path.join(REGISTRY_PATH, "index.json"), registryJson, "utf8")

  // Write style index.
  if (!existsSync(path.join(process.cwd(), "src/__registry__"))) {
    mkdirSync(path.join(process.cwd(), "src/__registry__"), {
      recursive: true,
    })
  }
  rimraf.sync(path.join(process.cwd(), "src/__registry__/index.ts"))
  fs.writeFileSync(path.join(process.cwd(), "src/__registry__/index.ts"), index)
}

try {
  const result = v.safeParse(registrySchema, registry)

  if (!result.success) {
    console.error(result.issues)
    process.exit(1)
  }

  buildRegistry(result.output)

  console.log("âœ… Done!")
} catch (error) {
  console.error(error)
  process.exit(1)
}
