/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainImport } from './routes/_main'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as MainDocsImport } from './routes/_main/docs'
import { Route as MainDocsSplatImport } from './routes/_main/docs.$'

// Create/Update Routes

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const MainDocsRoute = MainDocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => MainRoute,
} as any)

const MainDocsSplatRoute = MainDocsSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => MainDocsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/_main/docs': {
      id: '/_main/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof MainDocsImport
      parentRoute: typeof MainImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/docs/$': {
      id: '/_main/docs/$'
      path: '/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof MainDocsSplatImport
      parentRoute: typeof MainDocsImport
    }
  }
}

// Create and export the route tree

interface MainDocsRouteChildren {
  MainDocsSplatRoute: typeof MainDocsSplatRoute
}

const MainDocsRouteChildren: MainDocsRouteChildren = {
  MainDocsSplatRoute: MainDocsSplatRoute,
}

const MainDocsRouteWithChildren = MainDocsRoute._addFileChildren(
  MainDocsRouteChildren,
)

interface MainRouteChildren {
  MainDocsRoute: typeof MainDocsRouteWithChildren
  MainIndexRoute: typeof MainIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainDocsRoute: MainDocsRouteWithChildren,
  MainIndexRoute: MainIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/docs': typeof MainDocsRouteWithChildren
  '/': typeof MainIndexRoute
  '/docs/$': typeof MainDocsSplatRoute
}

export interface FileRoutesByTo {
  '/docs': typeof MainDocsRouteWithChildren
  '/': typeof MainIndexRoute
  '/docs/$': typeof MainDocsSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_main': typeof MainRouteWithChildren
  '/_main/docs': typeof MainDocsRouteWithChildren
  '/_main/': typeof MainIndexRoute
  '/_main/docs/$': typeof MainDocsSplatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/docs' | '/' | '/docs/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/docs' | '/' | '/docs/$'
  id: '__root__' | '/_main' | '/_main/docs' | '/_main/' | '/_main/docs/$'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_main"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/docs",
        "/_main/"
      ]
    },
    "/_main/docs": {
      "filePath": "_main/docs.tsx",
      "parent": "/_main",
      "children": [
        "/_main/docs/$"
      ]
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    },
    "/_main/docs/$": {
      "filePath": "_main/docs.$.tsx",
      "parent": "/_main/docs"
    }
  }
}
ROUTE_MANIFEST_END */
